
Dynamic_NFC_tag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008140  08008140  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008148  08008148  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08008150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001320  200000c0  08008210  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e0  08008210  000213e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002215a  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ec3  00000000  00000000  0004224a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001850  00000000  00000000  00046110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  00047960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ab6e  00000000  00000000  00048fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000142ce  00000000  00000000  00063b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ea25  00000000  00000000  00077e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  001068b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c28 	.word	0x08007c28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08007c28 	.word	0x08007c28

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ST25DV_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ST25DV_RegisterBusIO (ST25DV_Object_t* pObj, ST25DV_IO_t *pIO)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  int32_t ret = NFCTAG_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <ST25DV_RegisterBusIO+0x1c>
  {
    ret = NFCTAG_ERROR;
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e031      	b.n	8000630 <ST25DV_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init        = pIO->Init;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]
    pObj->IO.Write       = pIO->Write;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
    pObj->IO.Read        = pIO->Read;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	691a      	ldr	r2, [r3, #16]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	611a      	str	r2, [r3, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <ST25DV_RegisterBusIO+0x8c>)
 8000600:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <ST25DV_RegisterBusIO+0x90>)
 8000606:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init == NULL)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <ST25DV_RegisterBusIO+0x6e>
    {
      ret = NFCTAG_ERROR;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e008      	b.n	8000630 <ST25DV_RegisterBusIO+0x80>
    } else if (pObj->IO.Init() != 0) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <ST25DV_RegisterBusIO+0x80>
      ret = NFCTAG_ERROR;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000630:	68fb      	ldr	r3, [r7, #12]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08000ebd 	.word	0x08000ebd
 8000640:	08000f09 	.word	0x08000f09

08000644 <ST25DV_Init>:
/**
  * @brief  ST25DV nfctag Initialization.
  * @return int32_t enum status.
  */
int32_t ST25DV_Init( ST25DV_Object_t *pObj )
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 0U)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10e      	bne.n	8000672 <ST25DV_Init+0x2e>
  {
    uint8_t nfctag_id;
    ST25DV_ReadID(pObj,&nfctag_id);
 8000654:	f107 030f 	add.w	r3, r7, #15
 8000658:	4619      	mov	r1, r3
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f811 	bl	8000682 <ST25DV_ReadID>
    if( (nfctag_id != I_AM_ST25DV04) && (nfctag_id != I_AM_ST25DV64) )
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b24      	cmp	r3, #36	; 0x24
 8000664:	d005      	beq.n	8000672 <ST25DV_Init+0x2e>
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b26      	cmp	r3, #38	; 0x26
 800066a:	d002      	beq.n	8000672 <ST25DV_Init+0x2e>
    {
      return NFCTAG_ERROR;
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	e003      	b.n	800067a <ST25DV_Init+0x36>
    }
  }

  pObj->IsInitialized = 1U;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  return NFCTAG_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <ST25DV_ReadID>:
  * @brief  Reads the ST25DV ID.
  * @param  pICRef Pointeron a uint8_t used to return the ST25DV ID.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadID(ST25DV_Object_t* pObj, uint8_t * const pICRef )
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
  /* Read ICRef on device */
  return ST25DV_GetICREF(&(pObj->Ctx), pICRef);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3318      	adds	r3, #24
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fcad 	bl	8000ff2 <ST25DV_GetICREF>
 8000698:	4603      	mov	r3, r0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <ST25DV_IsDeviceReady>:
  *           This function determines if the ST25DV is ready to answer an I2C request. 
  * @param    Trials Max number of tentative.
  * @retval   int32_t enum status.
  */
int32_t ST25DV_IsDeviceReady(ST25DV_Object_t* pObj,  const uint32_t Trials )
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
  /* Test communication with device */
  return pObj->IO.IsReady(ST25DV_ADDR_DATA_I2C, Trials );
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	6839      	ldr	r1, [r7, #0]
 80006b2:	20a6      	movs	r0, #166	; 0xa6
 80006b4:	4798      	blx	r3
 80006b6:	4603      	mov	r3, r0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <ST25DV_GetGPOStatus>:
  *                     - RFWRITE = 0x80
  *
  * @retval   int32_t enum status.
  */
int32_t ST25DV_GetGPOStatus(ST25DV_Object_t* pObj,  uint16_t * const pGPOStatus )
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  int32_t status;
  
  /* Read value of GPO register */
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3318      	adds	r3, #24
 80006ce:	f107 020b 	add.w	r2, r7, #11
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fd5f 	bl	8001198 <ST25DV_GetGPO_ALL>
 80006da:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <ST25DV_GetGPOStatus+0x26>
    return status;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	e004      	b.n	80006f0 <ST25DV_GetGPOStatus+0x30>

  /* Extract GPO configuration */
  *pGPOStatus = (uint16_t)reg_value;
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	801a      	strh	r2, [r3, #0]
  
  return NFCTAG_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <ST25DV_ConfigureGPO>:
  *           - RFWRITE = 0x80
  *
  * @retval   int32_t enum status.
  */
int32_t ST25DV_ConfigureGPO(ST25DV_Object_t* pObj,  const uint16_t ITConf )
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
  /* Write GPO configuration to register */
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3318      	adds	r3, #24
 8000708:	1cba      	adds	r2, r7, #2
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fd59 	bl	80011c4 <ST25DV_SetGPO_ALL>
 8000712:	4603      	mov	r3, r0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	460b      	mov	r3, r1
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	4613      	mov	r3, r2
 8000730:	80bb      	strh	r3, [r7, #4]
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	691c      	ldr	r4, [r3, #16]
 8000736:	88bb      	ldrh	r3, [r7, #4]
 8000738:	88f9      	ldrh	r1, [r7, #6]
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	20a6      	movs	r0, #166	; 0xa6
 800073e:	47a0      	blx	r4
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}

0800074a <ST25DV_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteData(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 800074a:	b590      	push	{r4, r7, lr}
 800074c:	b08b      	sub	sp, #44	; 0x2c
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	4611      	mov	r1, r2
 8000756:	461a      	mov	r2, r3
 8000758:	460b      	mov	r3, r1
 800075a:	80fb      	strh	r3, [r7, #6]
 800075c:	4613      	mov	r3, r2
 800075e:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint16_t split_data_nb;
  const uint8_t *pdata_index = (const uint8_t *)pData;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	61fb      	str	r3, [r7, #28]
  uint16_t bytes_to_write = NbByte;
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	837b      	strh	r3, [r7, #26]
  uint16_t mem_addr = TarAddr;
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	833b      	strh	r3, [r7, #24]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800076c:	8b7b      	ldrh	r3, [r7, #26]
 800076e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000772:	d903      	bls.n	800077c <ST25DV_WriteData+0x32>
    {
      /* DataSize higher than max page write, copy data by page */
      split_data_nb = (uint16_t)ST25DV_MAX_WRITE_BYTE;
 8000774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000778:	847b      	strh	r3, [r7, #34]	; 0x22
 800077a:	e001      	b.n	8000780 <ST25DV_WriteData+0x36>
    }
    else
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
 800077c:	8b7b      	ldrh	r3, [r7, #26]
 800077e:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    /* Write split_data_nb bytes in memory */
    ret = pObj->IO.Write( ST25DV_ADDR_DATA_I2C, mem_addr, pdata_index, split_data_nb);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	68dc      	ldr	r4, [r3, #12]
 8000784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000786:	8b39      	ldrh	r1, [r7, #24]
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	20a6      	movs	r0, #166	; 0xa6
 800078c:	47a0      	blx	r4
 800078e:	6278      	str	r0, [r7, #36]	; 0x24

    if( ret == NFCTAG_OK )
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	2b00      	cmp	r3, #0
 8000794:	d11c      	bne.n	80007d0 <ST25DV_WriteData+0x86>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4798      	blx	r3
 800079c:	6178      	str	r0, [r7, #20]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2101      	movs	r1, #1
 80007a4:	20a6      	movs	r0, #166	; 0xa6
 80007a6:	4798      	blx	r3
 80007a8:	6138      	str	r0, [r7, #16]
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4798      	blx	r3
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007bc:	d202      	bcs.n	80007c4 <ST25DV_WriteData+0x7a>
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1ec      	bne.n	800079e <ST25DV_WriteData+0x54>
      
      if( pollstatus != NFCTAG_OK )
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <ST25DV_WriteData+0x86>
      {
        ret = NFCTAG_TIMEOUT;
 80007ca:	f06f 0302 	mvn.w	r3, #2
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 80007d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	4413      	add	r3, r2
 80007d6:	61fb      	str	r3, [r7, #28]
    mem_addr += split_data_nb;
 80007d8:	8b3a      	ldrh	r2, [r7, #24]
 80007da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007dc:	4413      	add	r3, r2
 80007de:	833b      	strh	r3, [r7, #24]
    bytes_to_write -= split_data_nb;
 80007e0:	8b7a      	ldrh	r2, [r7, #26]
 80007e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	837b      	strh	r3, [r7, #26]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 80007e8:	8b7b      	ldrh	r3, [r7, #26]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <ST25DV_WriteData+0xaa>
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0bb      	beq.n	800076c <ST25DV_WriteData+0x22>
  
  return ret;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	372c      	adds	r7, #44	; 0x2c
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}

080007fe <ST25DV_WriteRegister>:
  * @param    TarAddr I2C register address to written.
  * @param    NbByte  Number of bytes to be written.
  * @return   int32_t enum status.
  */
int32_t ST25DV_WriteRegister(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 80007fe:	b590      	push	{r4, r7, lr}
 8000800:	b08b      	sub	sp, #44	; 0x2c
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	80fb      	strh	r3, [r7, #6]
 8000810:	4613      	mov	r3, r2
 8000812:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint8_t split_data_nb;
  uint16_t bytes_to_write = NbByte;
 8000814:	88bb      	ldrh	r3, [r7, #4]
 8000816:	843b      	strh	r3, [r7, #32]
  uint16_t mem_addr = TarAddr;
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	83fb      	strh	r3, [r7, #30]
  const uint8_t *pdata_index = (const uint8_t *)pData;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	61bb      	str	r3, [r7, #24]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 8000820:	8c3b      	ldrh	r3, [r7, #32]
 8000822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000826:	d903      	bls.n	8000830 <ST25DV_WriteRegister+0x32>
    {
      /* DataSize higher than max page write, copy data by page */
      split_data_nb = (uint8_t)ST25DV_MAX_WRITE_BYTE;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800082e:	e002      	b.n	8000836 <ST25DV_WriteRegister+0x38>
    }
    else
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
 8000830:	8c3b      	ldrh	r3, [r7, #32]
 8000832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    /* Write split_data_nb bytes in register */
    ret = pObj->IO.Write( ST25DV_ADDR_SYST_I2C, mem_addr, pdata_index,  split_data_nb);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	68dc      	ldr	r4, [r3, #12]
 800083a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800083e:	b29b      	uxth	r3, r3
 8000840:	8bf9      	ldrh	r1, [r7, #30]
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	20ae      	movs	r0, #174	; 0xae
 8000846:	47a0      	blx	r4
 8000848:	6278      	str	r0, [r7, #36]	; 0x24
    if( ret == NFCTAG_OK )
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	2b00      	cmp	r3, #0
 800084e:	d11c      	bne.n	800088a <ST25DV_WriteRegister+0x8c>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4798      	blx	r3
 8000856:	6178      	str	r0, [r7, #20]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	2101      	movs	r1, #1
 800085e:	20a6      	movs	r0, #166	; 0xa6
 8000860:	4798      	blx	r3
 8000862:	6138      	str	r0, [r7, #16]
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4798      	blx	r3
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000876:	d202      	bcs.n	800087e <ST25DV_WriteRegister+0x80>
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1ec      	bne.n	8000858 <ST25DV_WriteRegister+0x5a>
      
      if( pollstatus != NFCTAG_OK )
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <ST25DV_WriteRegister+0x8c>
      {
        ret = NFCTAG_TIMEOUT;
 8000884:	f06f 0302 	mvn.w	r3, #2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 800088a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4413      	add	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
    mem_addr += split_data_nb;
 8000894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000898:	b29a      	uxth	r2, r3
 800089a:	8bfb      	ldrh	r3, [r7, #30]
 800089c:	4413      	add	r3, r2
 800089e:	83fb      	strh	r3, [r7, #30]
    bytes_to_write -= split_data_nb;
 80008a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	8c3a      	ldrh	r2, [r7, #32]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	843b      	strh	r3, [r7, #32]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 80008ac:	8c3b      	ldrh	r3, [r7, #32]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <ST25DV_WriteRegister+0xba>
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0b3      	beq.n	8000820 <ST25DV_WriteRegister+0x22>
  
  return ret;
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	372c      	adds	r7, #44	; 0x2c
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd90      	pop	{r4, r7, pc}

080008c2 <ST25DV_ReadUID>:
  * @brief  Reads the ST25DV UID.
  * @param  pUid Pointer used to return the ST25DV UID value.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadUID(ST25DV_Object_t* pObj,  ST25DV_UID * const pUid )
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
  uint8_t reg_value[8];
  uint8_t i;
  int32_t status;
  
  /* Read value of UID registers */
  status = ST25DV_GetUID( &(pObj->Ctx), reg_value);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3318      	adds	r3, #24
 80008d0:	f107 0208 	add.w	r2, r7, #8
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fc13 	bl	8001102 <ST25DV_GetUID>
 80008dc:	6138      	str	r0, [r7, #16]
  if( status != NFCTAG_OK )
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <ST25DV_ReadUID+0x26>
  {
    return status;
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	e034      	b.n	8000952 <ST25DV_ReadUID+0x90>
  }
  
  /* Store information in 2 WORD */
  pUid->MsbUid = 0;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
  
  for( i = 0; i < 4; i++ )
 80008ee:	2300      	movs	r3, #0
 80008f0:	75fb      	strb	r3, [r7, #23]
 80008f2:	e010      	b.n	8000916 <ST25DV_ReadUID+0x54>
  {
    pUid->MsbUid = (pUid->MsbUid << 8) | reg_value[7 - i];
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	7dfa      	ldrb	r2, [r7, #23]
 80008fc:	f1c2 0207 	rsb	r2, r2, #7
 8000900:	f107 0118 	add.w	r1, r7, #24
 8000904:	440a      	add	r2, r1
 8000906:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800090a:	431a      	orrs	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	601a      	str	r2, [r3, #0]
  for( i = 0; i < 4; i++ )
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	3301      	adds	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d9eb      	bls.n	80008f4 <ST25DV_ReadUID+0x32>
  }
  
  pUid->LsbUid = 0;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  
  for( i = 0; i < 4; i++ )
 8000922:	2300      	movs	r3, #0
 8000924:	75fb      	strb	r3, [r7, #23]
 8000926:	e010      	b.n	800094a <ST25DV_ReadUID+0x88>
  {
    pUid->LsbUid = (pUid->LsbUid << 8) | reg_value[3 - i];
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	7dfa      	ldrb	r2, [r7, #23]
 8000930:	f1c2 0203 	rsb	r2, r2, #3
 8000934:	f107 0118 	add.w	r1, r7, #24
 8000938:	440a      	add	r2, r1
 800093a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800093e:	431a      	orrs	r2, r3
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	605a      	str	r2, [r3, #4]
  for( i = 0; i < 4; i++ )
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	3301      	adds	r3, #1
 8000948:	75fb      	strb	r3, [r7, #23]
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d9eb      	bls.n	8000928 <ST25DV_ReadUID+0x66>
  }
  
  return NFCTAG_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <ST25DV_PresentI2CPassword>:
  * @brief  Presents I2C password, to authorize the I2C writes to protected areas.
  * @param  PassWord Password value on 32bits
  * @return int32_t enum status.
  */
int32_t ST25DV_PresentI2CPassword(ST25DV_Object_t* pObj,  const ST25DV_PASSWD PassWord )
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b08a      	sub	sp, #40	; 0x28
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	e883 0006 	stmia.w	r3, {r1, r2}
  uint8_t ai2c_message[17] = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	741a      	strb	r2, [r3, #16]
  uint8_t i;
  
  /* Build I2C Message with Password + Validation code 0x09 + Password */
  ai2c_message[8] = 0x09;
 8000978:	2309      	movs	r3, #9
 800097a:	773b      	strb	r3, [r7, #28]
  for( i = 0; i < 4; i++ )
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000982:	e042      	b.n	8000a0a <ST25DV_PresentI2CPassword+0xb0>
  {
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800098a:	f1c3 0303 	rsb	r3, r3, #3
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	40da      	lsrs	r2, r3
 8000992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800099c:	440b      	add	r3, r1
 800099e:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a8:	f1c3 0303 	rsb	r3, r3, #3
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	40da      	lsrs	r2, r3
 80009b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009b4:	3304      	adds	r3, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009bc:	440b      	add	r3, r1
 80009be:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 9] = ai2c_message[i];
 80009c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ca:	3309      	adds	r3, #9
 80009cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009d0:	440a      	add	r2, r1
 80009d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80009d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009da:	440b      	add	r3, r1
 80009dc:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 80009e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e4:	1d1a      	adds	r2, r3, #4
 80009e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ea:	330d      	adds	r3, #13
 80009ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009f0:	440a      	add	r2, r1
 80009f2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80009f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009fa:	440b      	add	r3, r1
 80009fc:	f803 2c14 	strb.w	r2, [r3, #-20]
  for( i = 0; i < 4; i++ )
 8000a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a04:	3301      	adds	r3, #1
 8000a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d9b8      	bls.n	8000984 <ST25DV_PresentI2CPassword+0x2a>
  };
  
  /* Present password to ST25DV */
  return ST25DV_WriteRegister(pObj, ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 8000a12:	f107 0114 	add.w	r1, r7, #20
 8000a16:	2311      	movs	r3, #17
 8000a18:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff feee 	bl	80007fe <ST25DV_WriteRegister>
 8000a22:	4603      	mov	r3, r0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <ST25DV_WriteRFZxSS>:
  * @param  Zone        ST25DV_PROTECTION_ZONE value corresponding to the area on which to set the RF protection.
  * @param  RfProtZone  Pointer on a ST25DV_RF_PROT_ZONE value defininf the protection to be set on the area.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteRFZxSS( ST25DV_Object_t* pObj, const ST25DV_PROTECTION_ZONE Zone, const ST25DV_RF_PROT_ZONE RfProtZone )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	460b      	mov	r3, r1
 8000a36:	80ba      	strh	r2, [r7, #4]
 8000a38:	72fb      	strb	r3, [r7, #11]
  uint8_t reg_value;
  int32_t status;
  

  /* Update Sector Security Status */
  reg_value = (RfProtZone.RWprotection << ST25DV_RFA1SS_RWPROT_SHIFT) & ST25DV_RFA1SS_RWPROT_MASK;
 8000a3a:	797b      	ldrb	r3, [r7, #5]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	74fb      	strb	r3, [r7, #19]
  reg_value |= ((RfProtZone.PasswdCtrl << ST25DV_RFA1SS_PWDCTRL_SHIFT) & ST25DV_RFA1SS_PWDCTRL_MASK);
 8000a48:	793b      	ldrb	r3, [r7, #4]
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	7cfb      	ldrb	r3, [r7, #19]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	74fb      	strb	r3, [r7, #19]
  
  /* Write Sector Security register */
  switch( Zone )
 8000a5e:	7afb      	ldrb	r3, [r7, #11]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d833      	bhi.n	8000acc <ST25DV_WriteRFZxSS+0xa0>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <ST25DV_WriteRFZxSS+0x40>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000a91 	.word	0x08000a91
 8000a74:	08000aa5 	.word	0x08000aa5
 8000a78:	08000ab9 	.word	0x08000ab9
  {
    case ST25DV_PROT_ZONE1:
      status = ST25DV_SetRFA1SS_ALL(&(pObj->Ctx), &reg_value);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3318      	adds	r3, #24
 8000a80:	f107 0213 	add.w	r2, r7, #19
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fc22 	bl	80012d0 <ST25DV_SetRFA1SS_ALL>
 8000a8c:	6178      	str	r0, [r7, #20]
      break;
 8000a8e:	e020      	b.n	8000ad2 <ST25DV_WriteRFZxSS+0xa6>
    case ST25DV_PROT_ZONE2:
      status = ST25DV_SetRFA2SS_ALL(&(pObj->Ctx), &reg_value);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3318      	adds	r3, #24
 8000a94:	f107 0213 	add.w	r2, r7, #19
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fc4b 	bl	8001336 <ST25DV_SetRFA2SS_ALL>
 8000aa0:	6178      	str	r0, [r7, #20]
      break;
 8000aa2:	e016      	b.n	8000ad2 <ST25DV_WriteRFZxSS+0xa6>
    case ST25DV_PROT_ZONE3:
      status = ST25DV_SetRFA3SS_ALL(&(pObj->Ctx), &reg_value);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	f107 0213 	add.w	r2, r7, #19
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fc74 	bl	800139c <ST25DV_SetRFA3SS_ALL>
 8000ab4:	6178      	str	r0, [r7, #20]
      break;
 8000ab6:	e00c      	b.n	8000ad2 <ST25DV_WriteRFZxSS+0xa6>
    case ST25DV_PROT_ZONE4:
      status = ST25DV_SetRFA4SS_ALL(&(pObj->Ctx), &reg_value);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3318      	adds	r3, #24
 8000abc:	f107 0213 	add.w	r2, r7, #19
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fc9d 	bl	8001402 <ST25DV_SetRFA4SS_ALL>
 8000ac8:	6178      	str	r0, [r7, #20]
      break;
 8000aca:	e002      	b.n	8000ad2 <ST25DV_WriteRFZxSS+0xa6>
    
    default:
      return NFCTAG_ERROR;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	e000      	b.n	8000ad4 <ST25DV_WriteRFZxSS+0xa8>
  }
    return status; 
 8000ad2:	697b      	ldr	r3, [r7, #20]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ST25DV_WriteEndZonex>:
  * @param  EndZone ST25DV_END_ZONE value corresponding to an area.
  * @param  EndZ   End zone value to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteEndZonex( ST25DV_Object_t* pObj, const ST25DV_END_ZONE EndZone, const uint8_t EndZ )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	70bb      	strb	r3, [r7, #2]
  int32_t status;
  
  /* Write the corresponding End zone value in register */  
  switch( EndZone )
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d00c      	beq.n	8000b0c <ST25DV_WriteEndZonex+0x30>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d013      	beq.n	8000b1e <ST25DV_WriteEndZonex+0x42>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11a      	bne.n	8000b30 <ST25DV_WriteEndZonex+0x54>
  {
    case ST25DV_ZONE_END1:
      status = ST25DV_SetENDA1(&(pObj->Ctx),&EndZ);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3318      	adds	r3, #24
 8000afe:	1cba      	adds	r2, r7, #2
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fa8b 	bl	800101e <ST25DV_SetENDA1>
 8000b08:	60f8      	str	r0, [r7, #12]
      break;
 8000b0a:	e014      	b.n	8000b36 <ST25DV_WriteEndZonex+0x5a>
    case ST25DV_ZONE_END2:
      status = ST25DV_SetENDA2(&(pObj->Ctx),&EndZ);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3318      	adds	r3, #24
 8000b10:	1cba      	adds	r2, r7, #2
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fa92 	bl	800103e <ST25DV_SetENDA2>
 8000b1a:	60f8      	str	r0, [r7, #12]
      break;
 8000b1c:	e00b      	b.n	8000b36 <ST25DV_WriteEndZonex+0x5a>
    case ST25DV_ZONE_END3:
      status = ST25DV_SetENDA3(&(pObj->Ctx),&EndZ);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3318      	adds	r3, #24
 8000b22:	1cba      	adds	r2, r7, #2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa99 	bl	800105e <ST25DV_SetENDA3>
 8000b2c:	60f8      	str	r0, [r7, #12]
      break;
 8000b2e:	e002      	b.n	8000b36 <ST25DV_WriteEndZonex+0x5a>
    
    default:
      return NFCTAG_ERROR;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	e000      	b.n	8000b38 <ST25DV_WriteEndZonex+0x5c>
  }

  return status;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <ST25DV_InitEndZone>:
  *           The ST25DV answers a NACK when setting the EndZone2 & EndZone3 to same value than repectively EndZone1 & EndZone2.
  *           These NACKs are ok.
  * @return int32_t enum status.
  */
int32_t ST25DV_InitEndZone( ST25DV_Object_t* pObj )
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint8_t endval = 0xFF;
 8000b48:	23ff      	movs	r3, #255	; 0xff
 8000b4a:	75fb      	strb	r3, [r7, #23]
  uint32_t maxmemlength;
  ST25DV_MEM_SIZE memsize;
  int32_t ret;
  
  memsize.Mem_Size = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	817b      	strh	r3, [r7, #10]
  memsize.BlockSize = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	723b      	strb	r3, [r7, #8]

  /* Get EEPROM mem size */
  ST25DV_ReadMemSize(pObj, &memsize );
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f905 	bl	8000d6a <ST25DV_ReadMemSize>
  maxmemlength = (memsize.Mem_Size + 1) * (memsize.BlockSize + 1);
 8000b60:	897b      	ldrh	r3, [r7, #10]
 8000b62:	3301      	adds	r3, #1
 8000b64:	7a3a      	ldrb	r2, [r7, #8]
 8000b66:	3201      	adds	r2, #1
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	613b      	str	r3, [r7, #16]
  
  /* Compute Max value for endzone register */
  endval = (maxmemlength / 32) - 1;
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	75fb      	strb	r3, [r7, #23]
  
  /* Write EndZone value to ST25DV registers */
  ret = ST25DV_WriteEndZonex(pObj, ST25DV_ZONE_END3, endval );
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffac 	bl	8000adc <ST25DV_WriteEndZonex>
 8000b84:	60f8      	str	r0, [r7, #12]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d005      	beq.n	8000b98 <ST25DV_InitEndZone+0x58>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000b92:	d001      	beq.n	8000b98 <ST25DV_InitEndZone+0x58>
  {
    return ret;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	e020      	b.n	8000bda <ST25DV_InitEndZone+0x9a>
  }

  ret = ST25DV_WriteEndZonex(pObj,  ST25DV_ZONE_END2, endval );
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff9c 	bl	8000adc <ST25DV_WriteEndZonex>
 8000ba4:	60f8      	str	r0, [r7, #12]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <ST25DV_InitEndZone+0x78>
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000bb2:	d001      	beq.n	8000bb8 <ST25DV_InitEndZone+0x78>
  {
    return ret;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	e010      	b.n	8000bda <ST25DV_InitEndZone+0x9a>
  }

  ret = ST25DV_WriteEndZonex(pObj,  ST25DV_ZONE_END1, endval );
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff8c 	bl	8000adc <ST25DV_WriteEndZonex>
 8000bc4:	60f8      	str	r0, [r7, #12]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <ST25DV_InitEndZone+0x98>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000bd2:	d001      	beq.n	8000bd8 <ST25DV_InitEndZone+0x98>
  {
    return ret;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	e000      	b.n	8000bda <ST25DV_InitEndZone+0x9a>
  }
  
  return ret;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <ST25DV_CreateUserZone>:
  * @param  Zone3Length Length of area3 in bytes (0 to 8064, 0x00 to 0x1F80)
  * @param  Zone4Length Length of area4 in bytes (0 to 8000, 0x00 to 0x1F40)
  * @return int32_t enum status.
  */
int32_t ST25DV_CreateUserZone( ST25DV_Object_t* pObj, uint16_t Zone1Length, uint16_t Zone2Length, uint16_t Zone3Length, uint16_t Zone4Length )
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b088      	sub	sp, #32
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	4608      	mov	r0, r1
 8000bec:	4611      	mov	r1, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	817b      	strh	r3, [r7, #10]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	813b      	strh	r3, [r7, #8]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	80fb      	strh	r3, [r7, #6]
  uint8_t EndVal;
  ST25DV_MEM_SIZE memsize;
  uint16_t maxmemlength = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	83fb      	strh	r3, [r7, #30]
  int32_t ret;
  
  memsize.Mem_Size = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	827b      	strh	r3, [r7, #18]
  memsize.BlockSize = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	743b      	strb	r3, [r7, #16]

  ST25DV_ReadMemSize(pObj, &memsize );
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f000 f8ab 	bl	8000d6a <ST25DV_ReadMemSize>
  
  maxmemlength = (memsize.Mem_Size + 1) * (memsize.BlockSize + 1);
 8000c14:	8a7b      	ldrh	r3, [r7, #18]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	7c3b      	ldrb	r3, [r7, #16]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	fb12 f303 	smulbb	r3, r2, r3
 8000c24:	83fb      	strh	r3, [r7, #30]
  
  /* Checks that values of different zones are in bounds */
  if( ( Zone1Length < 32 ) || ( Zone1Length > maxmemlength ) || ( Zone2Length > (maxmemlength - 32) ) 
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	d912      	bls.n	8000c52 <ST25DV_CreateUserZone+0x70>
 8000c2c:	897a      	ldrh	r2, [r7, #10]
 8000c2e:	8bfb      	ldrh	r3, [r7, #30]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d80e      	bhi.n	8000c52 <ST25DV_CreateUserZone+0x70>
 8000c34:	893a      	ldrh	r2, [r7, #8]
 8000c36:	8bfb      	ldrh	r3, [r7, #30]
 8000c38:	3b20      	subs	r3, #32
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	dc09      	bgt.n	8000c52 <ST25DV_CreateUserZone+0x70>
      || ( Zone3Length > (maxmemlength - 64) ) || ( Zone4Length > (maxmemlength - 96) ) )
 8000c3e:	88fa      	ldrh	r2, [r7, #6]
 8000c40:	8bfb      	ldrh	r3, [r7, #30]
 8000c42:	3b40      	subs	r3, #64	; 0x40
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dc04      	bgt.n	8000c52 <ST25DV_CreateUserZone+0x70>
 8000c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c4a:	8bfb      	ldrh	r3, [r7, #30]
 8000c4c:	3b60      	subs	r3, #96	; 0x60
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dd02      	ble.n	8000c58 <ST25DV_CreateUserZone+0x76>
  {
    return NFCTAG_ERROR;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e084      	b.n	8000d62 <ST25DV_CreateUserZone+0x180>
  }

  /* Checks that the total is less than the authorised maximum */
  if( ( Zone1Length + Zone2Length + Zone3Length + Zone4Length ) > maxmemlength )
 8000c58:	897a      	ldrh	r2, [r7, #10]
 8000c5a:	893b      	ldrh	r3, [r7, #8]
 8000c5c:	441a      	add	r2, r3
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	441a      	add	r2, r3
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	441a      	add	r2, r3
 8000c66:	8bfb      	ldrh	r3, [r7, #30]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dd02      	ble.n	8000c72 <ST25DV_CreateUserZone+0x90>
  {
    return NFCTAG_ERROR;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	e077      	b.n	8000d62 <ST25DV_CreateUserZone+0x180>
  }
  
  /* if The value for each Length is not a multiple of 64 correct it. */
  if( (Zone1Length % 32) != 0 )
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <ST25DV_CreateUserZone+0xa4>
  {
    Zone1Length = Zone1Length - ( Zone1Length % 32 );
 8000c7e:	897b      	ldrh	r3, [r7, #10]
 8000c80:	f023 031f 	bic.w	r3, r3, #31
 8000c84:	817b      	strh	r3, [r7, #10]
  }
  
  if( (Zone2Length % 32) != 0 )
 8000c86:	893b      	ldrh	r3, [r7, #8]
 8000c88:	f003 031f 	and.w	r3, r3, #31
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <ST25DV_CreateUserZone+0xb8>
  {
    Zone2Length = Zone2Length - ( Zone2Length % 32 );
 8000c92:	893b      	ldrh	r3, [r7, #8]
 8000c94:	f023 031f 	bic.w	r3, r3, #31
 8000c98:	813b      	strh	r3, [r7, #8]
  }
  
  if( (Zone3Length % 32) != 0 )
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <ST25DV_CreateUserZone+0xcc>
  {
    Zone3Length = Zone3Length - ( Zone3Length % 32 );
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	f023 031f 	bic.w	r3, r3, #31
 8000cac:	80fb      	strh	r3, [r7, #6]
  }
  
  /* First right 0xFF in each Endx value */
  ret = ST25DV_InitEndZone( pObj);
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff ff46 	bl	8000b40 <ST25DV_InitEndZone>
 8000cb4:	61b8      	str	r0, [r7, #24]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d005      	beq.n	8000cc8 <ST25DV_CreateUserZone+0xe6>
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000cc2:	d001      	beq.n	8000cc8 <ST25DV_CreateUserZone+0xe6>
  {
    return ret;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	e04c      	b.n	8000d62 <ST25DV_CreateUserZone+0x180>
  }
  
  /* Then Write corresponding value for each zone */
  EndVal = (uint8_t)( (Zone1Length / 32 ) - 1 );
 8000cc8:	897b      	ldrh	r3, [r7, #10]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
  ret = ST25DV_WriteEndZonex(pObj, ST25DV_ZONE_END1, EndVal );
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f7ff fefe 	bl	8000adc <ST25DV_WriteEndZonex>
 8000ce0:	61b8      	str	r0, [r7, #24]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <ST25DV_CreateUserZone+0x112>
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000cee:	d001      	beq.n	8000cf4 <ST25DV_CreateUserZone+0x112>
  {
    return ret;
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	e036      	b.n	8000d62 <ST25DV_CreateUserZone+0x180>
  }
  
  EndVal = (uint8_t)( ((Zone1Length + Zone2Length) / 32 ) - 1 );
 8000cf4:	897a      	ldrh	r2, [r7, #10]
 8000cf6:	893b      	ldrh	r3, [r7, #8]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da00      	bge.n	8000d00 <ST25DV_CreateUserZone+0x11e>
 8000cfe:	331f      	adds	r3, #31
 8000d00:	115b      	asrs	r3, r3, #5
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	3b01      	subs	r3, #1
 8000d06:	75fb      	strb	r3, [r7, #23]
  ret = ST25DV_WriteEndZonex(pObj, ST25DV_ZONE_END2, EndVal );
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fee4 	bl	8000adc <ST25DV_WriteEndZonex>
 8000d14:	61b8      	str	r0, [r7, #24]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <ST25DV_CreateUserZone+0x146>
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000d22:	d001      	beq.n	8000d28 <ST25DV_CreateUserZone+0x146>
  {
    return ret;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	e01c      	b.n	8000d62 <ST25DV_CreateUserZone+0x180>
  }
  
  EndVal = (uint8_t)( ((Zone1Length + Zone2Length + Zone3Length) / 32 ) - 1 );
 8000d28:	897a      	ldrh	r2, [r7, #10]
 8000d2a:	893b      	ldrh	r3, [r7, #8]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4413      	add	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da00      	bge.n	8000d38 <ST25DV_CreateUserZone+0x156>
 8000d36:	331f      	adds	r3, #31
 8000d38:	115b      	asrs	r3, r3, #5
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	75fb      	strb	r3, [r7, #23]
  ret = ST25DV_WriteEndZonex(pObj, ST25DV_ZONE_END3, EndVal );
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
 8000d42:	461a      	mov	r2, r3
 8000d44:	2102      	movs	r1, #2
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f7ff fec8 	bl	8000adc <ST25DV_WriteEndZonex>
 8000d4c:	61b8      	str	r0, [r7, #24]
  if( (ret != NFCTAG_OK) && (ret != NFCTAG_NACK) )
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <ST25DV_CreateUserZone+0x17e>
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	f113 0f66 	cmn.w	r3, #102	; 0x66
 8000d5a:	d001      	beq.n	8000d60 <ST25DV_CreateUserZone+0x17e>
  {
    return ret;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	e000      	b.n	8000d62 <ST25DV_CreateUserZone+0x180>
  }
  
  return NFCTAG_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <ST25DV_ReadMemSize>:
  * @brief  Reads the ST25DV Memory Size.
  * @param  pSizeInfo Pointer on a ST25DV_MEM_SIZE structure used to return the Memory size information.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadMemSize( ST25DV_Object_t* pObj, ST25DV_MEM_SIZE * const pSizeInfo )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  uint8_t memsize_msb;
  uint8_t memsize_lsb;
  int32_t status;
  
  /* Read actual value of MEM_SIZE register */
  status = ST25DV_GetMEM_SIZE_LSB(&(pObj->Ctx), &memsize_lsb);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3318      	adds	r3, #24
 8000d78:	f107 020a 	add.w	r2, r7, #10
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9a9 	bl	80010d6 <ST25DV_GetMEM_SIZE_LSB>
 8000d84:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <ST25DV_ReadMemSize+0x26>
    return status;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	e026      	b.n	8000dde <ST25DV_ReadMemSize+0x74>
  status = ST25DV_GetMEM_SIZE_MSB(&(pObj->Ctx), &memsize_msb);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3318      	adds	r3, #24
 8000d94:	f107 020b 	add.w	r2, r7, #11
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f96f 	bl	800107e <ST25DV_GetMEM_SIZE_MSB>
 8000da0:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <ST25DV_ReadMemSize+0x42>
    return status;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	e018      	b.n	8000dde <ST25DV_ReadMemSize+0x74>
  status = ST25DV_GetBLK_SIZE(&(pObj->Ctx), &(pSizeInfo->BlockSize));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3318      	adds	r3, #24
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f978 	bl	80010aa <ST25DV_GetBLK_SIZE>
 8000dba:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <ST25DV_ReadMemSize+0x5c>
    return status;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	e00b      	b.n	8000dde <ST25DV_ReadMemSize+0x74>
  
  /* Extract Memory information */
  pSizeInfo->Mem_Size = (pSizeInfo->Mem_Size << 8) |memsize_lsb;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	885b      	ldrh	r3, [r3, #2]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7abb      	ldrb	r3, [r7, #10]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	805a      	strh	r2, [r3, #2]
  return NFCTAG_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <ST25DV_ReadGPO_Dyn>:
  * @brief  Read value of dynamic GPO register configuration.
  * @param  pGPO ST25DV_GPO pointer of the dynamic GPO configuration to store.
  * @retval NFCTAG enum status.
  */
int32_t ST25DV_ReadGPO_Dyn( ST25DV_Object_t* pObj, uint8_t *GPOConfig )
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  /* Read actual value of ST25DV_GPO_DYN_REG register */
  return ST25DV_GetGPO_DYN_ALL(&(pObj->Ctx), GPOConfig);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3318      	adds	r3, #24
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fa1e 	bl	8001238 <ST25DV_GetGPO_DYN_ALL>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <ST25DV_GetGPO_en_Dyn>:
  * @brief  Get dynamique GPO enable status
  * @param  pGPO_en ST25DV_EN_STATUS pointer of the GPO enable status to store
  * @retval NFCTAG enum status
  */
int32_t ST25DV_GetGPO_en_Dyn( ST25DV_Object_t* pObj, ST25DV_EN_STATUS * const pGPO_en )
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  int32_t status;
  
  /* Read actual value of GPO_DYN register */
  status = ST25DV_GetGPO_DYN_ENABLE(&(pObj->Ctx), &reg_value);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3318      	adds	r3, #24
 8000e14:	f107 020b 	add.w	r2, r7, #11
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f9e8 	bl	80011f0 <ST25DV_GetGPO_DYN_ENABLE>
 8000e20:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <ST25DV_GetGPO_en_Dyn+0x26>
  {
    return status;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	e00a      	b.n	8000e42 <ST25DV_GetGPO_en_Dyn+0x3c>
  }
  
  /* Extract GPO enable status information */
  if( reg_value )
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <ST25DV_GetGPO_en_Dyn+0x34>
  {
    *pGPO_en = ST25DV_ENABLE;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e002      	b.n	8000e40 <ST25DV_GetGPO_en_Dyn+0x3a>
  }
  else
  {
    *pGPO_en = ST25DV_DISABLE;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
  }
  
  return NFCTAG_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <ST25DV_SetRFDisable_Dyn>:
/**
  * @brief  Sets the RF Disable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t ST25DV_SetRFDisable_Dyn( ST25DV_Object_t* pObj )
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  uint8_t reg_value = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
  
  return ST25DV_SetRF_MNGT_DYN_RFDIS(&(pObj->Ctx), &reg_value);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3318      	adds	r3, #24
 8000e5a:	f107 020f 	add.w	r2, r7, #15
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fa00 	bl	8001266 <ST25DV_SetRF_MNGT_DYN_RFDIS>
 8000e66:	4603      	mov	r3, r0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <ST25DV_ResetRFDisable_Dyn>:
/**
  * @brief  Unsets the RF Disable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t ST25DV_ResetRFDisable_Dyn( ST25DV_Object_t* pObj )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint8_t reg_value = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  
  return ST25DV_SetRF_MNGT_DYN_RFDIS(&(pObj->Ctx), &reg_value);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3318      	adds	r3, #24
 8000e80:	f107 020f 	add.w	r2, r7, #15
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f9ed 	bl	8001266 <ST25DV_SetRF_MNGT_DYN_RFDIS>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <ST25DV_ResetMBEN_Dyn>:
/**
  * @brief  Unsets the Mailbox Enable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t ST25DV_ResetMBEN_Dyn( ST25DV_Object_t* pObj )
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  uint8_t reg_value = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
    
  /* Write MB_CTRL_DYN register */
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3318      	adds	r3, #24
 8000ea6:	f107 020f 	add.w	r2, r7, #15
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f93e 	bl	800112e <ST25DV_SetMB_CTRL_DYN_MBEN>
 8000eb2:	4603      	mov	r3, r0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <ReadRegWrap>:
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
}

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	460b      	mov	r3, r1
 8000eca:	817b      	strh	r3, [r7, #10]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	813b      	strh	r3, [r7, #8]
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	617b      	str	r3, [r7, #20]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 8000ed4:	897b      	ldrh	r3, [r7, #10]
 8000ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	691c      	ldr	r4, [r3, #16]
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	8979      	ldrh	r1, [r7, #10]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	20a6      	movs	r0, #166	; 0xa6
 8000eea:	47a0      	blx	r4
 8000eec:	4603      	mov	r3, r0
 8000eee:	e007      	b.n	8000f00 <ReadRegWrap+0x44>
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	691c      	ldr	r4, [r3, #16]
 8000ef4:	893b      	ldrh	r3, [r7, #8]
 8000ef6:	8979      	ldrh	r1, [r7, #10]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	20ae      	movs	r0, #174	; 0xae
 8000efc:	47a0      	blx	r4
 8000efe:	4603      	mov	r3, r0
  }
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	461a      	mov	r2, r3
 8000f14:	460b      	mov	r3, r1
 8000f16:	817b      	strh	r3, [r7, #10]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	61bb      	str	r3, [r7, #24]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 8000f20:	897b      	ldrh	r3, [r7, #10]
 8000f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d008      	beq.n	8000f3c <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	68dc      	ldr	r4, [r3, #12]
 8000f2e:	893b      	ldrh	r3, [r7, #8]
 8000f30:	8979      	ldrh	r1, [r7, #10]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	20a6      	movs	r0, #166	; 0xa6
 8000f36:	47a0      	blx	r4
 8000f38:	4603      	mov	r3, r0
 8000f3a:	e028      	b.n	8000f8e <WriteRegWrap+0x86>
  } else {
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	68dc      	ldr	r4, [r3, #12]
 8000f40:	893b      	ldrh	r3, [r7, #8]
 8000f42:	8979      	ldrh	r1, [r7, #10]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	20ae      	movs	r0, #174	; 0xae
 8000f48:	47a0      	blx	r4
 8000f4a:	61f8      	str	r0, [r7, #28]
  }

  if( ret == NFCTAG_OK )
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d11c      	bne.n	8000f8c <WriteRegWrap+0x84>
  {
    int32_t pollstatus;
    /* Poll until EEPROM is available */
    uint32_t tickstart = pObj->IO.GetTick();
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4798      	blx	r3
 8000f58:	6178      	str	r0, [r7, #20]
    /* Wait until ST25DV is ready or timeout occurs */
    do
    {
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	20ae      	movs	r0, #174	; 0xae
 8000f62:	4798      	blx	r3
 8000f64:	6138      	str	r0, [r7, #16]
    } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4798      	blx	r3
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f78:	d202      	bcs.n	8000f80 <WriteRegWrap+0x78>
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ec      	bne.n	8000f5a <WriteRegWrap+0x52>
    
    if( pollstatus != NFCTAG_OK )
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <WriteRegWrap+0x84>
    {
      ret = NFCTAG_TIMEOUT;
 8000f86:	f06f 0302 	mvn.w	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <ST25DV_ReadReg>:
#include "st25dv_reg.h"

int32_t ST25DV_ReadReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t* Data, uint16_t len)
{
 8000f96:	b590      	push	{r4, r7, lr}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	817b      	strh	r3, [r7, #10]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	685c      	ldr	r4, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6898      	ldr	r0, [r3, #8]
 8000fb2:	893b      	ldrh	r3, [r7, #8]
 8000fb4:	8979      	ldrh	r1, [r7, #10]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	47a0      	blx	r4
 8000fba:	4603      	mov	r3, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}

08000fc4 <ST25DV_WriteReg>:

int32_t ST25DV_WriteReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t const *Data, uint16_t len)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	817b      	strh	r3, [r7, #10]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681c      	ldr	r4, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6898      	ldr	r0, [r3, #8]
 8000fe0:	893b      	ldrh	r3, [r7, #8]
 8000fe2:	8979      	ldrh	r1, [r7, #10]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	47a0      	blx	r4
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}

08000ff2 <ST25DV_GetICREF>:


/**** Copy generated code hereafter ****/
int32_t ST25DV_GetICREF (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	2117      	movs	r1, #23
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffc7 	bl	8000f96 <ST25DV_ReadReg>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <ST25DV_GetICREF+0x22>
    return NFCTAG_ERROR;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e000      	b.n	8001016 <ST25DV_GetICREF+0x24>
  return NFCTAG_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <ST25DV_SetENDA1>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_SetENDA1 (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  return ST25DV_WriteReg(ctx, (ST25DV_ENDA1_REG), value, 1);
 8001028:	2301      	movs	r3, #1
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	2105      	movs	r1, #5
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffc8 	bl	8000fc4 <ST25DV_WriteReg>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ST25DV_SetENDA2>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_SetENDA2 (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  return ST25DV_WriteReg(ctx, (ST25DV_ENDA2_REG), value, 1);
 8001048:	2301      	movs	r3, #1
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	2107      	movs	r1, #7
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb8 	bl	8000fc4 <ST25DV_WriteReg>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <ST25DV_SetENDA3>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_SetENDA3 (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  return ST25DV_WriteReg(ctx, (ST25DV_ENDA3_REG), value, 1);
 8001068:	2301      	movs	r3, #1
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	2109      	movs	r1, #9
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa8 	bl	8000fc4 <ST25DV_WriteReg>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <ST25DV_GetMEM_SIZE_MSB>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMEM_SIZE_MSB (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_MEM_SIZE_MSB_REG), (uint8_t *)value, 1))
 8001088:	2301      	movs	r3, #1
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	2115      	movs	r1, #21
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff81 	bl	8000f96 <ST25DV_ReadReg>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <ST25DV_GetMEM_SIZE_MSB+0x22>
    return NFCTAG_ERROR;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e000      	b.n	80010a2 <ST25DV_GetMEM_SIZE_MSB+0x24>
  return NFCTAG_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <ST25DV_GetBLK_SIZE>:

int32_t ST25DV_GetBLK_SIZE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_BLK_SIZE_REG), (uint8_t *)value, 1))
 80010b4:	2301      	movs	r3, #1
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	2116      	movs	r1, #22
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff6b 	bl	8000f96 <ST25DV_ReadReg>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <ST25DV_GetBLK_SIZE+0x22>
    return NFCTAG_ERROR;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e000      	b.n	80010ce <ST25DV_GetBLK_SIZE+0x24>
  return NFCTAG_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <ST25DV_GetMEM_SIZE_LSB>:

int32_t ST25DV_GetMEM_SIZE_LSB (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_MEM_SIZE_LSB_REG), (uint8_t *)value, 1))
 80010e0:	2301      	movs	r3, #1
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	2114      	movs	r1, #20
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff55 	bl	8000f96 <ST25DV_ReadReg>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <ST25DV_GetMEM_SIZE_LSB+0x22>
    return NFCTAG_ERROR;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e000      	b.n	80010fa <ST25DV_GetMEM_SIZE_LSB+0x24>
  return NFCTAG_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <ST25DV_GetUID>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetUID (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_UID_REG), (uint8_t *)value, 8))
 800110c:	2308      	movs	r3, #8
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	2118      	movs	r1, #24
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff3f 	bl	8000f96 <ST25DV_ReadReg>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <ST25DV_GetUID+0x22>
    return NFCTAG_ERROR;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e000      	b.n	8001126 <ST25DV_GetUID+0x24>
  return NFCTAG_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <ST25DV_SetMB_CTRL_DYN_MBEN>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_MBEN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_CTRL_DYN_MBEN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 8001138:	f107 020f 	add.w	r2, r7, #15
 800113c:	2301      	movs	r3, #1
 800113e:	f242 0106 	movw	r1, #8198	; 0x2006
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff27 	bl	8000f96 <ST25DV_ReadReg>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <ST25DV_SetMB_CTRL_DYN_MBEN+0x26>
    return NFCTAG_ERROR;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e01d      	b.n	8001190 <ST25DV_SetMB_CTRL_DYN_MBEN+0x62>

  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800116a:	4313      	orrs	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 8001172:	f107 020f 	add.w	r2, r7, #15
 8001176:	2301      	movs	r3, #1
 8001178:	f242 0106 	movw	r1, #8198	; 0x2006
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff21 	bl	8000fc4 <ST25DV_WriteReg>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <ST25DV_SetMB_CTRL_DYN_MBEN+0x60>
    return NFCTAG_ERROR;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	e000      	b.n	8001190 <ST25DV_SetMB_CTRL_DYN_MBEN+0x62>
  return NFCTAG_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <ST25DV_GetGPO_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 80011a2:	2301      	movs	r3, #1
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fef4 	bl	8000f96 <ST25DV_ReadReg>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <ST25DV_GetGPO_ALL+0x22>
    return NFCTAG_ERROR;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e000      	b.n	80011bc <ST25DV_GetGPO_ALL+0x24>
  return NFCTAG_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <ST25DV_SetGPO_ALL>:

int32_t ST25DV_SetGPO_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 80011ce:	2301      	movs	r3, #1
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fef5 	bl	8000fc4 <ST25DV_WriteReg>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <ST25DV_SetGPO_ALL+0x22>
    return NFCTAG_ERROR;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	e000      	b.n	80011e8 <ST25DV_SetGPO_ALL+0x24>
  return NFCTAG_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <ST25DV_GetGPO_DYN_ENABLE>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_DYN_ENABLE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_DYN_REG), (uint8_t *)value, 1))
 80011fa:	2301      	movs	r3, #1
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fec7 	bl	8000f96 <ST25DV_ReadReg>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <ST25DV_GetGPO_DYN_ENABLE+0x24>
    return NFCTAG_ERROR;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e00d      	b.n	8001230 <ST25DV_GetGPO_DYN_ENABLE+0x40>
  *value &= (ST25DV_GPO_DYN_ENABLE_MASK);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800121c:	b2da      	uxtb	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	701a      	strb	r2, [r3, #0]
  *value = *value >> (ST25DV_GPO_DYN_ENABLE_SHIFT);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	09db      	lsrs	r3, r3, #7
 8001228:	b2da      	uxtb	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	701a      	strb	r2, [r3, #0]
  return NFCTAG_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <ST25DV_GetGPO_DYN_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_DYN_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_DYN_REG), (uint8_t *)value, 1))
 8001242:	2301      	movs	r3, #1
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fea3 	bl	8000f96 <ST25DV_ReadReg>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <ST25DV_GetGPO_DYN_ALL+0x24>
    return NFCTAG_ERROR;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e000      	b.n	800125e <ST25DV_GetGPO_DYN_ALL+0x26>
  return NFCTAG_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <ST25DV_SetRF_MNGT_DYN_RFDIS>:
  *value = *value >> (ST25DV_RF_MNGT_DYN_RFDIS_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRF_MNGT_DYN_RFDIS (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 8001270:	f107 020f 	add.w	r2, r7, #15
 8001274:	2301      	movs	r3, #1
 8001276:	f242 0103 	movw	r1, #8195	; 0x2003
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fe8b 	bl	8000f96 <ST25DV_ReadReg>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <ST25DV_SetRF_MNGT_DYN_RFDIS+0x26>
    return NFCTAG_ERROR;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e01d      	b.n	80012c8 <ST25DV_SetRF_MNGT_DYN_RFDIS+0x62>

  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_RFDIS_SHIFT)) & (ST25DV_RF_MNGT_DYN_RFDIS_MASK)) |
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_RF_MNGT_DYN_RFDIS_MASK));
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_RF_MNGT_DYN_RFDIS_SHIFT)) & (ST25DV_RF_MNGT_DYN_RFDIS_MASK)) |
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_RF_MNGT_DYN_REG), &reg_value, 1))
 80012aa:	f107 020f 	add.w	r2, r7, #15
 80012ae:	2301      	movs	r3, #1
 80012b0:	f242 0103 	movw	r1, #8195	; 0x2003
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe85 	bl	8000fc4 <ST25DV_WriteReg>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <ST25DV_SetRF_MNGT_DYN_RFDIS+0x60>
    return NFCTAG_ERROR;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e000      	b.n	80012c8 <ST25DV_SetRF_MNGT_DYN_RFDIS+0x62>
  return NFCTAG_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <ST25DV_SetRFA1SS_ALL>:
  *value = *value >> (ST25DV_RFA1SS_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRFA1SS_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RFA1SS_REG), &reg_value, 1))
 80012da:	f107 020f 	add.w	r2, r7, #15
 80012de:	2301      	movs	r3, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fe57 	bl	8000f96 <ST25DV_ReadReg>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <ST25DV_SetRFA1SS_ALL+0x24>
    return NFCTAG_ERROR;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e01c      	b.n	800132e <ST25DV_SetRFA1SS_ALL+0x5e>

  reg_value = ( (*value << (ST25DV_RFA1SS_ALL_SHIFT)) & (ST25DV_RFA1SS_ALL_MASK)) |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_RFA1SS_ALL_MASK));
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	f023 030f 	bic.w	r3, r3, #15
 8001308:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_RFA1SS_ALL_SHIFT)) & (ST25DV_RFA1SS_ALL_MASK)) |
 800130a:	4313      	orrs	r3, r2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_RFA1SS_REG), &reg_value, 1))
 8001312:	f107 020f 	add.w	r2, r7, #15
 8001316:	2301      	movs	r3, #1
 8001318:	2104      	movs	r1, #4
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe52 	bl	8000fc4 <ST25DV_WriteReg>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <ST25DV_SetRFA1SS_ALL+0x5c>
    return NFCTAG_ERROR;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e000      	b.n	800132e <ST25DV_SetRFA1SS_ALL+0x5e>
  return NFCTAG_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <ST25DV_SetRFA2SS_ALL>:
  *value = *value >> (ST25DV_RFA2SS_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRFA2SS_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RFA2SS_REG), &reg_value, 1))
 8001340:	f107 020f 	add.w	r2, r7, #15
 8001344:	2301      	movs	r3, #1
 8001346:	2106      	movs	r1, #6
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fe24 	bl	8000f96 <ST25DV_ReadReg>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <ST25DV_SetRFA2SS_ALL+0x24>
    return NFCTAG_ERROR;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e01c      	b.n	8001394 <ST25DV_SetRFA2SS_ALL+0x5e>

  reg_value = ( (*value << (ST25DV_RFA2SS_ALL_SHIFT)) & (ST25DV_RFA2SS_ALL_MASK)) |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_RFA2SS_ALL_MASK));
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	f023 030f 	bic.w	r3, r3, #15
 800136e:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_RFA2SS_ALL_SHIFT)) & (ST25DV_RFA2SS_ALL_MASK)) |
 8001370:	4313      	orrs	r3, r2
 8001372:	b25b      	sxtb	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_RFA2SS_REG), &reg_value, 1))
 8001378:	f107 020f 	add.w	r2, r7, #15
 800137c:	2301      	movs	r3, #1
 800137e:	2106      	movs	r1, #6
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fe1f 	bl	8000fc4 <ST25DV_WriteReg>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <ST25DV_SetRFA2SS_ALL+0x5c>
    return NFCTAG_ERROR;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	e000      	b.n	8001394 <ST25DV_SetRFA2SS_ALL+0x5e>
  return NFCTAG_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <ST25DV_SetRFA3SS_ALL>:
  *value = *value >> (ST25DV_RFA3SS_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRFA3SS_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RFA3SS_REG), &reg_value, 1))
 80013a6:	f107 020f 	add.w	r2, r7, #15
 80013aa:	2301      	movs	r3, #1
 80013ac:	2108      	movs	r1, #8
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fdf1 	bl	8000f96 <ST25DV_ReadReg>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <ST25DV_SetRFA3SS_ALL+0x24>
    return NFCTAG_ERROR;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e01c      	b.n	80013fa <ST25DV_SetRFA3SS_ALL+0x5e>

  reg_value = ( (*value << (ST25DV_RFA3SS_ALL_SHIFT)) & (ST25DV_RFA3SS_ALL_MASK)) |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_RFA3SS_ALL_MASK));
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	f023 030f 	bic.w	r3, r3, #15
 80013d4:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_RFA3SS_ALL_SHIFT)) & (ST25DV_RFA3SS_ALL_MASK)) |
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_RFA3SS_REG), &reg_value, 1))
 80013de:	f107 020f 	add.w	r2, r7, #15
 80013e2:	2301      	movs	r3, #1
 80013e4:	2108      	movs	r1, #8
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fdec 	bl	8000fc4 <ST25DV_WriteReg>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <ST25DV_SetRFA3SS_ALL+0x5c>
    return NFCTAG_ERROR;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e000      	b.n	80013fa <ST25DV_SetRFA3SS_ALL+0x5e>
  return NFCTAG_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ST25DV_SetRFA4SS_ALL>:
  *value = *value >> (ST25DV_RFA4SS_ALL_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetRFA4SS_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_RFA4SS_REG), &reg_value, 1))
 800140c:	f107 020f 	add.w	r2, r7, #15
 8001410:	2301      	movs	r3, #1
 8001412:	210a      	movs	r1, #10
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fdbe 	bl	8000f96 <ST25DV_ReadReg>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <ST25DV_SetRFA4SS_ALL+0x24>
    return NFCTAG_ERROR;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	e01c      	b.n	8001460 <ST25DV_SetRFA4SS_ALL+0x5e>

  reg_value = ( (*value << (ST25DV_RFA4SS_ALL_SHIFT)) & (ST25DV_RFA4SS_ALL_MASK)) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_RFA4SS_ALL_MASK));
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	b25b      	sxtb	r3, r3
 8001436:	f023 030f 	bic.w	r3, r3, #15
 800143a:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_RFA4SS_ALL_SHIFT)) & (ST25DV_RFA4SS_ALL_MASK)) |
 800143c:	4313      	orrs	r3, r2
 800143e:	b25b      	sxtb	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_RFA4SS_REG), &reg_value, 1))
 8001444:	f107 020f 	add.w	r2, r7, #15
 8001448:	2301      	movs	r3, #1
 800144a:	210a      	movs	r1, #10
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fdb9 	bl	8000fc4 <ST25DV_WriteReg>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <ST25DV_SetRFA4SS_ALL+0x5c>
    return NFCTAG_ERROR;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	e000      	b.n	8001460 <ST25DV_SetRFA4SS_ALL+0x5e>
  return NFCTAG_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <NFC04A1_LED_Init>:
  * @brief  through GPIO
  * @param  Led: LED to be initialized. 
  * @return Status
  */
int32_t NFC04A1_LED_Init( NFC04A1_Led_E led )
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

 
  /* Configure GPIO for LEDs (PB4,PB5,PA10)*/
  GPIO_InitStruct.Pin = NFC04A1_Led[led].NFC04A1_LED_PIN;
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <NFC04A1_LED_Init+0x40>)
 8001476:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, &GPIO_InitStruct );
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <NFC04A1_LED_Init+0x40>)
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f107 020c 	add.w	r2, r7, #12
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fbd5 	bl	8001c48 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000001c 	.word	0x2000001c

080014ac <NFC04A1_LED_On>:
  * @brief  This function light on selected Led
  * @param  led : Led to be lit on
  * @return Status
  */
int32_t NFC04A1_LED_On( NFC04A1_Led_E led )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, NFC04A1_Led[led].NFC04A1_LED_PIN, GPIO_PIN_SET );
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <NFC04A1_LED_On+0x30>)
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	6858      	ldr	r0, [r3, #4]
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4a06      	ldr	r2, [pc, #24]	; (80014dc <NFC04A1_LED_On+0x30>)
 80014c4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 fe38 	bl	8002140 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80014d0:	2300      	movs	r3, #0

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000001c 	.word	0x2000001c

080014e0 <NFC04A1_LED_Off>:
  * @brief  This function light off selected Led
  * @param  led : Led to be lit off
  * @return Status
  */
int32_t NFC04A1_LED_Off( NFC04A1_Led_E led )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, NFC04A1_Led[led].NFC04A1_LED_PIN, GPIO_PIN_RESET );
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <NFC04A1_LED_Off+0x30>)
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	6858      	ldr	r0, [r3, #4]
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <NFC04A1_LED_Off+0x30>)
 80014f8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	f000 fe1e 	bl	8002140 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001504:	2300      	movs	r3, #0

}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000001c 	.word	0x2000001c

08001514 <NFC04A1_GPO_Init>:
  * @brief  This function initialize the GPIO to manage the NFCTAG GPO pin
  * @param  None
  * @return Status
  */
int32_t NFC04A1_GPO_Init( void )
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Pin   = NFC04A1_GPO_PIN;
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <NFC04A1_GPO_Init+0x4c>)
 8001520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init( NFC04A1_GPO_PIN_PORT, &GPIO_InitStruct );
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <NFC04A1_GPO_Init+0x50>)
 8001530:	f000 fb8a 	bl	8001c48 <HAL_GPIO_Init>

  (void)HAL_EXTI_GetHandle(&hexti6, NFC04A1_NFCTAG_GPO_EXTI_LINE);  
 8001534:	2140      	movs	r1, #64	; 0x40
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <NFC04A1_GPO_Init+0x54>)
 8001538:	f000 fb57 	bl	8001bea <HAL_EXTI_GetHandle>
  (void)HAL_EXTI_RegisterCallback(&hexti6,  HAL_EXTI_COMMON_CB_ID, BSP_GPO_Callback);
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <NFC04A1_GPO_Init+0x58>)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <NFC04A1_GPO_Init+0x54>)
 8001542:	f000 fb38 	bl	8001bb6 <HAL_EXTI_RegisterCallback>
    

  /* Enable interruption */
  HAL_NVIC_SetPriority( NFC04A1_GPO_EXTI, NFC04A1_NFCTAG_GPO_PRIORITY, 0 );
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2017      	movs	r0, #23
 800154c:	f000 fadb 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ( NFC04A1_GPO_EXTI );
 8001550:	2017      	movs	r0, #23
 8001552:	f000 faf4 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  return BSP_ERROR_NONE;
 8001556:	2300      	movs	r3, #0

}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	10110000 	.word	0x10110000
 8001564:	40020000 	.word	0x40020000
 8001568:	20000034 	.word	0x20000034
 800156c:	080060a5 	.word	0x080060a5

08001570 <NFC04A1_GPO_ReadPin>:
  * @brief  This function get the GPO value through GPIO
  * @param  None
  * @retval GPIO pin status
  */
int32_t NFC04A1_GPO_ReadPin( void )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GPIO_ReadPin( NFC04A1_GPO_PIN_PORT, NFC04A1_GPO_PIN );
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <NFC04A1_GPO_ReadPin+0x14>)
 8001578:	f000 fdca 	bl	8002110 <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000

08001588 <NFC04A1_NFCTAG_Init>:
 * @{
 */


int32_t NFC04A1_NFCTAG_Init (uint32_t Instance)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  int32_t status;
  ST25DV_IO_t IO;
  UNUSED(Instance);

  /* Configure the component */
  IO.Init         = NFC04A1_I2C_Init;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <NFC04A1_NFCTAG_Init+0x80>)
 8001592:	60fb      	str	r3, [r7, #12]
  IO.DeInit       = NFC04A1_I2C_DeInit;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <NFC04A1_NFCTAG_Init+0x84>)
 8001596:	613b      	str	r3, [r7, #16]
  IO.IsReady      = NFC04A1_I2C_IsReady;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <NFC04A1_NFCTAG_Init+0x88>)
 800159a:	617b      	str	r3, [r7, #20]
  IO.Read         = NFC04A1_I2C_ReadReg16;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <NFC04A1_NFCTAG_Init+0x8c>)
 800159e:	61fb      	str	r3, [r7, #28]
  IO.Write        = (ST25DV_Write_Func)NFC04A1_I2C_WriteReg16;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <NFC04A1_NFCTAG_Init+0x90>)
 80015a2:	61bb      	str	r3, [r7, #24]
  IO.GetTick      = NFC04A1_GetTick;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <NFC04A1_NFCTAG_Init+0x94>)
 80015a6:	623b      	str	r3, [r7, #32]

  status = ST25DV_RegisterBusIO (&NfcTagObj, &IO);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <NFC04A1_NFCTAG_Init+0x98>)
 80015b0:	f7fe fffe 	bl	80005b0 <ST25DV_RegisterBusIO>
 80015b4:	6278      	str	r0, [r7, #36]	; 0x24
  if(status != NFCTAG_OK)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <NFC04A1_NFCTAG_Init+0x3a>
    return NFCTAG_ERROR;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e01d      	b.n	80015fe <NFC04A1_NFCTAG_Init+0x76>

  Nfctag_Drv = (NFCTAG_DrvTypeDef *)(void *)&St25Dv_Drv;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <NFC04A1_NFCTAG_Init+0x9c>)
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <NFC04A1_NFCTAG_Init+0xa0>)
 80015c6:	601a      	str	r2, [r3, #0]
  if(Nfctag_Drv->Init != NULL)
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <NFC04A1_NFCTAG_Init+0x9c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00e      	beq.n	80015f0 <NFC04A1_NFCTAG_Init+0x68>
  {
    status = Nfctag_Drv->Init(&NfcTagObj);
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <NFC04A1_NFCTAG_Init+0x9c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <NFC04A1_NFCTAG_Init+0x98>)
 80015da:	4798      	blx	r3
 80015dc:	6278      	str	r0, [r7, #36]	; 0x24
    if(status != NFCTAG_OK)
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <NFC04A1_NFCTAG_Init+0x74>
    {
      Nfctag_Drv = NULL;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <NFC04A1_NFCTAG_Init+0x9c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
      return NFCTAG_ERROR;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e006      	b.n	80015fe <NFC04A1_NFCTAG_Init+0x76>
    }
  } else {
    Nfctag_Drv = NULL;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <NFC04A1_NFCTAG_Init+0x9c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
    return NFCTAG_ERROR;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e000      	b.n	80015fe <NFC04A1_NFCTAG_Init+0x76>
  }
  return NFCTAG_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08006335 	.word	0x08006335
 800160c:	080063b1 	.word	0x080063b1
 8001610:	08006401 	.word	0x08006401
 8001614:	0800649d 	.word	0x0800649d
 8001618:	08006439 	.word	0x08006439
 800161c:	080018f5 	.word	0x080018f5
 8001620:	200000e0 	.word	0x200000e0
 8001624:	200000dc 	.word	0x200000dc
 8001628:	20000000 	.word	0x20000000

0800162c <NFC04A1_NFCTAG_ReadData>:
  * @param  TarAddr : I2C data memory address to read
  * @param  Size : Size in bytes of the value to be read
  * @retval NFCTAG enum status
  */
int32_t NFC04A1_NFCTAG_ReadData( uint32_t Instance, uint8_t * const pData, const uint16_t TarAddr, const uint16_t Size )
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	4613      	mov	r3, r2
 8001640:	80bb      	strh	r3, [r7, #4]
  UNUSED(Instance);
  if ( Nfctag_Drv->ReadData == NULL )
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <NFC04A1_NFCTAG_ReadData+0x40>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <NFC04A1_NFCTAG_ReadData+0x26>
  {
    return NFCTAG_ERROR;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	e008      	b.n	8001664 <NFC04A1_NFCTAG_ReadData+0x38>
  }
  
  return Nfctag_Drv->ReadData(&NfcTagObj, pData, TarAddr, Size );
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <NFC04A1_NFCTAG_ReadData+0x40>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695c      	ldr	r4, [r3, #20]
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <NFC04A1_NFCTAG_ReadData+0x44>)
 8001660:	47a0      	blx	r4
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	200000dc 	.word	0x200000dc
 8001670:	200000e0 	.word	0x200000e0

08001674 <NFC04A1_NFCTAG_WriteData>:
  * @param  TarAddr : I2C data memory address to write
  * @param  Size : Size in bytes of the value to be written
  * @retval NFCTAG enum status
  */
int32_t NFC04A1_NFCTAG_WriteData( uint32_t Instance, const uint8_t * const pData, const uint16_t TarAddr, const uint16_t Size )
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	460b      	mov	r3, r1
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	4613      	mov	r3, r2
 8001688:	80bb      	strh	r3, [r7, #4]
  UNUSED(Instance);
  if ( Nfctag_Drv->WriteData == NULL )
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <NFC04A1_NFCTAG_WriteData+0x40>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <NFC04A1_NFCTAG_WriteData+0x26>
  {
    return NFCTAG_ERROR;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	e008      	b.n	80016ac <NFC04A1_NFCTAG_WriteData+0x38>
  }
  
  return Nfctag_Drv->WriteData(&NfcTagObj, pData, TarAddr, Size );
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <NFC04A1_NFCTAG_WriteData+0x40>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699c      	ldr	r4, [r3, #24]
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <NFC04A1_NFCTAG_WriteData+0x44>)
 80016a8:	47a0      	blx	r4
 80016aa:	4603      	mov	r3, r0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	200000dc 	.word	0x200000dc
 80016b8:	200000e0 	.word	0x200000e0

080016bc <NFC04A1_NFCTAG_GetByteSize>:
/**
  * @brief  Return the size of the nfctag
  * @retval Size of the NFCtag in Bytes
  */
uint32_t NFC04A1_NFCTAG_GetByteSize( uint32_t Instance )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  ST25DV_MEM_SIZE mem_size;
  ST25DV_ReadMemSize(&NfcTagObj, &mem_size );
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <NFC04A1_NFCTAG_GetByteSize+0x28>)
 80016cc:	f7ff fb4d 	bl	8000d6a <ST25DV_ReadMemSize>
  
  return (mem_size.BlockSize+1) * (mem_size.Mem_Size+1);
 80016d0:	7b3b      	ldrb	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	89fa      	ldrh	r2, [r7, #14]
 80016d6:	3201      	adds	r2, #1
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000e0 	.word	0x200000e0

080016e8 <NFC04A1_NFCTAG_ReadUID>:
  * @brief  Reads the ST25DV UID.
  * @param  pUid Pointer used to return the ST25DV UID value.
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_ReadUID( uint32_t Instance, ST25DV_UID * const pUid )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  return ST25DV_ReadUID(&NfcTagObj, pUid);
 80016f2:	6839      	ldr	r1, [r7, #0]
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <NFC04A1_NFCTAG_ReadUID+0x1c>)
 80016f6:	f7ff f8e4 	bl	80008c2 <ST25DV_ReadUID>
 80016fa:	4603      	mov	r3, r0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200000e0 	.word	0x200000e0

08001708 <NFC04A1_NFCTAG_PresentI2CPassword>:
  * @brief  Presents I2C password, to authorize the I2C writes to protected areas.
  * @param  PassWord Password value on 32bits
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_PresentI2CPassword(uint32_t Instance, const ST25DV_PASSWD PassWord )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	e883 0006 	stmia.w	r3, {r1, r2}
  UNUSED(Instance);
  return ST25DV_PresentI2CPassword(&NfcTagObj, PassWord);
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	e893 0006 	ldmia.w	r3, {r1, r2}
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <NFC04A1_NFCTAG_PresentI2CPassword+0x24>)
 800171e:	f7ff f91c 	bl	800095a <ST25DV_PresentI2CPassword>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000e0 	.word	0x200000e0

08001730 <NFC04A1_NFCTAG_WriteRFZxSS>:
  * @param  Zone        ST25DV_PROTECTION_ZONE value corresponding to the area on which to set the RF protection.
  * @param  RfProtZone  Pointer on a ST25DV_RF_PROT_ZONE value defininf the protection to be set on the area.
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_WriteRFZxSS(uint32_t Instance, const ST25DV_PROTECTION_ZONE Zone,  const ST25DV_RF_PROT_ZONE RfProtZone )
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	460b      	mov	r3, r1
 800173a:	80ba      	strh	r2, [r7, #4]
 800173c:	72fb      	strb	r3, [r7, #11]
  UNUSED(Instance);
  return ST25DV_WriteRFZxSS(&NfcTagObj, Zone, RfProtZone);
 800173e:	7afb      	ldrb	r3, [r7, #11]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4619      	mov	r1, r3
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <NFC04A1_NFCTAG_WriteRFZxSS+0x24>)
 8001746:	f7ff f971 	bl	8000a2c <ST25DV_WriteRFZxSS>
 800174a:	4603      	mov	r3, r0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000e0 	.word	0x200000e0

08001758 <NFC04A1_NFCTAG_CreateUserZone>:
  * @param  Zone3Length Length of area3 in bytes (0 to 8064, 0x00 to 0x1F80)
  * @param  Zone4Length Length of area4 in bytes (0 to 8000, 0x00 to 0x1F40)
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_CreateUserZone(uint32_t Instance, uint16_t Zone1Length,  uint16_t Zone2Length,  uint16_t Zone3Length,  uint16_t Zone4Length )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	817b      	strh	r3, [r7, #10]
 800176a:	460b      	mov	r3, r1
 800176c:	813b      	strh	r3, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]
  UNUSED(Instance);
  return ST25DV_CreateUserZone(&NfcTagObj, Zone1Length, Zone2Length, Zone3Length, Zone4Length);
 8001772:	88f8      	ldrh	r0, [r7, #6]
 8001774:	893a      	ldrh	r2, [r7, #8]
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	8b3b      	ldrh	r3, [r7, #24]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4603      	mov	r3, r0
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <NFC04A1_NFCTAG_CreateUserZone+0x38>)
 8001780:	f7ff fa2f 	bl	8000be2 <ST25DV_CreateUserZone>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000e0 	.word	0x200000e0

08001794 <NFC04A1_NFCTAG_ReadGPO_Dyn>:
  * @brief  Read value of dynamic GPO register configuration.
  * @param  pGPO ST25DV_GPO pointer of the dynamic GPO configuration to store.
  * @retval NFCTAG enum status.
  */
int32_t NFC04A1_NFCTAG_ReadGPO_Dyn(uint32_t Instance, uint8_t *GPOConfig )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  return ST25DV_ReadGPO_Dyn(&NfcTagObj, GPOConfig);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <NFC04A1_NFCTAG_ReadGPO_Dyn+0x1c>)
 80017a2:	f7ff fb20 	bl	8000de6 <ST25DV_ReadGPO_Dyn>
 80017a6:	4603      	mov	r3, r0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000e0 	.word	0x200000e0

080017b4 <NFC04A1_NFCTAG_GetGPO_en_Dyn>:
  * @brief  Get dynamique GPO enable status
  * @param  pGPO_en ST25DV_EN_STATUS pointer of the GPO enable status to store
  * @retval NFCTAG enum status
  */
int32_t NFC04A1_NFCTAG_GetGPO_en_Dyn(uint32_t Instance, ST25DV_EN_STATUS * const pGPO_en )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  return ST25DV_GetGPO_en_Dyn(&NfcTagObj, pGPO_en);
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <NFC04A1_NFCTAG_GetGPO_en_Dyn+0x1c>)
 80017c2:	f7ff fb20 	bl	8000e06 <ST25DV_GetGPO_en_Dyn>
 80017c6:	4603      	mov	r3, r0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200000e0 	.word	0x200000e0

080017d4 <NFC04A1_NFCTAG_SetRFDisable_Dyn>:
/**
  * @brief  Sets the RF Disable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_SetRFDisable_Dyn(uint32_t Instance)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  return ST25DV_SetRFDisable_Dyn(&NfcTagObj);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <NFC04A1_NFCTAG_SetRFDisable_Dyn+0x18>)
 80017de:	f7ff fb34 	bl	8000e4a <ST25DV_SetRFDisable_Dyn>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200000e0 	.word	0x200000e0

080017f0 <NFC04A1_NFCTAG_ResetRFDisable_Dyn>:
/**
  * @brief  Unsets the RF Disable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_ResetRFDisable_Dyn(uint32_t Instance)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  return ST25DV_ResetRFDisable_Dyn(&NfcTagObj);
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <NFC04A1_NFCTAG_ResetRFDisable_Dyn+0x18>)
 80017fa:	f7ff fb39 	bl	8000e70 <ST25DV_ResetRFDisable_Dyn>
 80017fe:	4603      	mov	r3, r0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200000e0 	.word	0x200000e0

0800180c <NFC04A1_NFCTAG_ResetMBEN_Dyn>:
/**
  * @brief  Unsets the Mailbox Enable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_ResetMBEN_Dyn(uint32_t Instance)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);
  return ST25DV_ResetMBEN_Dyn(&NfcTagObj);
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <NFC04A1_NFCTAG_ResetMBEN_Dyn+0x18>)
 8001816:	f7ff fb3e 	bl	8000e96 <ST25DV_ResetMBEN_Dyn>
 800181a:	4603      	mov	r3, r0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200000e0 	.word	0x200000e0

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_Init+0x40>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_Init+0x40>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_Init+0x40>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f94d 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f000 f808 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f004 fcf8 	bl	8006250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x54>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x58>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f965 	bl	8001b5a <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00e      	b.n	80018b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d80a      	bhi.n	80018b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 f92d 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_InitTick+0x5c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000058 	.word	0x20000058
 80018c4:	20000044 	.word	0x20000044
 80018c8:	20000040 	.word	0x20000040

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000044 	.word	0x20000044
 80018f0:	2000013c 	.word	0x2000013c

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000013c 	.word	0x2000013c

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_Delay+0x40>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000044 	.word	0x20000044

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d004      	beq.n	8001b90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e00c      	b.n	8001baa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2205      	movs	r2, #5
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b087      	sub	sp, #28
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	605a      	str	r2, [r3, #4]
      break;
 8001bd4:	e002      	b.n	8001bdc <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8001bda:	bf00      	nop
  }

  return status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e003      	b.n	8001c06 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if (EXTI->PR != 0x00u)
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_EXTI_IRQHandler+0x30>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    EXTI->PR = hexti->Line;
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_EXTI_IRQHandler+0x30>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->RisingCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->RisingCallback();
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4798      	blx	r3
    }
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e159      	b.n	8001f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8148 	bne.w	8001f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x4a>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d123      	bne.n	8001cda <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0203 	and.w	r2, r3, #3
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d00b      	beq.n	8001d2e <HAL_GPIO_Init+0xe6>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d007      	beq.n	8001d2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d22:	2b11      	cmp	r3, #17
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d130      	bne.n	8001d90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 0201 	and.w	r2, r3, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a2 	beq.w	8001f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x202>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1fe>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2f4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x2f8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1f6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_GPIO_Init+0x2fc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1f2>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4934      	ldr	r1, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8e:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f aea2 	bls.w	8001c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3724      	adds	r7, #36	; 0x24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e0bb      	b.n	80020e0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	f040 80ab 	bne.w	80020da <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f84:	4a5b      	ldr	r2, [pc, #364]	; (80020f4 <HAL_GPIO_DeInit+0x1a8>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_GPIO_DeInit+0x1ac>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_DeInit+0x96>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_GPIO_DeInit+0x1b0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_DeInit+0x92>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_GPIO_DeInit+0x1b4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_DeInit+0x8e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <HAL_GPIO_DeInit+0x1b8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_DeInit+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_GPIO_DeInit+0x1bc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_DeInit+0x86>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e008      	b.n	8001fe4 <HAL_GPIO_DeInit+0x98>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_DeInit+0x98>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_DeInit+0x98>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_DeInit+0x98>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_DeInit+0x98>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d132      	bne.n	800205a <HAL_GPIO_DeInit+0x10e>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002004:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <HAL_GPIO_DeInit+0x1a8>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	43da      	mvns	r2, r3
 8002014:	4837      	ldr	r0, [pc, #220]	; (80020f4 <HAL_GPIO_DeInit+0x1a8>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	400a      	ands	r2, r1
 800201c:	3302      	adds	r3, #2
 800201e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	4938      	ldr	r1, [pc, #224]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 800202c:	4013      	ands	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43db      	mvns	r3, r3
 8002038:	4934      	ldr	r1, [pc, #208]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 800203a:	4013      	ands	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	4931      	ldr	r1, [pc, #196]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 8002048:	4013      	ands	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43db      	mvns	r3, r3
 8002054:	492d      	ldr	r1, [pc, #180]	; (800210c <HAL_GPIO_DeInit+0x1c0>)
 8002056:	4013      	ands	r3, r2
 8002058:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2103      	movs	r1, #3
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	08d2      	lsrs	r2, r2, #3
 8002090:	4019      	ands	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3208      	adds	r2, #8
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2103      	movs	r1, #3
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	2101      	movs	r1, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2103      	movs	r1, #3
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	401a      	ands	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f af40 	bls.w	8001f68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020400 	.word	0x40020400
 8002100:	40020800 	.word	0x40020800
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40021000 	.word	0x40021000
 800210c:	40013c00 	.word	0x40013c00

08002110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e001      	b.n	8002132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800215c:	e003      	b.n	8002166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f806 	bl	80021a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e10f      	b.n	80023ee <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f941 	bl	800246a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002200:	f001 fd20 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8002204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a7b      	ldr	r2, [pc, #492]	; (80023f8 <HAL_I2C_Init+0x23c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d807      	bhi.n	8002220 <HAL_I2C_Init+0x64>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_I2C_Init+0x240>)
 8002214:	4293      	cmp	r3, r2
 8002216:	bf94      	ite	ls
 8002218:	2301      	movls	r3, #1
 800221a:	2300      	movhi	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e006      	b.n	800222e <HAL_I2C_Init+0x72>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a77      	ldr	r2, [pc, #476]	; (8002400 <HAL_I2C_Init+0x244>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0db      	b.n	80023ee <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a72      	ldr	r2, [pc, #456]	; (8002404 <HAL_I2C_Init+0x248>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9b      	lsrs	r3, r3, #18
 8002240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a64      	ldr	r2, [pc, #400]	; (80023f8 <HAL_I2C_Init+0x23c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d802      	bhi.n	8002270 <HAL_I2C_Init+0xb4>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3301      	adds	r3, #1
 800226e:	e009      	b.n	8002284 <HAL_I2C_Init+0xc8>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	4a63      	ldr	r2, [pc, #396]	; (8002408 <HAL_I2C_Init+0x24c>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	3301      	adds	r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4956      	ldr	r1, [pc, #344]	; (80023f8 <HAL_I2C_Init+0x23c>)
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d80d      	bhi.n	80022c0 <HAL_I2C_Init+0x104>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e59      	subs	r1, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	bf38      	it	cc
 80022bc:	2304      	movcc	r3, #4
 80022be:	e04f      	b.n	8002360 <HAL_I2C_Init+0x1a4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_I2C_Init+0x130>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e012      	b.n	8002312 <HAL_I2C_Init+0x156>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Init+0x15e>
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_I2C_Init+0x1a4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_I2C_Init+0x184>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e58      	subs	r0, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	fbb0 f3f3 	udiv	r3, r0, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233e:	e00f      	b.n	8002360 <HAL_I2C_Init+0x1a4>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	6809      	ldr	r1, [r1, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6911      	ldr	r1, [r2, #16]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	001e847f 	.word	0x001e847f
 8002400:	003d08ff 	.word	0x003d08ff
 8002404:	431bde83 	.word	0x431bde83
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e021      	b.n	8002462 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2224      	movs	r2, #36	; 0x24
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f821 	bl	800247e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ae:	f7ff fa21 	bl	80018f4 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	f040 80d9 	bne.w	8002674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2319      	movs	r3, #25
 80024c8:	2201      	movs	r2, #1
 80024ca:	496d      	ldr	r1, [pc, #436]	; (8002680 <HAL_I2C_Mem_Write+0x1ec>)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fd97 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Write+0x56>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0c5      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d007      	beq.n	8002510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	; 0x21
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_I2C_Mem_Write+0x1f0>)
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	88f8      	ldrh	r0, [r7, #6]
 8002554:	893a      	ldrh	r2, [r7, #8]
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4603      	mov	r3, r0
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fbf2 	bl	8002d4c <I2C_RequestMemoryWrite>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d052      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e081      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fe18 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Mem_Write+0x180>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1aa      	bne.n	8002572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fe04 	bl	800322e <I2C_WaitOnBTFFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e016      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7ff f927 	bl	80018f4 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 8208 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2319      	movs	r3, #25
 80026bc:	2201      	movs	r2, #1
 80026be:	497b      	ldr	r1, [pc, #492]	; (80028ac <HAL_I2C_Mem_Read+0x224>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fc9d 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	e1fb      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x56>
 80026da:	2302      	movs	r3, #2
 80026dc:	e1f4      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d007      	beq.n	8002704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2222      	movs	r2, #34	; 0x22
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_I2C_Mem_Read+0x228>)
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002746:	88f8      	ldrh	r0, [r7, #6]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fb82 	bl	8002e60 <I2C_RequestMemoryRead>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1b0      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e184      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11b      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e164      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d11b      	bne.n	8002816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	e144      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800282c:	e138      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	f200 80f1 	bhi.w	8002a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d123      	bne.n	8002888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fd33 	bl	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e139      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002886:	e10b      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d14e      	bne.n	800292e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	2200      	movs	r2, #0
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fbb0 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e10e      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292c:	e0b8      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	4966      	ldr	r1, [pc, #408]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fb61 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0bf      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2200      	movs	r2, #0
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fb33 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e091      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a18:	e042      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fc46 	bl	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e04c      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d118      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f aec2 	bne.w	800282e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	00010004 	.word	0x00010004

08002ad4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7fe ff06 	bl	80018f4 <HAL_GetTick>
 8002ae8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 8105 	bne.w	8002d06 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	4982      	ldr	r1, [pc, #520]	; (8002d10 <HAL_I2C_IsDeviceReady+0x23c>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa7a 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0f8      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2C_IsDeviceReady+0x50>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0f1      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2224      	movs	r2, #36	; 0x24
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a6a      	ldr	r2, [pc, #424]	; (8002d14 <HAL_I2C_IsDeviceReady+0x240>)
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fa38 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0b6      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fea3 	bl	80018f4 <HAL_GetTick>
 8002bae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bde:	e025      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7fe fe88 	bl	80018f4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <HAL_I2C_IsDeviceReady+0x122>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22a0      	movs	r2, #160	; 0xa0
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2ba0      	cmp	r3, #160	; 0xa0
 8002c36:	d005      	beq.n	8002c44 <HAL_I2C_IsDeviceReady+0x170>
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_I2C_IsDeviceReady+0x170>
 8002c3e:	7dbb      	ldrb	r3, [r7, #22]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0cd      	beq.n	8002be0 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d129      	bne.n	8002cae <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2319      	movs	r3, #25
 8002c86:	2201      	movs	r2, #1
 8002c88:	4921      	ldr	r1, [pc, #132]	; (8002d10 <HAL_I2C_IsDeviceReady+0x23c>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9b8 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e036      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e02c      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	490f      	ldr	r1, [pc, #60]	; (8002d10 <HAL_I2C_IsDeviceReady+0x23c>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f994 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e012      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f4ff af3e 	bcc.w	8002b6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00100002 	.word	0x00100002
 8002d14:	ffff0000 	.word	0xffff0000

08002d18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d26:	b2db      	uxtb	r3, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f93c 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e05f      	b.n	8002e52 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	492d      	ldr	r1, [pc, #180]	; (8002e5c <I2C_RequestMemoryWrite+0x110>)
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f980 	bl	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e04c      	b.n	8002e52 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f9ea 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e02b      	b.n	8002e52 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]
 8002e0a:	e021      	b.n	8002e50 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	6a39      	ldr	r1, [r7, #32]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f9c4 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d107      	bne.n	8002e42 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e005      	b.n	8002e52 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e46:	893b      	ldrh	r3, [r7, #8]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	00010002 	.word	0x00010002

08002e60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f8aa 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e09e      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	494c      	ldr	r1, [pc, #304]	; (8002ffc <I2C_RequestMemoryRead+0x19c>)
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f8ee 	bl	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e08b      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	6a39      	ldr	r1, [r7, #32]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f958 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d107      	bne.n	8002f1a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06a      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]
 8002f2e:	e021      	b.n	8002f74 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f932 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d107      	bne.n	8002f66 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e044      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f6a:	893b      	ldrh	r3, [r7, #8]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f917 	bl	80031ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e029      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f81f 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e013      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	4906      	ldr	r1, [pc, #24]	; (8002ffc <I2C_RequestMemoryRead+0x19c>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f863 	bl	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003010:	e025      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d021      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe fc6b 	bl	80018f4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d116      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e023      	b.n	80030a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10d      	bne.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	e00c      	b.n	800309e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d0b6      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030bc:	e051      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d123      	bne.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e046      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d021      	beq.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fbe9 	bl	80018f4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e020      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10c      	bne.n	8003186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e00b      	b.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	43da      	mvns	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d18d      	bne.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b8:	e02d      	b.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f8ce 	bl	800335c <I2C_IsAcknowledgeFailed>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e02d      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d021      	beq.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe fb8f 	bl	80018f4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d1ca      	bne.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800323a:	e02d      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f88d 	bl	800335c <I2C_IsAcknowledgeFailed>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e02d      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d021      	beq.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe fb4e 	bl	80018f4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d1ca      	bne.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032bc:	e042      	b.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d119      	bne.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0210 	mvn.w	r2, #16
 80032d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e029      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003300:	f7fe faf8 	bl	80018f4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d1b5      	bne.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d11b      	bne.n	80033ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d129      	bne.n	8003424 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e22d      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d075      	beq.n	800353e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003452:	4ba3      	ldr	r3, [pc, #652]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d00c      	beq.n	8003478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4ba0      	ldr	r3, [pc, #640]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003466:	2b08      	cmp	r3, #8
 8003468:	d112      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b9d      	ldr	r3, [pc, #628]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b99      	ldr	r3, [pc, #612]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x108>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e208      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x74>
 800349a:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x98>
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034cc:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a83      	ldr	r2, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fa02 	bl	80018f4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fe f9fe 	bl	80018f4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1cd      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe f9ee 	bl	80018f4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe f9ea 	bl	80018f4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1b9      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0xe8>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11c      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e18d      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4952      	ldr	r1, [pc, #328]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e03a      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <HAL_RCC_OscConfig+0x2b0>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fe f9a3 	bl	80018f4 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fe f99f 	bl	80018f4 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e16e      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4940      	ldr	r1, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_OscConfig+0x2b0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe f982 	bl	80018f4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f4:	f7fe f97e 	bl	80018f4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e14d      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d030      	beq.n	8003680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_OscConfig+0x2b4>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe f962 	bl	80018f4 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003634:	f7fe f95e 	bl	80018f4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e12d      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x200>
 8003652:	e015      	b.n	8003680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x2b4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fe f94b 	bl	80018f4 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003662:	f7fe f947 	bl	80018f4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e116      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80a0 	beq.w	80037ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d121      	bne.n	800370e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fe f90d 	bl	80018f4 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e011      	b.n	8003702 <HAL_RCC_OscConfig+0x2ce>
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	42470000 	.word	0x42470000
 80036e8:	42470e80 	.word	0x42470e80
 80036ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fe f900 	bl	80018f4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0cf      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x478>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x2f0>
 8003716:	4b66      	ldr	r3, [pc, #408]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x32a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x312>
 800372c:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a5f      	ldr	r2, [pc, #380]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x32a>
 8003746:	4b5a      	ldr	r3, [pc, #360]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a59      	ldr	r2, [pc, #356]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b57      	ldr	r3, [pc, #348]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a56      	ldr	r2, [pc, #344]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fe f8c5 	bl	80018f4 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe f8c1 	bl	80018f4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e08e      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x33a>
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fe f8af 	bl	80018f4 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe f8ab 	bl	80018f4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e078      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a3a      	ldr	r2, [pc, #232]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d064      	beq.n	80038a0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d6:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d05c      	beq.n	800389c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d141      	bne.n	800386e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <HAL_RCC_OscConfig+0x480>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe f880 	bl	80018f4 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe f87c 	bl	80018f4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e04b      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	491d      	ldr	r1, [pc, #116]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <HAL_RCC_OscConfig+0x480>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fe f855 	bl	80018f4 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe f851 	bl	80018f4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e020      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x41a>
 800386c:	e018      	b.n	80038a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_OscConfig+0x480>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe f83e 	bl	80018f4 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387c:	f7fe f83a 	bl	80018f4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e009      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_RCC_OscConfig+0x47c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x448>
 800389a:	e001      	b.n	80038a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000
 80038b0:	40023800 	.word	0x40023800
 80038b4:	42470060 	.word	0x42470060

080038b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0ca      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b67      	ldr	r3, [pc, #412]	; (8003a6c <HAL_RCC_ClockConfig+0x1b4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d90c      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b64      	ldr	r3, [pc, #400]	; (8003a6c <HAL_RCC_ClockConfig+0x1b4>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <HAL_RCC_ClockConfig+0x1b4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b6      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800390c:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003924:	4b52      	ldr	r3, [pc, #328]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a51      	ldr	r2, [pc, #324]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800392e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	494c      	ldr	r1, [pc, #304]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d044      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d119      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07d      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d003      	beq.n	8003976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	2b03      	cmp	r3, #3
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e06d      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e065      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4933      	ldr	r1, [pc, #204]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fd ffa4 	bl	80018f4 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fd ffa0 	bl	80018f4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e04d      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_ClockConfig+0x1b4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d20c      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_RCC_ClockConfig+0x1b4>)
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_RCC_ClockConfig+0x1b4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e030      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4915      	ldr	r1, [pc, #84]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	490d      	ldr	r1, [pc, #52]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a3e:	f000 f81d 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003a42:	4601      	mov	r1, r0
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	fa21 f303 	lsr.w	r3, r1, r3
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd ff06 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023c00 	.word	0x40023c00
 8003a70:	40023800 	.word	0x40023800
 8003a74:	08008090 	.word	0x08008090
 8003a78:	20000058 	.word	0x20000058

08003a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d007      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x32>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d008      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x38>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 80b4 	bne.w	8003c10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003aaa:	60bb      	str	r3, [r7, #8]
       break;
 8003aac:	e0b3      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aae:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ab0:	60bb      	str	r3, [r7, #8]
      break;
 8003ab2:	e0b0      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab4:	4b5a      	ldr	r3, [pc, #360]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abe:	4b58      	ldr	r3, [pc, #352]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04a      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b55      	ldr	r3, [pc, #340]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	ea03 0501 	and.w	r5, r3, r1
 8003ae0:	ea04 0602 	and.w	r6, r4, r2
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f04f 0400 	mov.w	r4, #0
 8003af0:	0154      	lsls	r4, r2, #5
 8003af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003af6:	014b      	lsls	r3, r1, #5
 8003af8:	4619      	mov	r1, r3
 8003afa:	4622      	mov	r2, r4
 8003afc:	1b49      	subs	r1, r1, r5
 8003afe:	eb62 0206 	sbc.w	r2, r2, r6
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	0194      	lsls	r4, r2, #6
 8003b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b10:	018b      	lsls	r3, r1, #6
 8003b12:	1a5b      	subs	r3, r3, r1
 8003b14:	eb64 0402 	sbc.w	r4, r4, r2
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	00e2      	lsls	r2, r4, #3
 8003b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b26:	00d9      	lsls	r1, r3, #3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	195b      	adds	r3, r3, r5
 8003b2e:	eb44 0406 	adc.w	r4, r4, r6
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	0262      	lsls	r2, r4, #9
 8003b3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b40:	0259      	lsls	r1, r3, #9
 8003b42:	460b      	mov	r3, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fc fbac 	bl	80002b0 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e049      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b60:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	ea03 0501 	and.w	r5, r3, r1
 8003b76:	ea04 0602 	and.w	r6, r4, r2
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	f04f 0400 	mov.w	r4, #0
 8003b86:	0154      	lsls	r4, r2, #5
 8003b88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b8c:	014b      	lsls	r3, r1, #5
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4622      	mov	r2, r4
 8003b92:	1b49      	subs	r1, r1, r5
 8003b94:	eb62 0206 	sbc.w	r2, r2, r6
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f04f 0400 	mov.w	r4, #0
 8003ba0:	0194      	lsls	r4, r2, #6
 8003ba2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ba6:	018b      	lsls	r3, r1, #6
 8003ba8:	1a5b      	subs	r3, r3, r1
 8003baa:	eb64 0402 	sbc.w	r4, r4, r2
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bbc:	00d9      	lsls	r1, r3, #3
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	195b      	adds	r3, r3, r5
 8003bc4:	eb44 0406 	adc.w	r4, r4, r6
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	02a2      	lsls	r2, r4, #10
 8003bd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bd6:	0299      	lsls	r1, r3, #10
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4614      	mov	r4, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	4621      	mov	r1, r4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f04f 0400 	mov.w	r4, #0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4623      	mov	r3, r4
 8003bea:	f7fc fb61 	bl	80002b0 <__aeabi_uldivmod>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c12:	60bb      	str	r3, [r7, #8]
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	68bb      	ldr	r3, [r7, #8]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000058 	.word	0x20000058

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	080080a0 	.word	0x080080a0

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffdc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c74:	4601      	mov	r1, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0b5b      	lsrs	r3, r3, #13
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	080080a0 	.word	0x080080a0

08003c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f002 fdae 	bl	800681c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fb93 	bl	8004404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b088      	sub	sp, #32
 8003d32:	af02      	add	r7, sp, #8
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	f040 8083 	bne.w	8003e56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Transmit+0x2e>
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e07b      	b.n	8003e58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Transmit+0x40>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e074      	b.n	8003e58 <HAL_UART_Transmit+0x12a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d84:	f7fd fdb6 	bl	80018f4 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d96:	e042      	b.n	8003e1e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	d122      	bne.n	8003df6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9b6 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e046      	b.n	8003e58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ddc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	3302      	adds	r3, #2
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	e017      	b.n	8003e1e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	e013      	b.n	8003e1e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f993 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e023      	b.n	8003e58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	60ba      	str	r2, [r7, #8]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1b7      	bne.n	8003d98 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2140      	movs	r1, #64	; 0x40
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f97a 	bl	800412c <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e00a      	b.n	8003e58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d140      	bne.n	8003efc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_UART_Receive_IT+0x26>
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e039      	b.n	8003efe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Receive_IT+0x38>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e032      	b.n	8003efe <HAL_UART_Receive_IT+0x9e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2222      	movs	r2, #34	; 0x22
 8003ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0220 	orr.w	r2, r2, #32
 8003ef6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_UART_IRQHandler+0x52>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9d2 	bl	8004300 <UART_Receive_IT>
      return;
 8003f5c:	e0cc      	b.n	80040f8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80ab 	beq.w	80040bc <HAL_UART_IRQHandler+0x1b0>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <HAL_UART_IRQHandler+0x70>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a0 	beq.w	80040bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_UART_IRQHandler+0x90>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_UART_IRQHandler+0xb0>
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	f043 0202 	orr.w	r2, r3, #2
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_UART_IRQHandler+0xd0>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_UART_IRQHandler+0xf0>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	f043 0208 	orr.w	r2, r3, #8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d078      	beq.n	80040f6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <HAL_UART_IRQHandler+0x112>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f971 	bl	8004300 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_UART_IRQHandler+0x13a>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d031      	beq.n	80040aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8ba 	bl	80041c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d123      	bne.n	80040a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004068:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	2b00      	cmp	r3, #0
 8004070:	d013      	beq.n	800409a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4a22      	ldr	r2, [pc, #136]	; (8004100 <HAL_UART_IRQHandler+0x1f4>)
 8004078:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd fd77 	bl	8001b72 <HAL_DMA_Abort_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004094:	4610      	mov	r0, r2
 8004096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e00e      	b.n	80040b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f83c 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e00a      	b.n	80040b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f838 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e006      	b.n	80040b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f834 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040b6:	e01e      	b.n	80040f6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	bf00      	nop
    return;
 80040ba:	e01c      	b.n	80040f6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1cc>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8a7 	bl	8004224 <UART_Transmit_IT>
    return;
 80040d6:	e00f      	b.n	80040f8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_UART_IRQHandler+0x1ec>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f8ef 	bl	80042d0 <UART_EndTransmit_IT>
    return;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80040f6:	bf00      	nop
  }
}
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	080041fd 	.word	0x080041fd

08004104 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	e02c      	b.n	8004198 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d028      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <UART_WaitOnFlagUntilTimeout+0x30>
 800414c:	f7fd fbd2 	bl	80018f4 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d21d      	bcs.n	8004198 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800416a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e00f      	b.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d0c3      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff ff7e 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b21      	cmp	r3, #33	; 0x21
 8004236:	d144      	bne.n	80042c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d11a      	bne.n	8004278 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004256:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]
 800426a:	e00e      	b.n	800428a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	621a      	str	r2, [r3, #32]
 8004276:	e008      	b.n	800428a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	1c59      	adds	r1, r3, #1
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6211      	str	r1, [r2, #32]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	84d1      	strh	r1, [r2, #38]	; 0x26
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff07 	bl	8004104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b22      	cmp	r3, #34	; 0x22
 8004312:	d171      	bne.n	80043f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431c:	d123      	bne.n	8004366 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10e      	bne.n	800434a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	1c9a      	adds	r2, r3, #2
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
 8004348:	e029      	b.n	800439e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	b29b      	uxth	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28
 8004364:	e01b      	b.n	800439e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6858      	ldr	r0, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6291      	str	r1, [r2, #40]	; 0x28
 800437e:	b2c2      	uxtb	r2, r0
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e00c      	b.n	800439e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	1c58      	adds	r0, r3, #1
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	6288      	str	r0, [r1, #40]	; 0x28
 8004396:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4619      	mov	r1, r3
 80043ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d120      	bne.n	80043f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0220 	bic.w	r2, r2, #32
 80043c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 fe6e 	bl	80060cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e002      	b.n	80043fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004444:	f023 030c 	bic.w	r3, r3, #12
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	430b      	orrs	r3, r1
 8004450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004470:	f040 80e4 	bne.w	800463c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4aab      	ldr	r2, [pc, #684]	; (8004728 <UART_SetConfig+0x324>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <UART_SetConfig+0x84>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4aaa      	ldr	r2, [pc, #680]	; (800472c <UART_SetConfig+0x328>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d16c      	bne.n	8004562 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004488:	f7ff fbf0 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800448c:	4602      	mov	r2, r0
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009a      	lsls	r2, r3, #2
 8004496:	441a      	add	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	4aa3      	ldr	r2, [pc, #652]	; (8004730 <UART_SetConfig+0x32c>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	011c      	lsls	r4, r3, #4
 80044ac:	f7ff fbde 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009a      	lsls	r2, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80044c6:	f7ff fbd1 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	4a93      	ldr	r2, [pc, #588]	; (8004730 <UART_SetConfig+0x32c>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2264      	movs	r2, #100	; 0x64
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	1aeb      	subs	r3, r5, r3
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a8e      	ldr	r2, [pc, #568]	; (8004730 <UART_SetConfig+0x32c>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004502:	441c      	add	r4, r3
 8004504:	f7ff fbb2 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004508:	4602      	mov	r2, r0
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009a      	lsls	r2, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	fbb2 f5f3 	udiv	r5, r2, r3
 800451e:	f7ff fba5 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004522:	4602      	mov	r2, r0
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <UART_SetConfig+0x32c>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2264      	movs	r2, #100	; 0x64
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	1aeb      	subs	r3, r5, r3
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a78      	ldr	r2, [pc, #480]	; (8004730 <UART_SetConfig+0x32c>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 0207 	and.w	r2, r3, #7
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4422      	add	r2, r4
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	e154      	b.n	800480c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004562:	f7ff fb6f 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8004566:	4602      	mov	r2, r0
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009a      	lsls	r2, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	4a6c      	ldr	r2, [pc, #432]	; (8004730 <UART_SetConfig+0x32c>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	011c      	lsls	r4, r3, #4
 8004586:	f7ff fb5d 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800458a:	4602      	mov	r2, r0
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009a      	lsls	r2, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fbb2 f5f3 	udiv	r5, r2, r3
 80045a0:	f7ff fb50 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009a      	lsls	r2, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4a5d      	ldr	r2, [pc, #372]	; (8004730 <UART_SetConfig+0x32c>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2264      	movs	r2, #100	; 0x64
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	1aeb      	subs	r3, r5, r3
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	3332      	adds	r3, #50	; 0x32
 80045ce:	4a58      	ldr	r2, [pc, #352]	; (8004730 <UART_SetConfig+0x32c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045dc:	441c      	add	r4, r3
 80045de:	f7ff fb31 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009a      	lsls	r2, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80045f8:	f7ff fb24 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009a      	lsls	r2, r3, #2
 8004606:	441a      	add	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	4a47      	ldr	r2, [pc, #284]	; (8004730 <UART_SetConfig+0x32c>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	2264      	movs	r2, #100	; 0x64
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	1aeb      	subs	r3, r5, r3
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	3332      	adds	r3, #50	; 0x32
 8004626:	4a42      	ldr	r2, [pc, #264]	; (8004730 <UART_SetConfig+0x32c>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	f003 0207 	and.w	r2, r3, #7
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4422      	add	r2, r4
 8004638:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800463a:	e0e7      	b.n	800480c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a39      	ldr	r2, [pc, #228]	; (8004728 <UART_SetConfig+0x324>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <UART_SetConfig+0x24c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <UART_SetConfig+0x328>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d171      	bne.n	8004734 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004650:	f7ff fb0c 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004654:	4602      	mov	r2, r0
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009a      	lsls	r2, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	4a31      	ldr	r2, [pc, #196]	; (8004730 <UART_SetConfig+0x32c>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	011c      	lsls	r4, r3, #4
 8004674:	f7ff fafa 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004678:	4602      	mov	r2, r0
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009a      	lsls	r2, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	fbb2 f5f3 	udiv	r5, r2, r3
 800468e:	f7ff faed 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004692:	4602      	mov	r2, r0
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <UART_SetConfig+0x32c>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1aeb      	subs	r3, r5, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	3332      	adds	r3, #50	; 0x32
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <UART_SetConfig+0x32c>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c8:	441c      	add	r4, r3
 80046ca:	f7ff facf 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009a      	lsls	r2, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80046e4:	f7ff fac2 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009a      	lsls	r2, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <UART_SetConfig+0x32c>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2264      	movs	r2, #100	; 0x64
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	1aeb      	subs	r3, r5, r3
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	3332      	adds	r3, #50	; 0x32
 8004712:	4a07      	ldr	r2, [pc, #28]	; (8004730 <UART_SetConfig+0x32c>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4422      	add	r2, r4
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	e071      	b.n	800480c <UART_SetConfig+0x408>
 8004728:	40011000 	.word	0x40011000
 800472c:	40011400 	.word	0x40011400
 8004730:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004734:	f7ff fa86 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8004738:	4602      	mov	r2, r0
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009a      	lsls	r2, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	fbb2 f3f3 	udiv	r3, r2, r3
 800474e:	4a31      	ldr	r2, [pc, #196]	; (8004814 <UART_SetConfig+0x410>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	011c      	lsls	r4, r3, #4
 8004758:	f7ff fa74 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800475c:	4602      	mov	r2, r0
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009a      	lsls	r2, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004772:	f7ff fa67 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8004776:	4602      	mov	r2, r0
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009a      	lsls	r2, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <UART_SetConfig+0x410>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2264      	movs	r2, #100	; 0x64
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	1aeb      	subs	r3, r5, r3
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	3332      	adds	r3, #50	; 0x32
 80047a0:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <UART_SetConfig+0x410>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ac:	441c      	add	r4, r3
 80047ae:	f7ff fa49 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80047c8:	f7ff fa3c 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009a      	lsls	r2, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <UART_SetConfig+0x410>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2264      	movs	r2, #100	; 0x64
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	1aeb      	subs	r3, r5, r3
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a07      	ldr	r2, [pc, #28]	; (8004814 <UART_SetConfig+0x410>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4422      	add	r2, r4
 8004808:	609a      	str	r2, [r3, #8]
}
 800480a:	e7ff      	b.n	800480c <UART_SetConfig+0x408>
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bdb0      	pop	{r4, r5, r7, pc}
 8004814:	51eb851f 	.word	0x51eb851f

08004818 <NDEF_PrepareURIMessage>:
  * @param  pURI : pointer on structure that contain the URI information.
  * @param  pNDEFMessage : pointer on the NDEF message.
  * @param  size : to store the size of the NDEF message generated.
  */
void NDEF_PrepareURIMessage( sURI_Info *pURI, uint8_t *pNDEFMessage, uint16_t *size )
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t uriSize, totalSize, Offset = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
  uint32_t infoSize = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
/*----------------------------------*/
/*               ID                 */  /* <---- Not Used  */
/************************************/

  /* We need to know the URI type in order to define if an abreviation is available */
  type = getUriType( pURI->protocol );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f9ea 	bl	8004c08 <getUriType>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]

  /* URI : 1+URI for abreviate protocol*/
  if( type != URI_ID_0x00 )
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <NDEF_PrepareURIMessage+0x38>
    uriSize = 1 + strlen(pURI->URI_Message);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3350      	adds	r3, #80	; 0x50
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb fcd6 	bl	80001f4 <strlen>
 8004848:	4603      	mov	r3, r0
 800484a:	3301      	adds	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	e00d      	b.n	800486c <NDEF_PrepareURIMessage+0x54>
  else /*: 1+protocol+URI else*/
    uriSize = 1 + strlen(pURI->protocol) + strlen(pURI->URI_Message);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fcce 	bl	80001f4 <strlen>
 8004858:	4604      	mov	r4, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3350      	adds	r3, #80	; 0x50
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fcc8 	bl	80001f4 <strlen>
 8004864:	4603      	mov	r3, r0
 8004866:	4423      	add	r3, r4
 8004868:	3301      	adds	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if a Smart poster is needed */
  if( pURI->Information[0] != '\0' )
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d06f      	beq.n	8004956 <NDEF_PrepareURIMessage+0x13e>
  {
    /* Info : 1+2+info */
    infoSize = 1 + ISO_ENGLISH_CODE_STRING_LENGTH + strlen(pURI->Information);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fcb9 	bl	80001f4 <strlen>
 8004882:	4603      	mov	r3, r0
 8004884:	3303      	adds	r3, #3
 8004886:	61bb      	str	r3, [r7, #24]
    /* Total */
    totalSize = 4 + uriSize + 4 + infoSize;
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	3308      	adds	r3, #8
 8004890:	623b      	str	r3, [r7, #32]
    if( uriSize > 255 ) totalSize += 3;   /* Normal URI size */
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	2bff      	cmp	r3, #255	; 0xff
 8004896:	d902      	bls.n	800489e <NDEF_PrepareURIMessage+0x86>
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	3303      	adds	r3, #3
 800489c:	623b      	str	r3, [r7, #32]
    if( infoSize > 255 ) totalSize += 3;  /* Normal Info size */
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2bff      	cmp	r3, #255	; 0xff
 80048a2:	d902      	bls.n	80048aa <NDEF_PrepareURIMessage+0x92>
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	3303      	adds	r3, #3
 80048a8:	623b      	str	r3, [r7, #32]

    /* SmartPoster header */
    if( totalSize > 255 )
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2bff      	cmp	r3, #255	; 0xff
 80048ae:	d931      	bls.n	8004914 <NDEF_PrepareURIMessage+0xfc>
    {
      pNDEFMessage[Offset++] = 0xC1;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	61fa      	str	r2, [r7, #28]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4413      	add	r3, r2
 80048ba:	22c1      	movs	r2, #193	; 0xc1
 80048bc:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	61fa      	str	r2, [r7, #28]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4413      	add	r3, r2
 80048c8:	2202      	movs	r2, #2
 80048ca:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (totalSize & 0xFF000000) >> 24;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	0e19      	lsrs	r1, r3, #24
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	61fa      	str	r2, [r7, #28]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	b2ca      	uxtb	r2, r1
 80048dc:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (totalSize & 0x00FF0000) >> 16;
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	0c19      	lsrs	r1, r3, #16
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	61fa      	str	r2, [r7, #28]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	4413      	add	r3, r2
 80048ec:	b2ca      	uxtb	r2, r1
 80048ee:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (totalSize & 0x0000FF00) >> 8;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	0a19      	lsrs	r1, r3, #8
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	61fa      	str	r2, [r7, #28]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	b2ca      	uxtb	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = totalSize & 0x000000FF;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	61fa      	str	r2, [r7, #28]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	4413      	add	r3, r2
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e015      	b.n	8004940 <NDEF_PrepareURIMessage+0x128>
    }
    else
    {
      pNDEFMessage[Offset++] = 0xD1;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	61fa      	str	r2, [r7, #28]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4413      	add	r3, r2
 800491e:	22d1      	movs	r2, #209	; 0xd1
 8004920:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	61fa      	str	r2, [r7, #28]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4413      	add	r3, r2
 800492c:	2202      	movs	r2, #2
 800492e:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (uint8_t)totalSize;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	61fa      	str	r2, [r7, #28]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
    }
    memcpy( &pNDEFMessage[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH );
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	2202      	movs	r2, #2
 8004948:	499c      	ldr	r1, [pc, #624]	; (8004bbc <NDEF_PrepareURIMessage+0x3a4>)
 800494a:	4618      	mov	r0, r3
 800494c:	f002 f84f 	bl	80069ee <memcpy>
    Offset += SMART_POSTER_TYPE_STRING_LENGTH;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3302      	adds	r3, #2
 8004954:	61fb      	str	r3, [r7, #28]
  }

  /* URI header */
  pNDEFMessage[Offset] = 0x81;
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	2281      	movs	r2, #129	; 0x81
 800495e:	701a      	strb	r2, [r3, #0]
  if( uriSize < 256 ) pNDEFMessage[Offset] |= 0x10;                      // Set the SR bit
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	2bff      	cmp	r3, #255	; 0xff
 8004964:	d80a      	bhi.n	800497c <NDEF_PrepareURIMessage+0x164>
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	440b      	add	r3, r1
 8004974:	f042 0210 	orr.w	r2, r2, #16
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
  if( pURI->Information[0] == '\0' ) pNDEFMessage[Offset] |= 0x40;       // Set the ME bit
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <NDEF_PrepareURIMessage+0x184>
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	440b      	add	r3, r1
 8004994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
  Offset++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]

  pNDEFMessage[Offset++] = URI_TYPE_STRING_LENGTH;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	61fa      	str	r2, [r7, #28]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4413      	add	r3, r2
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
  if( uriSize > 255 )
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	2bff      	cmp	r3, #255	; 0xff
 80049b4:	d923      	bls.n	80049fe <NDEF_PrepareURIMessage+0x1e6>
  {
    pNDEFMessage[Offset++] = (uriSize & 0xFF000000) >> 24;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	0e19      	lsrs	r1, r3, #24
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	61fa      	str	r2, [r7, #28]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4413      	add	r3, r2
 80049c4:	b2ca      	uxtb	r2, r1
 80049c6:	701a      	strb	r2, [r3, #0]
    pNDEFMessage[Offset++] = (uriSize & 0x00FF0000) >> 16;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	0c19      	lsrs	r1, r3, #16
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	b2ca      	uxtb	r2, r1
 80049d8:	701a      	strb	r2, [r3, #0]
    pNDEFMessage[Offset++] = (uriSize & 0x0000FF00) >> 8;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	0a19      	lsrs	r1, r3, #8
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	61fa      	str	r2, [r7, #28]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	4413      	add	r3, r2
 80049e8:	b2ca      	uxtb	r2, r1
 80049ea:	701a      	strb	r2, [r3, #0]
    pNDEFMessage[Offset++] = uriSize & 0x000000FF;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	61fa      	str	r2, [r7, #28]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4413      	add	r3, r2
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e007      	b.n	8004a0e <NDEF_PrepareURIMessage+0x1f6>
  }
  else
  {
    pNDEFMessage[Offset++] = (uint8_t)uriSize;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	61fa      	str	r2, [r7, #28]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4413      	add	r3, r2
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
  }
  memcpy( &pNDEFMessage[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH );
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	2201      	movs	r2, #1
 8004a16:	496a      	ldr	r1, [pc, #424]	; (8004bc0 <NDEF_PrepareURIMessage+0x3a8>)
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 ffe8 	bl	80069ee <memcpy>
  Offset += URI_TYPE_STRING_LENGTH;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]

  pNDEFMessage[Offset++] = type;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	61fa      	str	r2, [r7, #28]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	7dfa      	ldrb	r2, [r7, #23]
 8004a30:	701a      	strb	r2, [r3, #0]
  if( type == URI_ID_0x00 ) // No abreviation
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d115      	bne.n	8004a64 <NDEF_PrepareURIMessage+0x24c>
  {
    memcpy( &pNDEFMessage[Offset], pURI->protocol, strlen(pURI->protocol) );
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	18d4      	adds	r4, r2, r3
 8004a3e:	68fd      	ldr	r5, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fbd6 	bl	80001f4 <strlen>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f001 ffcd 	bl	80069ee <memcpy>
    Offset += strlen(pURI->protocol);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fbcc 	bl	80001f4 <strlen>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
  }

  memcpy( &pNDEFMessage[Offset], pURI->URI_Message, strlen(pURI->URI_Message) );
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	18d4      	adds	r4, r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3350      	adds	r3, #80	; 0x50
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fbbd 	bl	80001f4 <strlen>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4629      	mov	r1, r5
 8004a80:	4620      	mov	r0, r4
 8004a82:	f001 ffb4 	bl	80069ee <memcpy>
  Offset += strlen(pURI->URI_Message);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3350      	adds	r3, #80	; 0x50
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fb fbb2 	bl	80001f4 <strlen>
 8004a90:	4602      	mov	r2, r0
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]

  /* Information header */
  if( pURI->Information[0] != '\0' )
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8084 	beq.w	8004bac <NDEF_PrepareURIMessage+0x394>
  {
    if( infoSize > 255 )
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2bff      	cmp	r3, #255	; 0xff
 8004aa8:	d931      	bls.n	8004b0e <NDEF_PrepareURIMessage+0x2f6>
    {
      pNDEFMessage[Offset++] = 0x41;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	61fa      	str	r2, [r7, #28]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2241      	movs	r2, #65	; 0x41
 8004ab6:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	61fa      	str	r2, [r7, #28]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (infoSize & 0xFF000000) >> 24;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	0e19      	lsrs	r1, r3, #24
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	61fa      	str	r2, [r7, #28]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b2ca      	uxtb	r2, r1
 8004ad6:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (infoSize & 0x00FF0000) >> 16;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	0c19      	lsrs	r1, r3, #16
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	61fa      	str	r2, [r7, #28]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b2ca      	uxtb	r2, r1
 8004ae8:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (infoSize & 0x0000FF00) >> 8;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	0a19      	lsrs	r1, r3, #8
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	61fa      	str	r2, [r7, #28]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	4413      	add	r3, r2
 8004af8:	b2ca      	uxtb	r2, r1
 8004afa:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = infoSize & 0x000000FF;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	61fa      	str	r2, [r7, #28]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4413      	add	r3, r2
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e015      	b.n	8004b3a <NDEF_PrepareURIMessage+0x322>
    }
    else
    {
      pNDEFMessage[Offset++] = 0x51;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	61fa      	str	r2, [r7, #28]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	4413      	add	r3, r2
 8004b18:	2251      	movs	r2, #81	; 0x51
 8004b1a:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
      pNDEFMessage[Offset++] = (uint8_t)infoSize;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	61fa      	str	r2, [r7, #28]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	4413      	add	r3, r2
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
    }

    memcpy( &pNDEFMessage[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH );
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	2201      	movs	r2, #1
 8004b42:	4920      	ldr	r1, [pc, #128]	; (8004bc4 <NDEF_PrepareURIMessage+0x3ac>)
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 ff52 	bl	80069ee <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
    pNDEFMessage[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]
    memcpy( &pNDEFMessage[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH );
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	2202      	movs	r2, #2
 8004b66:	4918      	ldr	r1, [pc, #96]	; (8004bc8 <NDEF_PrepareURIMessage+0x3b0>)
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 ff40 	bl	80069ee <memcpy>
    Offset += ISO_ENGLISH_CODE_STRING_LENGTH;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3302      	adds	r3, #2
 8004b72:	61fb      	str	r3, [r7, #28]

    /* Information payload */
    memcpy( &pNDEFMessage[Offset], pURI->Information, strlen(pURI->Information) );
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	18d4      	adds	r4, r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 75f0 	add.w	r5, r3, #480	; 0x1e0
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fb fb34 	bl	80001f4 <strlen>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4629      	mov	r1, r5
 8004b92:	4620      	mov	r0, r4
 8004b94:	f001 ff2b 	bl	80069ee <memcpy>
    Offset += strlen(pURI->Information);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fb fb28 	bl	80001f4 <strlen>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	61fb      	str	r3, [r7, #28]
  }

  *size = Offset;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	801a      	strh	r2, [r3, #0]

}
 8004bb4:	bf00      	nop
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bdb0      	pop	{r4, r5, r7, pc}
 8004bbc:	08007de0 	.word	0x08007de0
 8004bc0:	08007de4 	.word	0x08007de4
 8004bc4:	08007de8 	.word	0x08007de8
 8004bc8:	08007dec 	.word	0x08007dec

08004bcc <NDEF_WriteURI>:
  * @retval NDEF_ERROR_NOT_FORMATED : CCFile data not supported or not present.
  * @retval NDEF_ERROR_MEMORY_TAG : Size not compatible with memory.
  * @retval NDEF_ERROR_LOCKED : Tag locked, cannot be write.
  */
uint16_t NDEF_WriteURI( sURI_Info *pURI )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR, Offset = 0;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	81fb      	strh	r3, [r7, #14]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	81bb      	strh	r3, [r7, #12]

  NDEF_PrepareURIMessage( pURI, NDEF_Buffer, &Offset );
 8004bdc:	f107 030c 	add.w	r3, r7, #12
 8004be0:	461a      	mov	r2, r3
 8004be2:	4908      	ldr	r1, [pc, #32]	; (8004c04 <NDEF_WriteURI+0x38>)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fe17 	bl	8004818 <NDEF_PrepareURIMessage>

  status = NfcTag_WriteNDEF( Offset , NDEF_Buffer );
 8004bea:	89bb      	ldrh	r3, [r7, #12]
 8004bec:	4905      	ldr	r1, [pc, #20]	; (8004c04 <NDEF_WriteURI+0x38>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f9e2 	bl	8004fb8 <NfcTag_WriteNDEF>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	81fb      	strh	r3, [r7, #14]

  return status;
 8004bf8:	89fb      	ldrh	r3, [r7, #14]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000be0 	.word	0x20000be0

08004c08 <getUriType>:

char getUriType( char *protocol )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if( !memcmp( protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING) ) ) return URI_ID_0x01;
 8004c10:	220b      	movs	r2, #11
 8004c12:	49b1      	ldr	r1, [pc, #708]	; (8004ed8 <getUriType+0x2d0>)
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 fedb 	bl	80069d0 <memcmp>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <getUriType+0x1c>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e154      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING) ) ) return URI_ID_0x02;
 8004c24:	220c      	movs	r2, #12
 8004c26:	49ad      	ldr	r1, [pc, #692]	; (8004edc <getUriType+0x2d4>)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f001 fed1 	bl	80069d0 <memcmp>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <getUriType+0x30>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e14a      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING) ) ) return URI_ID_0x03;
 8004c38:	2207      	movs	r2, #7
 8004c3a:	49a9      	ldr	r1, [pc, #676]	; (8004ee0 <getUriType+0x2d8>)
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f001 fec7 	bl	80069d0 <memcmp>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <getUriType+0x44>
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e140      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING) ) ) return URI_ID_0x04;
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	49a5      	ldr	r1, [pc, #660]	; (8004ee4 <getUriType+0x2dc>)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f001 febd 	bl	80069d0 <memcmp>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <getUriType+0x58>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	e136      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING) ) ) return URI_ID_0x05;
 8004c60:	2204      	movs	r2, #4
 8004c62:	49a1      	ldr	r1, [pc, #644]	; (8004ee8 <getUriType+0x2e0>)
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 feb3 	bl	80069d0 <memcmp>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <getUriType+0x6c>
 8004c70:	2305      	movs	r3, #5
 8004c72:	e12c      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING) ) ) return URI_ID_0x06;
 8004c74:	2207      	movs	r2, #7
 8004c76:	499d      	ldr	r1, [pc, #628]	; (8004eec <getUriType+0x2e4>)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 fea9 	bl	80069d0 <memcmp>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <getUriType+0x80>
 8004c84:	2306      	movs	r3, #6
 8004c86:	e122      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING) ) ) return URI_ID_0x07;
 8004c88:	221a      	movs	r2, #26
 8004c8a:	4999      	ldr	r1, [pc, #612]	; (8004ef0 <getUriType+0x2e8>)
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 fe9f 	bl	80069d0 <memcmp>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <getUriType+0x94>
 8004c98:	2307      	movs	r3, #7
 8004c9a:	e118      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING) ) ) return URI_ID_0x08;
 8004c9c:	220a      	movs	r2, #10
 8004c9e:	4995      	ldr	r1, [pc, #596]	; (8004ef4 <getUriType+0x2ec>)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fe95 	bl	80069d0 <memcmp>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <getUriType+0xa8>
 8004cac:	2308      	movs	r3, #8
 8004cae:	e10e      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING) ) ) return URI_ID_0x09;
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	4991      	ldr	r1, [pc, #580]	; (8004ef8 <getUriType+0x2f0>)
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 fe8b 	bl	80069d0 <memcmp>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <getUriType+0xbc>
 8004cc0:	2309      	movs	r3, #9
 8004cc2:	e104      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING) ) ) return URI_ID_0x0A;
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	498d      	ldr	r1, [pc, #564]	; (8004efc <getUriType+0x2f4>)
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 fe81 	bl	80069d0 <memcmp>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <getUriType+0xd0>
 8004cd4:	230a      	movs	r3, #10
 8004cd6:	e0fa      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING) ) ) return URI_ID_0x0B;
 8004cd8:	2206      	movs	r2, #6
 8004cda:	4989      	ldr	r1, [pc, #548]	; (8004f00 <getUriType+0x2f8>)
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fe77 	bl	80069d0 <memcmp>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <getUriType+0xe4>
 8004ce8:	230b      	movs	r3, #11
 8004cea:	e0f0      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING) ) ) return URI_ID_0x0C;
 8004cec:	2206      	movs	r2, #6
 8004cee:	4985      	ldr	r1, [pc, #532]	; (8004f04 <getUriType+0x2fc>)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f001 fe6d 	bl	80069d0 <memcmp>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <getUriType+0xf8>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	e0e6      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING) ) ) return URI_ID_0x0D;
 8004d00:	2206      	movs	r2, #6
 8004d02:	4981      	ldr	r1, [pc, #516]	; (8004f08 <getUriType+0x300>)
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f001 fe63 	bl	80069d0 <memcmp>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <getUriType+0x10c>
 8004d10:	230d      	movs	r3, #13
 8004d12:	e0dc      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING) ) ) return URI_ID_0x0E;
 8004d14:	2206      	movs	r2, #6
 8004d16:	497d      	ldr	r1, [pc, #500]	; (8004f0c <getUriType+0x304>)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 fe59 	bl	80069d0 <memcmp>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <getUriType+0x120>
 8004d24:	230e      	movs	r3, #14
 8004d26:	e0d2      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING) ) ) return URI_ID_0x0F;
 8004d28:	2205      	movs	r2, #5
 8004d2a:	4979      	ldr	r1, [pc, #484]	; (8004f10 <getUriType+0x308>)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 fe4f 	bl	80069d0 <memcmp>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <getUriType+0x134>
 8004d38:	230f      	movs	r3, #15
 8004d3a:	e0c8      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING) ) ) return URI_ID_0x10;
 8004d3c:	2209      	movs	r2, #9
 8004d3e:	4975      	ldr	r1, [pc, #468]	; (8004f14 <getUriType+0x30c>)
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 fe45 	bl	80069d0 <memcmp>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <getUriType+0x148>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	e0be      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING) ) ) return URI_ID_0x11;
 8004d50:	2205      	movs	r2, #5
 8004d52:	4971      	ldr	r1, [pc, #452]	; (8004f18 <getUriType+0x310>)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 fe3b 	bl	80069d0 <memcmp>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <getUriType+0x15c>
 8004d60:	2311      	movs	r3, #17
 8004d62:	e0b4      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING) ) ) return URI_ID_0x12;
 8004d64:	2207      	movs	r2, #7
 8004d66:	496d      	ldr	r1, [pc, #436]	; (8004f1c <getUriType+0x314>)
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 fe31 	bl	80069d0 <memcmp>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <getUriType+0x170>
 8004d74:	2312      	movs	r3, #18
 8004d76:	e0aa      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING) ) ) return URI_ID_0x13;
 8004d78:	2204      	movs	r2, #4
 8004d7a:	4969      	ldr	r1, [pc, #420]	; (8004f20 <getUriType+0x318>)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 fe27 	bl	80069d0 <memcmp>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <getUriType+0x184>
 8004d88:	2313      	movs	r3, #19
 8004d8a:	e0a0      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING) ) ) return URI_ID_0x14;
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	4965      	ldr	r1, [pc, #404]	; (8004f24 <getUriType+0x31c>)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 fe1d 	bl	80069d0 <memcmp>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <getUriType+0x198>
 8004d9c:	2314      	movs	r3, #20
 8004d9e:	e096      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING) ) ) return URI_ID_0x15;
 8004da0:	2204      	movs	r2, #4
 8004da2:	4961      	ldr	r1, [pc, #388]	; (8004f28 <getUriType+0x320>)
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 fe13 	bl	80069d0 <memcmp>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <getUriType+0x1ac>
 8004db0:	2315      	movs	r3, #21
 8004db2:	e08c      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING) ) ) return URI_ID_0x16;
 8004db4:	2205      	movs	r2, #5
 8004db6:	495d      	ldr	r1, [pc, #372]	; (8004f2c <getUriType+0x324>)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 fe09 	bl	80069d0 <memcmp>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <getUriType+0x1c0>
 8004dc4:	2316      	movs	r3, #22
 8004dc6:	e082      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING) ) ) return URI_ID_0x17;
 8004dc8:	2205      	movs	r2, #5
 8004dca:	4959      	ldr	r1, [pc, #356]	; (8004f30 <getUriType+0x328>)
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 fdff 	bl	80069d0 <memcmp>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <getUriType+0x1d4>
 8004dd8:	2317      	movs	r3, #23
 8004dda:	e078      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING) ) ) return URI_ID_0x18;
 8004ddc:	2208      	movs	r2, #8
 8004dde:	4955      	ldr	r1, [pc, #340]	; (8004f34 <getUriType+0x32c>)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 fdf5 	bl	80069d0 <memcmp>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <getUriType+0x1e8>
 8004dec:	2318      	movs	r3, #24
 8004dee:	e06e      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING) ) ) return URI_ID_0x19;
 8004df0:	220a      	movs	r2, #10
 8004df2:	4951      	ldr	r1, [pc, #324]	; (8004f38 <getUriType+0x330>)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 fdeb 	bl	80069d0 <memcmp>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <getUriType+0x1fc>
 8004e00:	2319      	movs	r3, #25
 8004e02:	e064      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING) ) ) return URI_ID_0x1A;
 8004e04:	2209      	movs	r2, #9
 8004e06:	494d      	ldr	r1, [pc, #308]	; (8004f3c <getUriType+0x334>)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 fde1 	bl	80069d0 <memcmp>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <getUriType+0x210>
 8004e14:	231a      	movs	r3, #26
 8004e16:	e05a      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING) ) ) return URI_ID_0x1B;
 8004e18:	220a      	movs	r2, #10
 8004e1a:	4949      	ldr	r1, [pc, #292]	; (8004f40 <getUriType+0x338>)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 fdd7 	bl	80069d0 <memcmp>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <getUriType+0x224>
 8004e28:	231b      	movs	r3, #27
 8004e2a:	e050      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING) ) ) return URI_ID_0x1C;
 8004e2c:	220b      	movs	r2, #11
 8004e2e:	4945      	ldr	r1, [pc, #276]	; (8004f44 <getUriType+0x33c>)
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 fdcd 	bl	80069d0 <memcmp>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <getUriType+0x238>
 8004e3c:	231c      	movs	r3, #28
 8004e3e:	e046      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING) ) ) return URI_ID_0x1D;
 8004e40:	2207      	movs	r2, #7
 8004e42:	4941      	ldr	r1, [pc, #260]	; (8004f48 <getUriType+0x340>)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fdc3 	bl	80069d0 <memcmp>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <getUriType+0x24c>
 8004e50:	231d      	movs	r3, #29
 8004e52:	e03c      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING) ) ) return URI_ID_0x1E;
 8004e54:	220b      	movs	r2, #11
 8004e56:	493d      	ldr	r1, [pc, #244]	; (8004f4c <getUriType+0x344>)
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fdb9 	bl	80069d0 <memcmp>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <getUriType+0x260>
 8004e64:	231e      	movs	r3, #30
 8004e66:	e032      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING) ) ) return URI_ID_0x1F;
 8004e68:	220b      	movs	r2, #11
 8004e6a:	4939      	ldr	r1, [pc, #228]	; (8004f50 <getUriType+0x348>)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 fdaf 	bl	80069d0 <memcmp>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <getUriType+0x274>
 8004e78:	231f      	movs	r3, #31
 8004e7a:	e028      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING) ) ) return URI_ID_0x20;
 8004e7c:	220c      	movs	r2, #12
 8004e7e:	4935      	ldr	r1, [pc, #212]	; (8004f54 <getUriType+0x34c>)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 fda5 	bl	80069d0 <memcmp>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <getUriType+0x288>
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	e01e      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING) ) ) return URI_ID_0x21;
 8004e90:	220c      	movs	r2, #12
 8004e92:	4931      	ldr	r1, [pc, #196]	; (8004f58 <getUriType+0x350>)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 fd9b 	bl	80069d0 <memcmp>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <getUriType+0x29c>
 8004ea0:	2321      	movs	r3, #33	; 0x21
 8004ea2:	e014      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING) ) ) return URI_ID_0x22;
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	492d      	ldr	r1, [pc, #180]	; (8004f5c <getUriType+0x354>)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fd91 	bl	80069d0 <memcmp>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <getUriType+0x2b0>
 8004eb4:	2322      	movs	r3, #34	; 0x22
 8004eb6:	e00a      	b.n	8004ece <getUriType+0x2c6>
  else if( !memcmp( protocol, URI_ID_0x23_STRING, strlen(URI_ID_0x23_STRING) ) ) return URI_ID_0x23;
 8004eb8:	2208      	movs	r2, #8
 8004eba:	4929      	ldr	r1, [pc, #164]	; (8004f60 <getUriType+0x358>)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 fd87 	bl	80069d0 <memcmp>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <getUriType+0x2c4>
 8004ec8:	2323      	movs	r3, #35	; 0x23
 8004eca:	e000      	b.n	8004ece <getUriType+0x2c6>
  else return URI_ID_0x00; // No abreviation for this protocol	
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08007c40 	.word	0x08007c40
 8004edc:	08007c50 	.word	0x08007c50
 8004ee0:	08007c60 	.word	0x08007c60
 8004ee4:	08007c6c 	.word	0x08007c6c
 8004ee8:	08007c78 	.word	0x08007c78
 8004eec:	08007c80 	.word	0x08007c80
 8004ef0:	08007c8c 	.word	0x08007c8c
 8004ef4:	08007ca8 	.word	0x08007ca8
 8004ef8:	08007cb4 	.word	0x08007cb4
 8004efc:	08007cc0 	.word	0x08007cc0
 8004f00:	08007ccc 	.word	0x08007ccc
 8004f04:	08007cd4 	.word	0x08007cd4
 8004f08:	08007cdc 	.word	0x08007cdc
 8004f0c:	08007ce4 	.word	0x08007ce4
 8004f10:	08007cec 	.word	0x08007cec
 8004f14:	08007cf4 	.word	0x08007cf4
 8004f18:	08007d00 	.word	0x08007d00
 8004f1c:	08007d08 	.word	0x08007d08
 8004f20:	08007d14 	.word	0x08007d14
 8004f24:	08007d1c 	.word	0x08007d1c
 8004f28:	08007d24 	.word	0x08007d24
 8004f2c:	08007d2c 	.word	0x08007d2c
 8004f30:	08007d34 	.word	0x08007d34
 8004f34:	08007d3c 	.word	0x08007d3c
 8004f38:	08007d48 	.word	0x08007d48
 8004f3c:	08007d54 	.word	0x08007d54
 8004f40:	08007d60 	.word	0x08007d60
 8004f44:	08007d6c 	.word	0x08007d6c
 8004f48:	08007d7c 	.word	0x08007d7c
 8004f4c:	08007d88 	.word	0x08007d88
 8004f50:	08007d98 	.word	0x08007d98
 8004f54:	08007da8 	.word	0x08007da8
 8004f58:	08007db8 	.word	0x08007db8
 8004f5c:	08007dc8 	.word	0x08007dc8
 8004f60:	08007dd4 	.word	0x08007dd4

08004f64 <NfcTag_SelectProtocol>:
#include "tagtype3_wrapper.h"

static NFCTAG_Protocol_Id_t CurrentProtocol = NFCTAG_NOTSET;

uint16_t NfcTag_SelectProtocol(NFCTAG_Protocol_Id_t protocol)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	71fb      	strb	r3, [r7, #7]
  if(protocol >= NFCTAG_NOTSET)
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d901      	bls.n	8004f78 <NfcTag_SelectProtocol+0x14>
    return NDEF_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e014      	b.n	8004fa2 <NfcTag_SelectProtocol+0x3e>

  if(protocol == NFCTAG_TYPE1)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d103      	bne.n	8004f86 <NfcTag_SelectProtocol+0x22>
    ccFileOffset = 10;
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <NfcTag_SelectProtocol+0x4c>)
 8004f80:	220a      	movs	r2, #10
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e009      	b.n	8004f9a <NfcTag_SelectProtocol+0x36>
  else if (protocol == NFCTAG_TYPE2)
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d103      	bne.n	8004f94 <NfcTag_SelectProtocol+0x30>
    ccFileOffset = 12;
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <NfcTag_SelectProtocol+0x4c>)
 8004f8e:	220c      	movs	r2, #12
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e002      	b.n	8004f9a <NfcTag_SelectProtocol+0x36>
  else
    ccFileOffset = 0;
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <NfcTag_SelectProtocol+0x4c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	801a      	strh	r2, [r3, #0]

  CurrentProtocol = protocol;
 8004f9a:	4a06      	ldr	r2, [pc, #24]	; (8004fb4 <NfcTag_SelectProtocol+0x50>)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	7013      	strb	r3, [r2, #0]
  return NDEF_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000118 	.word	0x20000118
 8004fb4:	20000045 	.word	0x20000045

08004fb8 <NfcTag_WriteNDEF>:
  return status;
}


uint16_t NfcTag_WriteNDEF(uint16_t Length , uint8_t *pData )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	80fb      	strh	r3, [r7, #6]
  uint16_t status = NDEF_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	81fb      	strh	r3, [r7, #14]
  switch (CurrentProtocol)
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <NfcTag_WriteNDEF+0x74>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d825      	bhi.n	800501c <NfcTag_WriteNDEF+0x64>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <NfcTag_WriteNDEF+0x20>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	0800500d 	.word	0x0800500d
  {
    case NFCTAG_TYPE4:
      status = NfcType4_WriteNDEF(Length, pData);
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f85d 	bl	80050b0 <NfcType4_WriteNDEF>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	81fb      	strh	r3, [r7, #14]
    break;
 8004ffa:	e012      	b.n	8005022 <NfcTag_WriteNDEF+0x6a>
    case NFCTAG_TYPE3:
      status = NfcType3_WriteNDEF(Length,pData);
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 f815 	bl	8005030 <NfcType3_WriteNDEF>
 8005006:	4603      	mov	r3, r0
 8005008:	81fb      	strh	r3, [r7, #14]
    break;
 800500a:	e00a      	b.n	8005022 <NfcTag_WriteNDEF+0x6a>
    case NFCTAG_TYPE5:
    case NFCTAG_TYPE2:
    case NFCTAG_TYPE1:
      status = NfcType5_WriteNDEF(Length, pData);
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f8eb 	bl	80051ec <NfcType5_WriteNDEF>
 8005016:	4603      	mov	r3, r0
 8005018:	81fb      	strh	r3, [r7, #14]
    break;
 800501a:	e002      	b.n	8005022 <NfcTag_WriteNDEF+0x6a>
    default:
      status = NDEF_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	81fb      	strh	r3, [r7, #14]
    break;
 8005020:	bf00      	nop
  }
  return status;
 8005022:	89fb      	ldrh	r3, [r7, #14]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000045 	.word	0x20000045

08005030 <NfcType3_WriteNDEF>:
  return NDEF_OK;

}

uint16_t NfcType3_WriteNDEF(uint16_t Length, uint8_t* pData )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	80fb      	strh	r3, [r7, #6]
  uint8_t err = NDEF_Wrapper_WriteData(pData,16,Length);
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	461a      	mov	r2, r3
 8005040:	2110      	movs	r1, #16
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f000 fe54 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]
  if(err != NDEF_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <NfcType3_WriteNDEF+0x26>
  {
    return NDEF_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e025      	b.n	80050a2 <NfcType3_WriteNDEF+0x72>
  }

  err = NDEF_Wrapper_ReadData((uint8_t *)&NDEF_Attr_Info,0,16);
 8005056:	2210      	movs	r2, #16
 8005058:	2100      	movs	r1, #0
 800505a:	4814      	ldr	r0, [pc, #80]	; (80050ac <NfcType3_WriteNDEF+0x7c>)
 800505c:	f000 fe30 	bl	8005cc0 <NDEF_Wrapper_ReadData>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
  if(err != NDEF_OK)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <NfcType3_WriteNDEF+0x3e>
  {
    return NDEF_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e019      	b.n	80050a2 <NfcType3_WriteNDEF+0x72>
  }
  // update the length field
  NDEF_Attr_Info.Ln[0] = (Length >> 16) & 0xFF;
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <NfcType3_WriteNDEF+0x7c>)
 8005070:	2200      	movs	r2, #0
 8005072:	72da      	strb	r2, [r3, #11]
  NDEF_Attr_Info.Ln[1] = (Length >> 8) & 0xFF;
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <NfcType3_WriteNDEF+0x7c>)
 800507e:	731a      	strb	r2, [r3, #12]
  NDEF_Attr_Info.Ln[2] = Length & 0xFF;
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <NfcType3_WriteNDEF+0x7c>)
 8005086:	735a      	strb	r2, [r3, #13]
  err = NDEF_Wrapper_WriteData((uint8_t *)&NDEF_Attr_Info,0,16);
 8005088:	2210      	movs	r2, #16
 800508a:	2100      	movs	r1, #0
 800508c:	4807      	ldr	r0, [pc, #28]	; (80050ac <NfcType3_WriteNDEF+0x7c>)
 800508e:	f000 fe2f 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 8005092:	4603      	mov	r3, r0
 8005094:	73fb      	strb	r3, [r7, #15]
  if(err != NDEF_OK)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <NfcType3_WriteNDEF+0x70>
  {
    return NDEF_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <NfcType3_WriteNDEF+0x72>
  }

  return NDEF_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000108 	.word	0x20000108

080050b0 <NfcType4_WriteNDEF>:
  return NDEF_OK;

}

uint16_t NfcType4_WriteNDEF(uint16_t Length, uint8_t* pData )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	6039      	str	r1, [r7, #0]
 80050ba:	80fb      	strh	r3, [r7, #6]
  uint8_t txLen[2];
  txLen[0] = Length >> 8;
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	733b      	strb	r3, [r7, #12]
  txLen[1] = Length & 0xFF;
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	737b      	strb	r3, [r7, #13]
  uint16_t status = NDEF_Wrapper_WriteData(txLen, 0, 2);
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	2202      	movs	r2, #2
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fe0b 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 80050da:	4603      	mov	r3, r0
 80050dc:	81fb      	strh	r3, [r7, #14]
  if(status != NDEF_OK)
 80050de:	89fb      	ldrh	r3, [r7, #14]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <NfcType4_WriteNDEF+0x38>
  {
    return status;
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	e007      	b.n	80050f8 <NfcType4_WriteNDEF+0x48>
  }
  return NDEF_Wrapper_WriteData(pData, 2, Length);
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	461a      	mov	r2, r3
 80050ec:	2102      	movs	r1, #2
 80050ee:	6838      	ldr	r0, [r7, #0]
 80050f0:	f000 fdfe 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 80050f4:	4603      	mov	r3, r0
 80050f6:	b29b      	uxth	r3, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <NfcType5_WriteData>:
  * @retval NDEF_ERROR_NOT_FORMATED    No Capability Container detected.
  * @retval NDEF_ERROR                 Error when writing the Tag.
  * @retval NDEF_OK                    The data has been successfully written.
  */
uint16_t NfcType5_WriteData(uint8_t Type, uint16_t Length , uint8_t *pData )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	603a      	str	r2, [r7, #0]
 800510a:	71fb      	strb	r3, [r7, #7]
 800510c:	460b      	mov	r3, r1
 800510e:	80bb      	strh	r3, [r7, #4]
  TT5_TLV_t tlv;
  uint8_t tlv_size;
  uint32_t offset;
  uint8_t NfcT5_Terminator = NFCT5_TERMINATOR_TLV;
 8005110:	23fe      	movs	r3, #254	; 0xfe
 8005112:	73fb      	strb	r3, [r7, #15]

  uint32_t max_length = NDEF_Wrapper_GetMemorySize()        /* Memory size */
 8005114:	f000 fe04 	bl	8005d20 <NDEF_Wrapper_GetMemorySize>
 8005118:	4602      	mov	r2, r0
                        - ((Length >= 0xFF) ? 4 : 2)    /* - TLV length */
 800511a:	88bb      	ldrh	r3, [r7, #4]
 800511c:	2bfe      	cmp	r3, #254	; 0xfe
 800511e:	d901      	bls.n	8005124 <NfcType5_WriteData+0x24>
 8005120:	2304      	movs	r3, #4
 8005122:	e000      	b.n	8005126 <NfcType5_WriteData+0x26>
 8005124:	2302      	movs	r3, #2
 8005126:	1ad2      	subs	r2, r2, r3
                        - sizeof(NfcT5_Terminator)      /* - Terminator TLV */
                        - CCFileStruct.NDEF_offset;     /* - CCfile length */
 8005128:	4b2f      	ldr	r3, [pc, #188]	; (80051e8 <NfcType5_WriteData+0xe8>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	425b      	negs	r3, r3
 800512e:	4413      	add	r3, r2
  uint32_t max_length = NDEF_Wrapper_GetMemorySize()        /* Memory size */
 8005130:	3b01      	subs	r3, #1
 8005132:	61bb      	str	r3, [r7, #24]

  /* If too many data to write return error */
  if( Length > max_length )
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	d201      	bcs.n	8005140 <NfcType5_WriteData+0x40>
  {
    return NDEF_ERROR_MEMORY_TAG;
 800513c:	2302      	movs	r3, #2
 800513e:	e04f      	b.n	80051e0 <NfcType5_WriteData+0xe0>
  }
  
  /* Detect NDEF message in memory */
  if( NfcType5_NDEFDetection( ) != NDEF_OK )
 8005140:	f000 f914 	bl	800536c <NfcType5_NDEFDetection>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <NfcType5_WriteData+0x4e>
  {
    return NDEF_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e048      	b.n	80051e0 <NfcType5_WriteData+0xe0>
  }
  
  /* Prepare TLV */
  tlv.Type = Type;
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	743b      	strb	r3, [r7, #16]
  if(Length >= 0xFF)
 8005152:	88bb      	ldrh	r3, [r7, #4]
 8005154:	2bfe      	cmp	r3, #254	; 0xfe
 8005156:	d90f      	bls.n	8005178 <NfcType5_WriteData+0x78>
  {
    tlv.Length = NFCT5_3_BYTES_L_TLV;
 8005158:	23ff      	movs	r3, #255	; 0xff
 800515a:	747b      	strb	r3, [r7, #17]
    tlv.Length16 = ((Length&0xff)<<8) | ((Length>>8)&0xff) ;
 800515c:	88bb      	ldrh	r3, [r7, #4]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	b21a      	sxth	r2, r3
 8005162:	88bb      	ldrh	r3, [r7, #4]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	b29b      	uxth	r3, r3
 8005168:	b21b      	sxth	r3, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	b21b      	sxth	r3, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	827b      	strh	r3, [r7, #18]
    tlv_size = 4;
 8005172:	2304      	movs	r3, #4
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e004      	b.n	8005182 <NfcType5_WriteData+0x82>
    
  } else {
    tlv.Length = Length;
 8005178:	88bb      	ldrh	r3, [r7, #4]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	747b      	strb	r3, [r7, #17]
    tlv_size = 2;
 800517e:	2302      	movs	r3, #2
 8005180:	77fb      	strb	r3, [r7, #31]
  }

  offset = CCFileStruct.NDEF_offset;
 8005182:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <NfcType5_WriteData+0xe8>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	617b      	str	r3, [r7, #20]
  /* Start write TLV to EEPROM */
  if(NDEF_Wrapper_WriteData( (uint8_t*)&tlv, offset, tlv_size )!= NDEF_OK)
 8005188:	7ffa      	ldrb	r2, [r7, #31]
 800518a:	f107 0310 	add.w	r3, r7, #16
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fdad 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <NfcType5_WriteData+0xa0>
    return NDEF_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e01f      	b.n	80051e0 <NfcType5_WriteData+0xe0>
  offset += tlv_size;
 80051a0:	7ffb      	ldrb	r3, [r7, #31]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  /* Continue write TLV data  to EEPROM */
  if(NDEF_Wrapper_WriteData( pData , offset, Length ) != NDEF_OK )
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	461a      	mov	r2, r3
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	6838      	ldr	r0, [r7, #0]
 80051b0:	f000 fd9e 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <NfcType5_WriteData+0xbe>
    return NDEF_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e010      	b.n	80051e0 <NfcType5_WriteData+0xe0>
  offset +=Length;
 80051be:	88bb      	ldrh	r3, [r7, #4]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  
  /* Write Terminator TLV */
  if(NDEF_Wrapper_WriteData( &NfcT5_Terminator, offset, sizeof(NfcT5_Terminator) ) != NDEF_OK)
 80051c6:	f107 030f 	add.w	r3, r7, #15
 80051ca:	2201      	movs	r2, #1
 80051cc:	6979      	ldr	r1, [r7, #20]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fd8e 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <NfcType5_WriteData+0xde>
    return NDEF_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <NfcType5_WriteData+0xe0>
  
  return NDEF_OK;
 80051de:	2300      	movs	r3, #0

}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000de0 	.word	0x20000de0

080051ec <NfcType5_WriteNDEF>:
  * @retval NDEF_ERROR_NOT_FORMATED    No Capability Container detected.
  * @retval NDEF_ERROR                 Error when writing the Tag.
  * @retval NDEF_OK                    The data has been successfully written.
  */
uint16_t NfcType5_WriteNDEF(uint16_t Length , uint8_t *pData )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	80fb      	strh	r3, [r7, #6]
  return NfcType5_WriteData(NFCT5_NDEF_MSG_TLV,Length,pData);
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	2003      	movs	r0, #3
 8005200:	f7ff ff7e 	bl	8005100 <NfcType5_WriteData>
 8005204:	4603      	mov	r3, r0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <NfcType5_WriteCCFile>:
  * @param  pCCBuffer Pointer on the buffer containnig the Capability Container.
  * @retval NDEF_ERROR Error when writing the Tag.
  * @retval NDEF_OK    The CC has been successfully written.
  */
uint16_t NfcType5_WriteCCFile( const uint8_t * const pCCBuffer )
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  int32_t ret_value;
  
  /* Write first block of CCFile */
  ret_value = NDEF_Wrapper_WriteData( pCCBuffer, 0x00, 0x4 );
 8005216:	2204      	movs	r2, #4
 8005218:	2100      	movs	r1, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fd68 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 8005220:	60f8      	str	r0, [r7, #12]
 
  /* If extended memory writes the next 4 bytes */
  if( (pCCBuffer[2] == 0x00) && (ret_value == NDEF_OK) )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3302      	adds	r3, #2
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <NfcType5_WriteCCFile+0x34>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <NfcType5_WriteCCFile+0x34>
  {
    ret_value = NDEF_Wrapper_WriteData( pCCBuffer + 4, 0x04, 4 );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	2204      	movs	r2, #4
 8005238:	2104      	movs	r1, #4
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fd58 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 8005240:	60f8      	str	r0, [r7, #12]
  }

  if( ret_value != NDEF_OK )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <NfcType5_WriteCCFile+0x3e>
  {
    return NDEF_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <NfcType5_WriteCCFile+0x40>
  }
  
	return NDEF_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <NfcType5_ReadCCFile>:
  * @param  pCCBuffer Pointer on the buffer used to store the CC.
  * @retval NDEF_ERROR Error when reading the Tag.
  * @retval NDEF_OK    The CC has been successfully read.
  */
uint16_t NfcType5_ReadCCFile( uint8_t * const pCCBuffer )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  int32_t ret_value;
  
  /* Read 4 bytes of CC File */
  ret_value = NDEF_Wrapper_ReadData( pCCBuffer, ccFileOffset, 4 );
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <NfcType5_ReadCCFile+0x50>)
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	2204      	movs	r2, #4
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fd29 	bl	8005cc0 <NDEF_Wrapper_ReadData>
 800526e:	60f8      	str	r0, [r7, #12]

  /* If extended memory reads the next 4 bytes */
  if( (pCCBuffer[2] == 0x00) && (ret_value == NDEF_OK) )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3302      	adds	r3, #2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <NfcType5_ReadCCFile+0x3c>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <NfcType5_ReadCCFile+0x3c>
  {
    ret_value = NDEF_Wrapper_ReadData( pCCBuffer + 4, ccFileOffset + 0x04, 4 );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	1d18      	adds	r0, r3, #4
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <NfcType5_ReadCCFile+0x50>)
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	3304      	adds	r3, #4
 800528a:	2204      	movs	r2, #4
 800528c:	4619      	mov	r1, r3
 800528e:	f000 fd17 	bl	8005cc0 <NDEF_Wrapper_ReadData>
 8005292:	60f8      	str	r0, [r7, #12]
  }
  
  if( ret_value != NDEF_OK )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <NfcType5_ReadCCFile+0x46>
  {
    return NDEF_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <NfcType5_ReadCCFile+0x48>
  }
  
	return NDEF_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000118 	.word	0x20000118

080052ac <NfcType5_TT5Init>:
  * @details The Capability Container content is defined by the global variable `CCFileStruct`.
  * @retval NDEF_ERROR The Tag has not been initialized.
  * @retval NDEF_OK    The Tag has been successfully initialized.
  */
uint16_t NfcType5_TT5Init( void )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
  int32_t ret_value = NDEF_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  uint16_t status;
  uint8_t accbuffer[8];
  uint8_t cdata;

  /* Prepare buffer to update CCFile */
  accbuffer[0] = CCFileStruct.MagicNumber;
 80052b6:	4b2b      	ldr	r3, [pc, #172]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	723b      	strb	r3, [r7, #8]
  accbuffer[1] = CCFileStruct.Version;
 80052bc:	4b29      	ldr	r3, [pc, #164]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	727b      	strb	r3, [r7, #9]
  accbuffer[2] = CCFileStruct.MemorySize;
 80052c2:	4b28      	ldr	r3, [pc, #160]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052c4:	789b      	ldrb	r3, [r3, #2]
 80052c6:	72bb      	strb	r3, [r7, #10]
  accbuffer[3] = CCFileStruct.TT5Tag;
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052ca:	78db      	ldrb	r3, [r3, #3]
 80052cc:	72fb      	strb	r3, [r7, #11]
  CCFileStruct.NDEF_offset = ccFileOffset + 0x04;
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <NfcType5_TT5Init+0xbc>)
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	3304      	adds	r3, #4
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b23      	ldr	r3, [pc, #140]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052d8:	60da      	str	r2, [r3, #12]
  
  /* If extended memory prepare the length bytes */
  if( CCFileStruct.MemorySize == NFCT5_EXTENDED_CCFILE )
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052dc:	789b      	ldrb	r3, [r3, #2]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <NfcType5_TT5Init+0x56>
  {
    accbuffer[6] = (uint8_t)(CCFileStruct.ExtMemorySize >> 8);
 80052e2:	4b20      	ldr	r3, [pc, #128]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052e4:	88db      	ldrh	r3, [r3, #6]
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	73bb      	strb	r3, [r7, #14]
    accbuffer[7] = (uint8_t)(CCFileStruct.ExtMemorySize & 0xFF);
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <NfcType5_TT5Init+0xb8>)
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	73fb      	strb	r3, [r7, #15]
    CCFileStruct.NDEF_offset = ccFileOffset + 0x08;
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <NfcType5_TT5Init+0xbc>)
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	461a      	mov	r2, r3
 80052fe:	4b19      	ldr	r3, [pc, #100]	; (8005364 <NfcType5_TT5Init+0xb8>)
 8005300:	60da      	str	r2, [r3, #12]
  }
  
  /* Update CCFile */
  status = NfcType5_WriteCCFile( accbuffer );
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff ff81 	bl	800520e <NfcType5_WriteCCFile>
 800530c:	4603      	mov	r3, r0
 800530e:	827b      	strh	r3, [r7, #18]
  if( status != NDEF_OK )
 8005310:	8a7b      	ldrh	r3, [r7, #18]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <NfcType5_TT5Init+0x6e>
  {
    return status;
 8005316:	8a7b      	ldrh	r3, [r7, #18]
 8005318:	e01f      	b.n	800535a <NfcType5_TT5Init+0xae>
  }
  
  /* Update NDEF TLV for INITIALIZED state */
  /* Update T */
  cdata = NFCT5_NDEF_MSG_TLV;
 800531a:	2303      	movs	r3, #3
 800531c:	71fb      	strb	r3, [r7, #7]
  ret_value = NDEF_Wrapper_WriteData( &cdata, CCFileStruct.NDEF_offset, 1 );
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <NfcType5_TT5Init+0xb8>)
 8005320:	68d9      	ldr	r1, [r3, #12]
 8005322:	1dfb      	adds	r3, r7, #7
 8005324:	2201      	movs	r2, #1
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fce2 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 800532c:	6178      	str	r0, [r7, #20]
  if( ret_value != NDEF_OK )
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <NfcType5_TT5Init+0x8c>
  {
    return NDEF_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e010      	b.n	800535a <NfcType5_TT5Init+0xae>
  }

  /* Update L */
  cdata = 0x00;
 8005338:	2300      	movs	r3, #0
 800533a:	71fb      	strb	r3, [r7, #7]
  ret_value = NDEF_Wrapper_WriteData( &cdata, (CCFileStruct.NDEF_offset + 1), 1 );
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <NfcType5_TT5Init+0xb8>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	2201      	movs	r2, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fcd2 	bl	8005cf0 <NDEF_Wrapper_WriteData>
 800534c:	6178      	str	r0, [r7, #20]
  if( ret_value != NDEF_OK )
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <NfcType5_TT5Init+0xac>
  {
    return NDEF_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <NfcType5_TT5Init+0xae>
  }
  
  return NDEF_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000de0 	.word	0x20000de0
 8005368:	20000118 	.word	0x20000118

0800536c <NfcType5_NDEFDetection>:
  *           The `CCfileStruct` global variable is updated accordingly with what is detected.
  * @retval NDEF_OK                 NDEF message Tag Type 5 detected.
  * @retval NDEF_ERROR_NOT_FORMATED Device is not a NFC Tag Type 5 Tag.
  */
uint16_t NfcType5_NDEFDetection( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
  uint8_t acc_buffer[8];
  TT5_TLV_t tlv_detect;
  uint16_t status;
  uint32_t memory_size;
  
  CCFileStruct.State = TT5_NO_NDEF;
 8005372:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005374:	2200      	movs	r2, #0
 8005376:	721a      	strb	r2, [r3, #8]
  
  /* Read CCFile */
  status = NfcType5_ReadCCFile( acc_buffer );
 8005378:	f107 0308 	add.w	r3, r7, #8
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff ff6b 	bl	8005258 <NfcType5_ReadCCFile>
 8005382:	4603      	mov	r3, r0
 8005384:	827b      	strh	r3, [r7, #18]
  if( status != NDEF_OK )
 8005386:	8a7b      	ldrh	r3, [r7, #18]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <NfcType5_NDEFDetection+0x24>
  {
    return status;
 800538c:	8a7b      	ldrh	r3, [r7, #18]
 800538e:	e09a      	b.n	80054c6 <NfcType5_NDEFDetection+0x15a>
  }
  
  /* Check Byte 0 is equal to magic number */
  if( ( acc_buffer[0] != NFCT5_MAGICNUMBER_E1_CCFILE ) && ( acc_buffer[0] != NFCT5_MAGICNUMBER_E2_CCFILE ) )
 8005390:	7a3b      	ldrb	r3, [r7, #8]
 8005392:	2be1      	cmp	r3, #225	; 0xe1
 8005394:	d004      	beq.n	80053a0 <NfcType5_NDEFDetection+0x34>
 8005396:	7a3b      	ldrb	r3, [r7, #8]
 8005398:	2be2      	cmp	r3, #226	; 0xe2
 800539a:	d001      	beq.n	80053a0 <NfcType5_NDEFDetection+0x34>
  {
    return NDEF_ERROR_NOT_FORMATED;
 800539c:	2305      	movs	r3, #5
 800539e:	e092      	b.n	80054c6 <NfcType5_NDEFDetection+0x15a>
  }
  /* Check Version number */
  else if( ( (acc_buffer[1]&0xFC) != 0x40 ) && ((acc_buffer[1]&0xFC) != 0x10 ) )
 80053a0:	7a7b      	ldrb	r3, [r7, #9]
 80053a2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d006      	beq.n	80053b8 <NfcType5_NDEFDetection+0x4c>
 80053aa:	7a7b      	ldrb	r3, [r7, #9]
 80053ac:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d001      	beq.n	80053b8 <NfcType5_NDEFDetection+0x4c>
  {
    return NDEF_ERROR_NOT_FORMATED;
 80053b4:	2305      	movs	r3, #5
 80053b6:	e086      	b.n	80054c6 <NfcType5_NDEFDetection+0x15a>
  }
  
  /* Check if CCFile is on 4 Bytes or 8 Bytes */
  if( acc_buffer[2] == 0x00 )
 80053b8:	7abb      	ldrb	r3, [r7, #10]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d11b      	bne.n	80053f6 <NfcType5_NDEFDetection+0x8a>
  {
    /* Update CCFIle structure */
    CCFileStruct.MemorySize = 0x0;
 80053be:	4b44      	ldr	r3, [pc, #272]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	709a      	strb	r2, [r3, #2]
    CCFileStruct.ExtMemorySize = (uint16_t)acc_buffer[6];
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053ca:	80da      	strh	r2, [r3, #6]
    CCFileStruct.ExtMemorySize = ( CCFileStruct.ExtMemorySize << 8 ) |  acc_buffer[7];
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053ce:	88db      	ldrh	r3, [r3, #6]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	b21a      	sxth	r2, r3
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b21b      	sxth	r3, r3
 80053dc:	b29a      	uxth	r2, r3
 80053de:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053e0:	80da      	strh	r2, [r3, #6]
    memory_size = CCFileStruct.ExtMemorySize;
 80053e2:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053e4:	88db      	ldrh	r3, [r3, #6]
 80053e6:	617b      	str	r3, [r7, #20]
    CCFileStruct.NDEF_offset = ccFileOffset + 8;
 80053e8:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <NfcType5_NDEFDetection+0x168>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	461a      	mov	r2, r3
 80053f0:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	e00e      	b.n	8005414 <NfcType5_NDEFDetection+0xa8>
  }
  else
  {
    /* Update CCFIle structure */
    CCFileStruct.MemorySize = acc_buffer[2];
 80053f6:	7aba      	ldrb	r2, [r7, #10]
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053fa:	709a      	strb	r2, [r3, #2]
    CCFileStruct.ExtMemorySize = 0x0;
 80053fc:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80053fe:	2200      	movs	r2, #0
 8005400:	80da      	strh	r2, [r3, #6]
    memory_size = CCFileStruct.MemorySize;
 8005402:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005404:	789b      	ldrb	r3, [r3, #2]
 8005406:	617b      	str	r3, [r7, #20]
    CCFileStruct.NDEF_offset = ccFileOffset + 4;
 8005408:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <NfcType5_NDEFDetection+0x168>)
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	3304      	adds	r3, #4
 800540e:	461a      	mov	r2, r3
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005412:	60da      	str	r2, [r3, #12]
  }
  
  /* Update CCFIle structure */
  CCFileStruct.MagicNumber = (TT5_MagicNumber_t)acc_buffer[0];
 8005414:	7a3a      	ldrb	r2, [r7, #8]
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005418:	701a      	strb	r2, [r3, #0]
  CCFileStruct.Version = acc_buffer[1];
 800541a:	7a7a      	ldrb	r2, [r7, #9]
 800541c:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 800541e:	705a      	strb	r2, [r3, #1]
  CCFileStruct.TT5Tag = acc_buffer[3];
 8005420:	7afa      	ldrb	r2, [r7, #11]
 8005422:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005424:	70da      	strb	r2, [r3, #3]
  
  /* Search for position of NDEF TLV in memory and tag status */
  while( ( NDEF_Wrapper_ReadData( (uint8_t *)&tlv_detect, CCFileStruct.NDEF_offset, sizeof(TT5_TLV_t) ) == NDEF_OK ) && ( CCFileStruct.NDEF_offset < memory_size ) )
 8005426:	e03e      	b.n	80054a6 <NfcType5_NDEFDetection+0x13a>
  {
    /* Detect first NDEF Message in memory */
    if( tlv_detect.Type == NFCT5_NDEF_MSG_TLV )
 8005428:	793b      	ldrb	r3, [r7, #4]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d115      	bne.n	800545a <NfcType5_NDEFDetection+0xee>
    {
      if( tlv_detect.Length == 0x00 )
 800542e:	797b      	ldrb	r3, [r7, #5]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <NfcType5_NDEFDetection+0xd0>
      {
        CCFileStruct.State = TT5_INITIALIZED;
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005436:	2201      	movs	r2, #1
 8005438:	721a      	strb	r2, [r3, #8]
 800543a:	e00c      	b.n	8005456 <NfcType5_NDEFDetection+0xea>
      }
      else
      {
        if( CCFileStruct.Version & 0x3 )
 800543c:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <NfcType5_NDEFDetection+0xe4>
        {
          CCFileStruct.State = TT5_READ;
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 800544a:	2203      	movs	r2, #3
 800544c:	721a      	strb	r2, [r3, #8]
 800544e:	e002      	b.n	8005456 <NfcType5_NDEFDetection+0xea>
        }
        else
        {
          CCFileStruct.State = TT5_READ_WRITE;
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005452:	2202      	movs	r2, #2
 8005454:	721a      	strb	r2, [r3, #8]
        }
      }
      return NDEF_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e035      	b.n	80054c6 <NfcType5_NDEFDetection+0x15a>
    }
    /* If Proprietary NDEF jump to end of proprietary message */
    else if(( tlv_detect.Type == NFCT5_PROPRIETARY_TLV ) || 
 800545a:	793b      	ldrb	r3, [r7, #4]
 800545c:	2bfd      	cmp	r3, #253	; 0xfd
 800545e:	d005      	beq.n	800546c <NfcType5_NDEFDetection+0x100>
            ( tlv_detect.Type == NFCT1_LOCK_CONTROL_TLV ) ||
 8005460:	793b      	ldrb	r3, [r7, #4]
    else if(( tlv_detect.Type == NFCT5_PROPRIETARY_TLV ) || 
 8005462:	2b01      	cmp	r3, #1
 8005464:	d002      	beq.n	800546c <NfcType5_NDEFDetection+0x100>
            ( tlv_detect.Type == NFCT1_MEMORY_CONTROL_TLV ))
 8005466:	793b      	ldrb	r3, [r7, #4]
            ( tlv_detect.Type == NFCT1_LOCK_CONTROL_TLV ) ||
 8005468:	2b02      	cmp	r3, #2
 800546a:	d112      	bne.n	8005492 <NfcType5_NDEFDetection+0x126>
    {
      if( tlv_detect.Length == NFCT5_3_BYTES_L_TLV )
 800546c:	797b      	ldrb	r3, [r7, #5]
 800546e:	2bff      	cmp	r3, #255	; 0xff
 8005470:	d107      	bne.n	8005482 <NfcType5_NDEFDetection+0x116>
      {
        CCFileStruct.NDEF_offset = CCFileStruct.NDEF_offset + tlv_detect.Length16 + 4;
 8005472:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 800547e:	60d3      	str	r3, [r2, #12]
        continue;
 8005480:	e011      	b.n	80054a6 <NfcType5_NDEFDetection+0x13a>
      }
      else
      {
        CCFileStruct.NDEF_offset = CCFileStruct.NDEF_offset + tlv_detect.Length + 2;
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	797a      	ldrb	r2, [r7, #5]
 8005488:	4413      	add	r3, r2
 800548a:	3302      	adds	r3, #2
 800548c:	4a10      	ldr	r2, [pc, #64]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 800548e:	60d3      	str	r3, [r2, #12]
        continue;
 8005490:	e009      	b.n	80054a6 <NfcType5_NDEFDetection+0x13a>
      }
    }
    /* if Terminator no NDEF detected */
    else if( tlv_detect.Type == NFCT5_TERMINATOR_TLV )
 8005492:	793b      	ldrb	r3, [r7, #4]
 8005494:	2bfe      	cmp	r3, #254	; 0xfe
 8005496:	d101      	bne.n	800549c <NfcType5_NDEFDetection+0x130>
    {
      return NDEF_ERROR_NOT_FORMATED;
 8005498:	2305      	movs	r3, #5
 800549a:	e014      	b.n	80054c6 <NfcType5_NDEFDetection+0x15a>
    }
      
    CCFileStruct.NDEF_offset++;
 800549c:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80054a4:	60d3      	str	r3, [r2, #12]
  while( ( NDEF_Wrapper_ReadData( (uint8_t *)&tlv_detect, CCFileStruct.NDEF_offset, sizeof(TT5_TLV_t) ) == NDEF_OK ) && ( CCFileStruct.NDEF_offset < memory_size ) )
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80054a8:	68d9      	ldr	r1, [r3, #12]
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	2204      	movs	r2, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fc06 	bl	8005cc0 <NDEF_Wrapper_ReadData>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <NfcType5_NDEFDetection+0x158>
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <NfcType5_NDEFDetection+0x164>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d8b1      	bhi.n	8005428 <NfcType5_NDEFDetection+0xbc>
  }
  
  return NDEF_ERROR_NOT_FORMATED;
 80054c4:	2305      	movs	r3, #5
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000de0 	.word	0x20000de0
 80054d4:	20000118 	.word	0x20000118

080054d8 <init_NFC_tag>:

/**
 * Initialize NFC tag with the predefined parameters
 * for this device.
 */
void init_NFC_tag(bool reset) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af02      	add	r7, sp, #8
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
  passwd.MsbPasswd = 0;
 80054e2:	4b37      	ldr	r3, [pc, #220]	; (80055c0 <init_NFC_tag+0xe8>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
  passwd.LsbPasswd = 0;
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <init_NFC_tag+0xe8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	605a      	str	r2, [r3, #4]

  printf("--- GPO ---\n");
 80054ee:	4835      	ldr	r0, [pc, #212]	; (80055c4 <init_NFC_tag+0xec>)
 80054f0:	f001 fb04 	bl	8006afc <puts>
  NFC04A1_NFCTAG_ReadUID(0, &uid);
 80054f4:	4934      	ldr	r1, [pc, #208]	; (80055c8 <init_NFC_tag+0xf0>)
 80054f6:	2000      	movs	r0, #0
 80054f8:	f7fc f8f6 	bl	80016e8 <NFC04A1_NFCTAG_ReadUID>
  printf("UID: 0x%08lx", uid.MsbUid);
 80054fc:	4b32      	ldr	r3, [pc, #200]	; (80055c8 <init_NFC_tag+0xf0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	4832      	ldr	r0, [pc, #200]	; (80055cc <init_NFC_tag+0xf4>)
 8005504:	f001 fa86 	bl	8006a14 <iprintf>
  printf("%08lx\n", uid.LsbUid);
 8005508:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <init_NFC_tag+0xf0>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4619      	mov	r1, r3
 800550e:	4830      	ldr	r0, [pc, #192]	; (80055d0 <init_NFC_tag+0xf8>)
 8005510:	f001 fa80 	bl	8006a14 <iprintf>

  printf("GPO: %ld\n", NFC04A1_GPO_ReadPin());
 8005514:	f7fc f82c 	bl	8001570 <NFC04A1_GPO_ReadPin>
 8005518:	4603      	mov	r3, r0
 800551a:	4619      	mov	r1, r3
 800551c:	482d      	ldr	r0, [pc, #180]	; (80055d4 <init_NFC_tag+0xfc>)
 800551e:	f001 fa79 	bl	8006a14 <iprintf>

  NFC04A1_NFCTAG_ReadGPO_Dyn(0, &GPOConfig );
 8005522:	492d      	ldr	r1, [pc, #180]	; (80055d8 <init_NFC_tag+0x100>)
 8005524:	2000      	movs	r0, #0
 8005526:	f7fc f935 	bl	8001794 <NFC04A1_NFCTAG_ReadGPO_Dyn>
  printf("GPO Config: %0x\n", GPOConfig);
 800552a:	4b2b      	ldr	r3, [pc, #172]	; (80055d8 <init_NFC_tag+0x100>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	482a      	ldr	r0, [pc, #168]	; (80055dc <init_NFC_tag+0x104>)
 8005532:	f001 fa6f 	bl	8006a14 <iprintf>

  NFC04A1_NFCTAG_GetGPO_en_Dyn(0, &GPO_en );
 8005536:	492a      	ldr	r1, [pc, #168]	; (80055e0 <init_NFC_tag+0x108>)
 8005538:	2000      	movs	r0, #0
 800553a:	f7fc f93b 	bl	80017b4 <NFC04A1_NFCTAG_GetGPO_en_Dyn>
  printf("GPO Config En: %0x\n\n", GPO_en);
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <init_NFC_tag+0x108>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	4827      	ldr	r0, [pc, #156]	; (80055e4 <init_NFC_tag+0x10c>)
 8005546:	f001 fa65 	bl	8006a14 <iprintf>

  printf("--- I2C security ---\n");
 800554a:	4827      	ldr	r0, [pc, #156]	; (80055e8 <init_NFC_tag+0x110>)
 800554c:	f001 fad6 	bl	8006afc <puts>
  status = NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <init_NFC_tag+0xe8>)
 8005552:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005556:	2000      	movs	r0, #0
 8005558:	f7fc f8d6 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
 800555c:	4602      	mov	r2, r0
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <init_NFC_tag+0x114>)
 8005560:	601a      	str	r2, [r3, #0]
  printf("Status of PresentI2CPassword: %ld\n\n", status);
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <init_NFC_tag+0x114>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	4821      	ldr	r0, [pc, #132]	; (80055f0 <init_NFC_tag+0x118>)
 800556a:	f001 fa53 	bl	8006a14 <iprintf>

  if (reset) {
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d020      	beq.n	80055b6 <init_NFC_tag+0xde>
    printf("--- EEPROM zones ---\n");
 8005574:	481f      	ldr	r0, [pc, #124]	; (80055f4 <init_NFC_tag+0x11c>)
 8005576:	f001 fac1 	bl	8006afc <puts>
    status = NFC04A1_NFCTAG_CreateUserZone(0, 32*8, 31*8+4, 4, 0);
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2304      	movs	r3, #4
 8005580:	22fc      	movs	r2, #252	; 0xfc
 8005582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005586:	2000      	movs	r0, #0
 8005588:	f7fc f8e6 	bl	8001758 <NFC04A1_NFCTAG_CreateUserZone>
 800558c:	4602      	mov	r2, r0
 800558e:	4b17      	ldr	r3, [pc, #92]	; (80055ec <init_NFC_tag+0x114>)
 8005590:	601a      	str	r2, [r3, #0]
    printf("Status of CreateUserZone: %ld\n\n", status);
 8005592:	4b16      	ldr	r3, [pc, #88]	; (80055ec <init_NFC_tag+0x114>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4817      	ldr	r0, [pc, #92]	; (80055f8 <init_NFC_tag+0x120>)
 800559a:	f001 fa3b 	bl	8006a14 <iprintf>

    printf("--- Batteries reset ---\n");
 800559e:	4817      	ldr	r0, [pc, #92]	; (80055fc <init_NFC_tag+0x124>)
 80055a0:	f001 faac 	bl	8006afc <puts>
    write_data_area3(0);
 80055a4:	2000      	movs	r0, #0
 80055a6:	f000 f8cb 	bl	8005740 <write_data_area3>
    sno_l = 0;
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <init_NFC_tag+0x128>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
    printf("Serial number reset to 0\n");
 80055b0:	4814      	ldr	r0, [pc, #80]	; (8005604 <init_NFC_tag+0x12c>)
 80055b2:	f001 faa3 	bl	8006afc <puts>
  }

}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000e00 	.word	0x20000e00
 80055c4:	08007df0 	.word	0x08007df0
 80055c8:	20000df4 	.word	0x20000df4
 80055cc:	08007dfc 	.word	0x08007dfc
 80055d0:	08007e0c 	.word	0x08007e0c
 80055d4:	08007e14 	.word	0x08007e14
 80055d8:	20000dfc 	.word	0x20000dfc
 80055dc:	08007e20 	.word	0x08007e20
 80055e0:	20000df0 	.word	0x20000df0
 80055e4:	08007e34 	.word	0x08007e34
 80055e8:	08007e4c 	.word	0x08007e4c
 80055ec:	20000e08 	.word	0x20000e08
 80055f0:	08007e64 	.word	0x08007e64
 80055f4:	08007e88 	.word	0x08007e88
 80055f8:	08007ea0 	.word	0x08007ea0
 80055fc:	08007ec0 	.word	0x08007ec0
 8005600:	2000011c 	.word	0x2000011c
 8005604:	08007ed8 	.word	0x08007ed8

08005608 <URI_write>:

/**
 * Write an URI to Area 1
 */
void URI_write(char identifier, char *pUri) {
 8005608:	b580      	push	{r7, lr}
 800560a:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 800560e:	af00      	add	r7, sp, #0
 8005610:	4602      	mov	r2, r0
 8005612:	463b      	mov	r3, r7
 8005614:	6019      	str	r1, [r3, #0]
 8005616:	1dfb      	adds	r3, r7, #7
 8005618:	701a      	strb	r2, [r3, #0]

  sURI_Info URI;

  switch(identifier) {
 800561a:	1dfb      	adds	r3, r7, #7
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b33      	cmp	r3, #51	; 0x33
 8005620:	d002      	beq.n	8005628 <URI_write+0x20>
 8005622:	2b34      	cmp	r3, #52	; 0x34
 8005624:	d008      	beq.n	8005638 <URI_write+0x30>
      break;
    case '4':
      strcpy( URI.protocol, URI_ID_0x04_STRING);
      break;
    default:
      break;
 8005626:	e00e      	b.n	8005646 <URI_write+0x3e>
      strcpy( URI.protocol, URI_ID_0x03_STRING);
 8005628:	f107 0308 	add.w	r3, r7, #8
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <URI_write+0x7c>)
 800562e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005632:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8005636:	e006      	b.n	8005646 <URI_write+0x3e>
      strcpy( URI.protocol, URI_ID_0x04_STRING);
 8005638:	f107 0308 	add.w	r3, r7, #8
 800563c:	4a12      	ldr	r2, [pc, #72]	; (8005688 <URI_write+0x80>)
 800563e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005640:	c303      	stmia	r3!, {r0, r1}
 8005642:	701a      	strb	r2, [r3, #0]
      break;
 8005644:	bf00      	nop
  }

  strcpy(URI.URI_Message, pUri);
 8005646:	463b      	mov	r3, r7
 8005648:	f107 0208 	add.w	r2, r7, #8
 800564c:	3250      	adds	r2, #80	; 0x50
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	4610      	mov	r0, r2
 8005652:	f001 fa7b 	bl	8006b4c <strcpy>
  strcpy(URI.Information, "\0" );
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	2200      	movs	r2, #0
 800565c:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0

  /* Write NDEF to EEPROM */
  HAL_Delay(5);
 8005660:	2005      	movs	r0, #5
 8005662:	f7fc f953 	bl	800190c <HAL_Delay>
  while( NDEF_WriteURI( &URI ) != NDEF_OK );
 8005666:	bf00      	nop
 8005668:	f107 0308 	add.w	r3, r7, #8
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff faad 	bl	8004bcc <NDEF_WriteURI>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f7      	bne.n	8005668 <URI_write+0x60>
}
 8005678:	bf00      	nop
 800567a:	f507 775e 	add.w	r7, r7, #888	; 0x378
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	08007ef4 	.word	0x08007ef4
 8005688:	08007f00 	.word	0x08007f00

0800568c <write_data_area2>:
}

/**
 * Write a base URL to Area 2 (256 - 4 bytes length)
 */
void write_data_area2(uint8_t *pData, uint8_t len) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <write_data_area2+0x4c>)
 800569a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800569e:	2000      	movs	r0, #0
 80056a0:	f7fc f832 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
  HAL_Delay(50);
 80056a4:	2032      	movs	r0, #50	; 0x32
 80056a6:	f7fc f931 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_WriteData(0, &len, 256, 1);
 80056aa:	1cf9      	adds	r1, r7, #3
 80056ac:	2301      	movs	r3, #1
 80056ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b2:	2000      	movs	r0, #0
 80056b4:	f7fb ffde 	bl	8001674 <NFC04A1_NFCTAG_WriteData>
  HAL_Delay(50);
 80056b8:	2032      	movs	r0, #50	; 0x32
 80056ba:	f7fc f927 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_WriteData(0, pData, 256+1, len);
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f240 1201 	movw	r2, #257	; 0x101
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	2000      	movs	r0, #0
 80056ca:	f7fb ffd3 	bl	8001674 <NFC04A1_NFCTAG_WriteData>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000e00 	.word	0x20000e00

080056dc <read_data_area2>:

/**
 * Read a base URL from Area 2 (256 - 4 bytes length)
 */
uint8_t read_data_area2(uint8_t *pData) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint8_t len;
  NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 80056e4:	4b13      	ldr	r3, [pc, #76]	; (8005734 <read_data_area2+0x58>)
 80056e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80056ea:	2000      	movs	r0, #0
 80056ec:	f7fc f80c 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
  HAL_Delay(50);
 80056f0:	2032      	movs	r0, #50	; 0x32
 80056f2:	f7fc f90b 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_ReadData(0, &len, 256, 1);
 80056f6:	f107 010f 	add.w	r1, r7, #15
 80056fa:	2301      	movs	r3, #1
 80056fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005700:	2000      	movs	r0, #0
 8005702:	f7fb ff93 	bl	800162c <NFC04A1_NFCTAG_ReadData>
  HAL_Delay(50);
 8005706:	2032      	movs	r0, #50	; 0x32
 8005708:	f7fc f900 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_ReadData(0, pData, 256+1, len);
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f240 1201 	movw	r2, #257	; 0x101
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	2000      	movs	r0, #0
 8005718:	f7fb ff88 	bl	800162c <NFC04A1_NFCTAG_ReadData>

  printf("--- Area2 data ---\n");
 800571c:	4806      	ldr	r0, [pc, #24]	; (8005738 <read_data_area2+0x5c>)
 800571e:	f001 f9ed 	bl	8006afc <puts>
  printf("Data: %s\n\n", pData);
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4805      	ldr	r0, [pc, #20]	; (800573c <read_data_area2+0x60>)
 8005726:	f001 f975 	bl	8006a14 <iprintf>

  return len;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000e00 	.word	0x20000e00
 8005738:	08007f0c 	.word	0x08007f0c
 800573c:	08007f20 	.word	0x08007f20

08005740 <write_data_area3>:

/**
 * Write a serial number to Area 3 (uint32_t: 4bytes length)
 */
void write_data_area3(uint32_t sno_h) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <write_data_area3+0x30>)
 800574a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800574e:	2000      	movs	r0, #0
 8005750:	f7fb ffda 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
  HAL_Delay(50);
 8005754:	2032      	movs	r0, #50	; 0x32
 8005756:	f7fc f8d9 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_WriteData(0, (uint8_t *)&sno_h, 508, 4);
 800575a:	1d39      	adds	r1, r7, #4
 800575c:	2304      	movs	r3, #4
 800575e:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8005762:	2000      	movs	r0, #0
 8005764:	f7fb ff86 	bl	8001674 <NFC04A1_NFCTAG_WriteData>
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000e00 	.word	0x20000e00

08005774 <read_data_area3>:

/**
 * Read a serial number from Area 3 (uint32_t: 4bytes length)
 */
uint32_t read_data_area3(void) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
  uint32_t data;
  NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <read_data_area3+0x30>)
 800577c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005780:	2000      	movs	r0, #0
 8005782:	f7fb ffc1 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
  HAL_Delay(50);
 8005786:	2032      	movs	r0, #50	; 0x32
 8005788:	f7fc f8c0 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_ReadData(0, (uint8_t *)&data, 508, 4);
 800578c:	1d39      	adds	r1, r7, #4
 800578e:	2304      	movs	r3, #4
 8005790:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8005794:	2000      	movs	r0, #0
 8005796:	f7fb ff49 	bl	800162c <NFC04A1_NFCTAG_ReadData>
  return data;
 800579a:	687b      	ldr	r3, [r7, #4]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000e00 	.word	0x20000e00

080057a8 <generate_URI_with_serial_number>:

/**
 * Write URL with a serial number to NFC tag
 */
void generate_URI_with_serial_number(char identifier, char *pUri, char *pData, bool increment) {
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b0cb      	sub	sp, #300	; 0x12c
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4604      	mov	r4, r0
 80057b0:	f107 0008 	add.w	r0, r7, #8
 80057b4:	6001      	str	r1, [r0, #0]
 80057b6:	1d39      	adds	r1, r7, #4
 80057b8:	600a      	str	r2, [r1, #0]
 80057ba:	4619      	mov	r1, r3
 80057bc:	f107 030f 	add.w	r3, r7, #15
 80057c0:	4622      	mov	r2, r4
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	f107 030e 	add.w	r3, r7, #14
 80057c8:	460a      	mov	r2, r1
 80057ca:	701a      	strb	r2, [r3, #0]

  char buf[256] = { 0 };
 80057cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d6:	461a      	mov	r2, r3
 80057d8:	2100      	movs	r1, #0
 80057da:	f001 f913 	bl	8006a04 <memset>
  int len;

  // Serial number: the_number_of_(re)starts(sno_h) * 1000000 + counter(sno_l)
  char sno[16] = { 0 };
 80057de:	f107 0314 	add.w	r3, r7, #20
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	6093      	str	r3, [r2, #8]
 80057ec:	60d3      	str	r3, [r2, #12]

  // Update the number of (re)starts
  if (sno_l == 0) {
 80057ee:	4b69      	ldr	r3, [pc, #420]	; (8005994 <generate_URI_with_serial_number+0x1ec>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10e      	bne.n	8005814 <generate_URI_with_serial_number+0x6c>
    sno_h = read_data_area3();
 80057f6:	f7ff ffbd 	bl	8005774 <read_data_area3>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b66      	ldr	r3, [pc, #408]	; (8005998 <generate_URI_with_serial_number+0x1f0>)
 80057fe:	601a      	str	r2, [r3, #0]
    sno_h++;
 8005800:	4b65      	ldr	r3, [pc, #404]	; (8005998 <generate_URI_with_serial_number+0x1f0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a64      	ldr	r2, [pc, #400]	; (8005998 <generate_URI_with_serial_number+0x1f0>)
 8005808:	6013      	str	r3, [r2, #0]
    write_data_area3(sno_h);
 800580a:	4b63      	ldr	r3, [pc, #396]	; (8005998 <generate_URI_with_serial_number+0x1f0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff ff96 	bl	8005740 <write_data_area3>
  }

  // assuming that the max numbers of EEPROM write is 1000000.
  sprintf(sno, "%lu", sno_h * 10000000 + sno_l);
 8005814:	4b60      	ldr	r3, [pc, #384]	; (8005998 <generate_URI_with_serial_number+0x1f0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a60      	ldr	r2, [pc, #384]	; (800599c <generate_URI_with_serial_number+0x1f4>)
 800581a:	fb02 f203 	mul.w	r2, r2, r3
 800581e:	4b5d      	ldr	r3, [pc, #372]	; (8005994 <generate_URI_with_serial_number+0x1ec>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	441a      	add	r2, r3
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	495d      	ldr	r1, [pc, #372]	; (80059a0 <generate_URI_with_serial_number+0x1f8>)
 800582a:	4618      	mov	r0, r3
 800582c:	f001 f96e 	bl	8006b0c <siprintf>

  //--- URL generation start ---
  strcpy(buf, pUri);
 8005830:	f107 0308 	add.w	r3, r7, #8
 8005834:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005838:	6819      	ldr	r1, [r3, #0]
 800583a:	4610      	mov	r0, r2
 800583c:	f001 f986 	bl	8006b4c <strcpy>
  len = strlen(pUri);
 8005840:	f107 0308 	add.w	r3, r7, #8
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	f7fa fcd5 	bl	80001f4 <strlen>
 800584a:	4603      	mov	r3, r0
 800584c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

  if (pData != NULL) {
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d040      	beq.n	80058da <generate_URI_with_serial_number+0x132>
    buf[len++] = '&';
 8005858:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005862:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005866:	2126      	movs	r1, #38	; 0x26
 8005868:	54d1      	strb	r1, [r2, r3]
    buf[len++] = 'd';
 800586a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005874:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005878:	2164      	movs	r1, #100	; 0x64
 800587a:	54d1      	strb	r1, [r2, r3]
    buf[len++] = 'a';
 800587c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005886:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800588a:	2161      	movs	r1, #97	; 0x61
 800588c:	54d1      	strb	r1, [r2, r3]
    buf[len++] = 't';
 800588e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005898:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800589c:	2174      	movs	r1, #116	; 0x74
 800589e:	54d1      	strb	r1, [r2, r3]
    buf[len++] = '=';
 80058a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80058aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058ae:	213d      	movs	r1, #61	; 0x3d
 80058b0:	54d1      	strb	r1, [r2, r3]
    strcpy(buf+len, pData);
 80058b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058ba:	441a      	add	r2, r3
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	6819      	ldr	r1, [r3, #0]
 80058c0:	4610      	mov	r0, r2
 80058c2:	f001 f943 	bl	8006b4c <strcpy>
    len = len + strlen(pData);
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	f7fa fc93 	bl	80001f4 <strlen>
 80058ce:	4602      	mov	r2, r0
 80058d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058d4:	4413      	add	r3, r2
 80058d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  }

  buf[len++] = '&';
 80058da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80058e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058e8:	2126      	movs	r1, #38	; 0x26
 80058ea:	54d1      	strb	r1, [r2, r3]
  buf[len++] = 's';
 80058ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80058f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058fa:	2173      	movs	r1, #115	; 0x73
 80058fc:	54d1      	strb	r1, [r2, r3]
  buf[len++] = 'n';
 80058fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005908:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800590c:	216e      	movs	r1, #110	; 0x6e
 800590e:	54d1      	strb	r1, [r2, r3]
  buf[len++] = 'o';
 8005910:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800591a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800591e:	216f      	movs	r1, #111	; 0x6f
 8005920:	54d1      	strb	r1, [r2, r3]
  buf[len++] = '=';
 8005922:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800592c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005930:	213d      	movs	r1, #61	; 0x3d
 8005932:	54d1      	strb	r1, [r2, r3]
  strcpy(buf+len, sno);
 8005934:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005938:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800593c:	4413      	add	r3, r2
 800593e:	f107 0214 	add.w	r2, r7, #20
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f901 	bl	8006b4c <strcpy>
  //--- URL generation finish ---

  printf("sno: %s\n", sno);
 800594a:	f107 0314 	add.w	r3, r7, #20
 800594e:	4619      	mov	r1, r3
 8005950:	4814      	ldr	r0, [pc, #80]	; (80059a4 <generate_URI_with_serial_number+0x1fc>)
 8005952:	f001 f85f 	bl	8006a14 <iprintf>
  printf("uri w/ sno: %s\n", buf);
 8005956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800595a:	4619      	mov	r1, r3
 800595c:	4812      	ldr	r0, [pc, #72]	; (80059a8 <generate_URI_with_serial_number+0x200>)
 800595e:	f001 f859 	bl	8006a14 <iprintf>

  URI_write(identifier, buf);
 8005962:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005966:	f107 030f 	add.w	r3, r7, #15
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fe4a 	bl	8005608 <URI_write>

  if (increment) ++sno_l;
 8005974:	f107 030e 	add.w	r3, r7, #14
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <generate_URI_with_serial_number+0x1e0>
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <generate_URI_with_serial_number+0x1ec>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a03      	ldr	r2, [pc, #12]	; (8005994 <generate_URI_with_serial_number+0x1ec>)
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	bf00      	nop
 800598a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800598e:	46bd      	mov	sp, r7
 8005990:	bd90      	pop	{r4, r7, pc}
 8005992:	bf00      	nop
 8005994:	2000011c 	.word	0x2000011c
 8005998:	20000120 	.word	0x20000120
 800599c:	00989680 	.word	0x00989680
 80059a0:	08007f2c 	.word	0x08007f2c
 80059a4:	08007f30 	.word	0x08007f30
 80059a8:	08007f3c 	.word	0x08007f3c

080059ac <lock_nfc>:

/**
 * Lock NFC tag from RF access
 */
void lock_nfc(void) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
  ST25DV_RF_PROT_ZONE RfProtZone;

  NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <lock_nfc+0x5c>)
 80059b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7fb fea5 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
  HAL_Delay(50);
 80059be:	2032      	movs	r0, #50	; 0x32
 80059c0:	f7fb ffa4 	bl	800190c <HAL_Delay>
  RfProtZone.PasswdCtrl = ST25DV_NOT_PROTECTED;
 80059c4:	2300      	movs	r3, #0
 80059c6:	713b      	strb	r3, [r7, #4]
  RfProtZone.RWprotection = ST25DV_WRITE_PROT;
 80059c8:	2301      	movs	r3, #1
 80059ca:	717b      	strb	r3, [r7, #5]
  NFC04A1_NFCTAG_WriteRFZxSS(0, ST25DV_PROT_ZONE1, RfProtZone);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	2100      	movs	r1, #0
 80059d0:	2000      	movs	r0, #0
 80059d2:	f7fb fead 	bl	8001730 <NFC04A1_NFCTAG_WriteRFZxSS>

  HAL_Delay(50);
 80059d6:	2032      	movs	r0, #50	; 0x32
 80059d8:	f7fb ff98 	bl	800190c <HAL_Delay>
  RfProtZone.PasswdCtrl = ST25DV_NOT_PROTECTED;
 80059dc:	2300      	movs	r3, #0
 80059de:	713b      	strb	r3, [r7, #4]
  RfProtZone.RWprotection = ST25DV_READWRITE_PROT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	717b      	strb	r3, [r7, #5]
  NFC04A1_NFCTAG_WriteRFZxSS(0, ST25DV_PROT_ZONE1, RfProtZone);
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	2100      	movs	r1, #0
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7fb fea1 	bl	8001730 <NFC04A1_NFCTAG_WriteRFZxSS>

  HAL_Delay(50);
 80059ee:	2032      	movs	r0, #50	; 0x32
 80059f0:	f7fb ff8c 	bl	800190c <HAL_Delay>
  NFC04A1_NFCTAG_WriteRFZxSS(0, ST25DV_PROT_ZONE3, RfProtZone);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	2102      	movs	r1, #2
 80059f8:	2000      	movs	r0, #0
 80059fa:	f7fb fe99 	bl	8001730 <NFC04A1_NFCTAG_WriteRFZxSS>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000e00 	.word	0x20000e00

08005a0c <unlock_nfc>:

/**
 * Unlock NFC tag from RF access for Area 1 only
 */
void unlock_nfc(void) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  ST25DV_RF_PROT_ZONE RfProtZone;

  NFC04A1_NFCTAG_PresentI2CPassword(0, passwd);
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <unlock_nfc+0x34>)
 8005a14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f7fb fe75 	bl	8001708 <NFC04A1_NFCTAG_PresentI2CPassword>
  HAL_Delay(50);
 8005a1e:	2032      	movs	r0, #50	; 0x32
 8005a20:	f7fb ff74 	bl	800190c <HAL_Delay>
  RfProtZone.PasswdCtrl = ST25DV_NOT_PROTECTED;
 8005a24:	2300      	movs	r3, #0
 8005a26:	713b      	strb	r3, [r7, #4]
  RfProtZone.RWprotection = ST25DV_NO_PROT;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	717b      	strb	r3, [r7, #5]
  NFC04A1_NFCTAG_WriteRFZxSS(0, ST25DV_PROT_ZONE1, RfProtZone);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	2100      	movs	r1, #0
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7fb fe7d 	bl	8001730 <NFC04A1_NFCTAG_WriteRFZxSS>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000e00 	.word	0x20000e00

08005a44 <MX_NFC_Init>:
/* Private functions ---------------------------------------------------------*/
void MX_NFC4_NDEF_URI_Init(void);
void MX_NFC4_NDEF_URI_Process(void);

void MX_NFC_Init(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NFC4_Library_Init_PreTreatment */
  
  /* USER CODE END NFC4_Library_Init_PreTreatment */

  /* Initialize the peripherals and the NFC4 components */
  MX_NFC4_NDEF_URI_Init();
 8005a48:	f000 f808 	bl	8005a5c <MX_NFC4_NDEF_URI_Init>
  /* USER CODE END SV */
  
  /* USER CODE BEGIN NFC4_Library_Init_PostTreatment */
  
  /* USER CODE END NFC4_Library_Init_PostTreatment */
}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <MX_NFC_Process>:
/*
 * LM background task
 */
void MX_NFC_Process(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NFC4_Library_Process */
  MX_NFC4_NDEF_URI_Process();
 8005a54:	f000 f88a 	bl	8005b6c <MX_NFC4_NDEF_URI_Process>

  /* USER CODE END NFC4_Library_Process */
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <MX_NFC4_NDEF_URI_Init>:

void MX_NFC4_NDEF_URI_Init(void)
{
 8005a5c:	b5b0      	push	{r4, r5, r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
	  /******************************************************************************/
  /* Configuration of X-NUCLEO-NFC02A1                                          */
  /******************************************************************************/
  /* Init of the Leds on X-NUCLEO-NFC04A1 board */
  NFC04A1_LED_Init(GREEN_LED );
 8005a60:	2000      	movs	r0, #0
 8005a62:	f7fb fd01 	bl	8001468 <NFC04A1_LED_Init>
  NFC04A1_LED_Init(BLUE_LED );
 8005a66:	2001      	movs	r0, #1
 8005a68:	f7fb fcfe 	bl	8001468 <NFC04A1_LED_Init>
  NFC04A1_LED_Init(YELLOW_LED );
 8005a6c:	2002      	movs	r0, #2
 8005a6e:	f7fb fcfb 	bl	8001468 <NFC04A1_LED_Init>
  NFC04A1_LED_On( GREEN_LED );
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7fb fd1a 	bl	80014ac <NFC04A1_LED_On>
  HAL_Delay( 300 );
 8005a78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a7c:	f7fb ff46 	bl	800190c <HAL_Delay>
  NFC04A1_LED_On( BLUE_LED );
 8005a80:	2001      	movs	r0, #1
 8005a82:	f7fb fd13 	bl	80014ac <NFC04A1_LED_On>
  HAL_Delay( 300 );
 8005a86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a8a:	f7fb ff3f 	bl	800190c <HAL_Delay>
  NFC04A1_LED_On( YELLOW_LED );
 8005a8e:	2002      	movs	r0, #2
 8005a90:	f7fb fd0c 	bl	80014ac <NFC04A1_LED_On>
  HAL_Delay( 300 );
 8005a94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a98:	f7fb ff38 	bl	800190c <HAL_Delay>
  
  /* Init ST25DV driver */
  while( NFC04A1_NFCTAG_Init(NFC04A1_NFCTAG_INSTANCE) != NFCTAG_OK );
 8005a9c:	bf00      	nop
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f7fb fd72 	bl	8001588 <NFC04A1_NFCTAG_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f9      	bne.n	8005a9e <MX_NFC4_NDEF_URI_Init+0x42>

  /* Reset Mailbox enable to allow write to EEPROM */
  NFC04A1_NFCTAG_ResetMBEN_Dyn(NFC04A1_NFCTAG_INSTANCE);
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f7fb feae 	bl	800180c <NFC04A1_NFCTAG_ResetMBEN_Dyn>

  NfcTag_SelectProtocol(NFCTAG_TYPE5);
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f7ff fa57 	bl	8004f64 <NfcTag_SelectProtocol>

  /* Check if no NDEF detected, init mem in Tag Type 5 */
  if( NfcType5_NDEFDetection( ) != NDEF_OK )
 8005ab6:	f7ff fc59 	bl	800536c <NfcType5_NDEFDetection>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d011      	beq.n	8005ae4 <MX_NFC4_NDEF_URI_Init+0x88>
  {
    CCFileStruct.MagicNumber = NFCT5_MAGICNUMBER_E1_CCFILE;
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <MX_NFC4_NDEF_URI_Init+0xfc>)
 8005ac2:	22e1      	movs	r2, #225	; 0xe1
 8005ac4:	701a      	strb	r2, [r3, #0]
    CCFileStruct.Version = NFCT5_VERSION_V1_0;
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <MX_NFC4_NDEF_URI_Init+0xfc>)
 8005ac8:	2240      	movs	r2, #64	; 0x40
 8005aca:	705a      	strb	r2, [r3, #1]
    CCFileStruct.MemorySize = ( ST25DV_MAX_SIZE / 8 ) & 0xFF;
 8005acc:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <MX_NFC4_NDEF_URI_Init+0xfc>)
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	709a      	strb	r2, [r3, #2]
    CCFileStruct.TT5Tag = 0x05;
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <MX_NFC4_NDEF_URI_Init+0xfc>)
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	70da      	strb	r2, [r3, #3]
    /* Init of the Type Tag 5 component (M24LR) */
    while( NfcType5_TT5Init( ) != NFCTAG_OK );
 8005ad8:	bf00      	nop
 8005ada:	f7ff fbe7 	bl	80052ac <NfcType5_TT5Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1fa      	bne.n	8005ada <MX_NFC4_NDEF_URI_Init+0x7e>
  }

  /* Init done */
  NFC04A1_LED_Off( GREEN_LED );
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7fb fcfb 	bl	80014e0 <NFC04A1_LED_Off>
  HAL_Delay( 300 );
 8005aea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005aee:	f7fb ff0d 	bl	800190c <HAL_Delay>
  NFC04A1_LED_Off( BLUE_LED );
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7fb fcf4 	bl	80014e0 <NFC04A1_LED_Off>
  HAL_Delay( 300 );
 8005af8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005afc:	f7fb ff06 	bl	800190c <HAL_Delay>
  NFC04A1_LED_Off( YELLOW_LED );
 8005b00:	2002      	movs	r0, #2
 8005b02:	f7fb fced 	bl	80014e0 <NFC04A1_LED_Off>
  HAL_Delay( 300 );
 8005b06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b0a:	f7fb feff 	bl	800190c <HAL_Delay>
  
  /* Prepare URI NDEF message content */
  strcpy( URI.protocol,URI_ID_0x01_STRING );
 8005b0e:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <MX_NFC4_NDEF_URI_Init+0x100>)
 8005b10:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <MX_NFC4_NDEF_URI_Init+0x104>)
 8005b12:	4614      	mov	r4, r2
 8005b14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b16:	6020      	str	r0, [r4, #0]
 8005b18:	6061      	str	r1, [r4, #4]
 8005b1a:	60a2      	str	r2, [r4, #8]
  strcpy( URI.URI_Message,"st.com/st25-demo" );
 8005b1c:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <MX_NFC4_NDEF_URI_Init+0x108>)
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <MX_NFC4_NDEF_URI_Init+0x10c>)
 8005b20:	4615      	mov	r5, r2
 8005b22:	461c      	mov	r4, r3
 8005b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b26:	6028      	str	r0, [r5, #0]
 8005b28:	6069      	str	r1, [r5, #4]
 8005b2a:	60aa      	str	r2, [r5, #8]
 8005b2c:	60eb      	str	r3, [r5, #12]
 8005b2e:	7823      	ldrb	r3, [r4, #0]
 8005b30:	742b      	strb	r3, [r5, #16]
  strcpy( URI.Information,"\0" );
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <MX_NFC4_NDEF_URI_Init+0x100>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  
  /* Write NDEF to EEPROM */
  HAL_Delay(5);
 8005b3a:	2005      	movs	r0, #5
 8005b3c:	f7fb fee6 	bl	800190c <HAL_Delay>
  while( NDEF_WriteURI( &URI ) != NDEF_OK );
 8005b40:	bf00      	nop
 8005b42:	4806      	ldr	r0, [pc, #24]	; (8005b5c <MX_NFC4_NDEF_URI_Init+0x100>)
 8005b44:	f7ff f842 	bl	8004bcc <NDEF_WriteURI>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f9      	bne.n	8005b42 <MX_NFC4_NDEF_URI_Init+0xe6>
  
  /* Set the LED3 on to indicate Programing done */
  NFC04A1_LED_On( YELLOW_LED );
 8005b4e:	2002      	movs	r0, #2
 8005b50:	f7fb fcac 	bl	80014ac <NFC04A1_LED_On>

}
 8005b54:	bf00      	nop
 8005b56:	bdb0      	pop	{r4, r5, r7, pc}
 8005b58:	20000de0 	.word	0x20000de0
 8005b5c:	20000e0c 	.word	0x20000e0c
 8005b60:	08007f4c 	.word	0x08007f4c
 8005b64:	20000e5c 	.word	0x20000e5c
 8005b68:	08007f5c 	.word	0x08007f5c

08005b6c <MX_NFC4_NDEF_URI_Process>:
/**
  * @brief  Process of the NDEF_URI application
  * @retval None
  */
void MX_NFC4_NDEF_URI_Process(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
	
}
 8005b70:	bf00      	nop
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b82:	f107 0314 	add.w	r3, r7, #20
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	4b45      	ldr	r3, [pc, #276]	; (8005cac <MX_GPIO_Init+0x130>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	4a44      	ldr	r2, [pc, #272]	; (8005cac <MX_GPIO_Init+0x130>)
 8005b9c:	f043 0304 	orr.w	r3, r3, #4
 8005ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba2:	4b42      	ldr	r3, [pc, #264]	; (8005cac <MX_GPIO_Init+0x130>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	4a3d      	ldr	r2, [pc, #244]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bbe:	4b3b      	ldr	r3, [pc, #236]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	4a36      	ldr	r2, [pc, #216]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bda:	4b34      	ldr	r3, [pc, #208]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	4b30      	ldr	r3, [pc, #192]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <MX_GPIO_Init+0x130>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8005c02:	2200      	movs	r2, #0
 8005c04:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8005c08:	4829      	ldr	r0, [pc, #164]	; (8005cb0 <MX_GPIO_Init+0x134>)
 8005c0a:	f7fc fa99 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2130      	movs	r1, #48	; 0x30
 8005c12:	4828      	ldr	r0, [pc, #160]	; (8005cb4 <MX_GPIO_Init+0x138>)
 8005c14:	f7fc fa94 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <MX_GPIO_Init+0x13c>)
 8005c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4823      	ldr	r0, [pc, #140]	; (8005cbc <MX_GPIO_Init+0x140>)
 8005c2e:	f7fc f80b 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8005c32:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8005c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c40:	2300      	movs	r3, #0
 8005c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4819      	ldr	r0, [pc, #100]	; (8005cb0 <MX_GPIO_Init+0x134>)
 8005c4c:	f7fb fffc 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPO_Pin;
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c54:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <MX_GPIO_Init+0x13c>)
 8005c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPO_GPIO_Port, &GPIO_InitStruct);
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	4619      	mov	r1, r3
 8005c62:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <MX_GPIO_Init+0x134>)
 8005c64:	f7fb fff0 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005c68:	2330      	movs	r3, #48	; 0x30
 8005c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c74:	2300      	movs	r3, #0
 8005c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	480d      	ldr	r0, [pc, #52]	; (8005cb4 <MX_GPIO_Init+0x138>)
 8005c80:	f7fb ffe2 	bl	8001c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005c84:	2200      	movs	r2, #0
 8005c86:	2100      	movs	r1, #0
 8005c88:	2017      	movs	r0, #23
 8005c8a:	f7fb ff3c 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005c8e:	2017      	movs	r0, #23
 8005c90:	f7fb ff55 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2100      	movs	r1, #0
 8005c98:	2028      	movs	r0, #40	; 0x28
 8005c9a:	f7fb ff34 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005c9e:	2028      	movs	r0, #40	; 0x28
 8005ca0:	f7fb ff4d 	bl	8001b3e <HAL_NVIC_EnableIRQ>

}
 8005ca4:	bf00      	nop
 8005ca6:	3728      	adds	r7, #40	; 0x28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	10210000 	.word	0x10210000
 8005cbc:	40020800 	.word	0x40020800

08005cc0 <NDEF_Wrapper_ReadData>:
  * @param  offset: Address to read
  * @param  Size : Size in bytes of the value to be read
  * @retval NDEF_OK if success, NDEF_ERROR in case of failure
  */
int32_t NDEF_Wrapper_ReadData(uint8_t* pData, uint32_t offset, uint32_t length )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  if(NFC04A1_NFCTAG_ReadData(NFC04A1_NFCTAG_INSTANCE, pData, offset, length ) != NFCTAG_OK)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	f7fb fca8 	bl	800162c <NFC04A1_NFCTAG_ReadData>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <NDEF_Wrapper_ReadData+0x26>
    return NDEF_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <NDEF_Wrapper_ReadData+0x28>
  return NDEF_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <NDEF_Wrapper_WriteData>:
  * @param  offset: Address to write
  * @param  Size : Number of bytes to be written
  * @retval NDEF_OK if success, NDEF_ERROR in case of failure
  */
int32_t NDEF_Wrapper_WriteData(const uint8_t* pData, uint32_t offset, uint32_t length )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  if(NFC04A1_NFCTAG_WriteData(NFC04A1_NFCTAG_INSTANCE, pData, offset, length ) != NFCTAG_OK)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	2000      	movs	r0, #0
 8005d08:	f7fb fcb4 	bl	8001674 <NFC04A1_NFCTAG_WriteData>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <NDEF_Wrapper_WriteData+0x26>
    return NDEF_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <NDEF_Wrapper_WriteData+0x28>
  return NDEF_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <NDEF_Wrapper_GetMemorySize>:
/**
  * @brief  Compute the NFCTAG Memory Size.
  * @return uint32_t Memory size in bytes.
  */
uint32_t NDEF_Wrapper_GetMemorySize(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  return NFC04A1_NFCTAG_GetByteSize(NFC04A1_NFCTAG_INSTANCE);
 8005d24:	2000      	movs	r0, #0
 8005d26:	f7fb fcc9 	bl	80016bc <NFC04A1_NFCTAG_GetByteSize>
 8005d2a:	4603      	mov	r3, r0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <extraProcess>:

/**
 * This function is called when RF field change has just been
 * detected.
 */
char* extraProcess() {
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  //  Extra processing to add additional data to the URI.
  /*
   * <<< Some processing here... >>>
   */
  return characteristics;
 8005d34:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <extraProcess+0x10>)
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000048 	.word	0x20000048

08005d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b0ca      	sub	sp, #296	; 0x128
 8005d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //uint8_t ITStatus;
  uint32_t tick_prev = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint32_t tick_current = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint32_t elapsed_time;
  system_status phase = STANDBY;
 8005d56:	2300      	movs	r3, #0
 8005d58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  char *pData;

  char base_url[BUFSIZE];

  // Notify BLE central of RF field change
  uint8_t RF_FIELD_CHANGED[] = "RF_FIELD_CHANGED";
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	4a87      	ldr	r2, [pc, #540]	; (8005f7c <main+0x238>)
 8005d60:	461c      	mov	r4, r3
 8005d62:	4615      	mov	r5, r2
 8005d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	7023      	strb	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d6c:	f7fb fd5c 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d70:	f000 f92c 	bl	8005fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d74:	f7ff ff02 	bl	8005b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005d78:	f000 fcfc 	bl	8006774 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8005d7c:	f000 fd24 	bl	80067c8 <MX_USART6_UART_Init>
  MX_NFC_Init();
 8005d80:	f7ff fe60 	bl	8005a44 <MX_NFC_Init>
  /* USER CODE BEGIN 2 */
  NFC04A1_LED_Off( YELLOW_LED );
 8005d84:	2002      	movs	r0, #2
 8005d86:	f7fb fbab 	bl	80014e0 <NFC04A1_LED_Off>

  NFC04A1_GPO_Init();
 8005d8a:	f7fb fbc3 	bl	8001514 <NFC04A1_GPO_Init>

  printf("///// START /////\n");
 8005d8e:	487c      	ldr	r0, [pc, #496]	; (8005f80 <main+0x23c>)
 8005d90:	f000 feb4 	bl	8006afc <puts>

  init_NFC_tag(false);
 8005d94:	2000      	movs	r0, #0
 8005d96:	f7ff fb9f 	bl	80054d8 <init_NFC_tag>
  lock_nfc();
 8005d9a:	f7ff fe07 	bl	80059ac <lock_nfc>

  // Read the base URL from Area 2 on EEPROM
  read_data_area2((uint8_t *)base_url);
 8005d9e:	f107 0314 	add.w	r3, r7, #20
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fc9a 	bl	80056dc <read_data_area2>

  // Command reception
  HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8005da8:	2201      	movs	r2, #1
 8005daa:	4976      	ldr	r1, [pc, #472]	; (8005f84 <main+0x240>)
 8005dac:	4876      	ldr	r0, [pc, #472]	; (8005f88 <main+0x244>)
 8005dae:	f7fe f857 	bl	8003e60 <HAL_UART_Receive_IT>

  // NFC04A1_NFCTAG_WriteRFMngt_Dyn(0, 0b00000001 );  // RF_DISABLED
  NFC04A1_NFCTAG_SetRFDisable_Dyn(0);
 8005db2:	2000      	movs	r0, #0
 8005db4:	f7fb fd0e 	bl	80017d4 <NFC04A1_NFCTAG_SetRFDisable_Dyn>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef SLEEP_ENABLED
    if (field_changed) {
 8005db8:	4b74      	ldr	r3, [pc, #464]	; (8005f8c <main+0x248>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d026      	beq.n	8005e10 <main+0xcc>
#endif
      if (phase == STANDBY) {
 8005dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d11f      	bne.n	8005e0a <main+0xc6>
        NFC04A1_LED_On( GREEN_LED );
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f7fb fb6e 	bl	80014ac <NFC04A1_LED_On>
        printf("PHASE 1: RF field change detected\n");
 8005dd0:	486f      	ldr	r0, [pc, #444]	; (8005f90 <main+0x24c>)
 8005dd2:	f000 fe93 	bl	8006afc <puts>
        notify(RF_FIELD_CHANGED, sizeof(RF_FIELD_CHANGED)-1);  // Notify the event to BLE entral
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	2110      	movs	r1, #16
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f9cc 	bl	8006178 <notify>
        pData = extraProcess();
 8005de0:	f7ff ffa6 	bl	8005d30 <extraProcess>
 8005de4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
        generate_URI_with_serial_number('4', (char *)base_url, (char *)pData, increment);
 8005de8:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <main+0x250>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f107 0114 	add.w	r1, r7, #20
 8005df2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005df6:	2034      	movs	r0, #52	; 0x34
 8005df8:	f7ff fcd6 	bl	80057a8 <generate_URI_with_serial_number>
        tick_prev = HAL_GetTick();
 8005dfc:	f7fb fd7a 	bl	80018f4 <HAL_GetTick>
 8005e00:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
        phase = PHASE1;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
      }
#ifndef SLEEP_ENABLED
      field_changed = false;
 8005e0a:	4b60      	ldr	r3, [pc, #384]	; (8005f8c <main+0x248>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
    }
#endif
    if (phase != STANDBY) {
 8005e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d056      	beq.n	8005ec6 <main+0x182>
       tick_current = HAL_GetTick();
 8005e18:	f7fb fd6c 	bl	80018f4 <HAL_GetTick>
 8005e1c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
       if (tick_prev > tick_current) {
 8005e20:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005e24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d907      	bls.n	8005e3c <main+0xf8>
          elapsed_time = tick_current - tick_prev;
 8005e2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005e30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e3a:	e007      	b.n	8005e4c <main+0x108>
       } else {
         elapsed_time = tick_current + (0xffffffff - tick_prev);
 8005e3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005e40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
       }
       if (phase == PHASE1 && elapsed_time > T1) {
 8005e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d113      	bne.n	8005e7c <main+0x138>
 8005e54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e58:	2b64      	cmp	r3, #100	; 0x64
 8005e5a:	d90f      	bls.n	8005e7c <main+0x138>
         // NFC04A1_NFCTAG_WriteRFMngt_Dyn(0, 0b00000000 );  // RF woken up
         NFC04A1_NFCTAG_ResetRFDisable_Dyn(0);
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f7fb fcc7 	bl	80017f0 <NFC04A1_NFCTAG_ResetRFDisable_Dyn>

         NFC04A1_LED_Off( GREEN_LED );
 8005e62:	2000      	movs	r0, #0
 8005e64:	f7fb fb3c 	bl	80014e0 <NFC04A1_LED_Off>
         NFC04A1_LED_On( BLUE_LED );
 8005e68:	2001      	movs	r0, #1
 8005e6a:	f7fb fb1f 	bl	80014ac <NFC04A1_LED_On>
         printf("PHASE 2: RF enabled to transfer URI\n");
 8005e6e:	484a      	ldr	r0, [pc, #296]	; (8005f98 <main+0x254>)
 8005e70:	f000 fe44 	bl	8006afc <puts>
         phase = PHASE2;
 8005e74:	2302      	movs	r3, #2
 8005e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8005e7a:	e024      	b.n	8005ec6 <main+0x182>
       /*
       } else if (phase == PHASE2 && elapsed_time <= T2) {
         printf("elapsed time: %ld\n", elapsed_time);
       */
       } else if (phase == PHASE2 && elapsed_time > T2) {
 8005e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d120      	bne.n	8005ec6 <main+0x182>
 8005e84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e88:	f640 421c 	movw	r2, #3100	; 0xc1c
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d91a      	bls.n	8005ec6 <main+0x182>
         printf("elapsed time: %ld\n", elapsed_time);
 8005e90:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005e94:	4841      	ldr	r0, [pc, #260]	; (8005f9c <main+0x258>)
 8005e96:	f000 fdbd 	bl	8006a14 <iprintf>
         //NFC04A1_NFCTAG_WriteRFMngt_Dyn(0, 0b00000001 );  // RF_DISABLED
         NFC04A1_NFCTAG_SetRFDisable_Dyn(0);
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f7fb fc9a 	bl	80017d4 <NFC04A1_NFCTAG_SetRFDisable_Dyn>
         NFC04A1_LED_Off( BLUE_LED );
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	f7fb fb1d 	bl	80014e0 <NFC04A1_LED_Off>
         NFC04A1_LED_On( YELLOW_LED );
 8005ea6:	2002      	movs	r0, #2
 8005ea8:	f7fb fb00 	bl	80014ac <NFC04A1_LED_On>
         printf("STANDBY: RF disabled\n\n");
 8005eac:	483c      	ldr	r0, [pc, #240]	; (8005fa0 <main+0x25c>)
 8005eae:	f000 fe25 	bl	8006afc <puts>
         phase = STANDBY;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
         HAL_Delay(T3);
 8005eb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ebc:	f7fb fd26 	bl	800190c <HAL_Delay>
         NFC04A1_LED_Off( YELLOW_LED );
 8005ec0:	2002      	movs	r0, #2
 8005ec2:	f7fb fb0d 	bl	80014e0 <NFC04A1_LED_Off>
#ifndef SLEEP_ENABLED
    }
#endif

    // Command parser
    if (command_received) {
 8005ec6:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <main+0x260>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d051      	beq.n	8005f74 <main+0x230>
      if (strcmp((char *)uart_rx_buf, ".r") == 0) {  // Reset NFC tag
 8005ed0:	4935      	ldr	r1, [pc, #212]	; (8005fa8 <main+0x264>)
 8005ed2:	4836      	ldr	r0, [pc, #216]	; (8005fac <main+0x268>)
 8005ed4:	f7fa f984 	bl	80001e0 <strcmp>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <main+0x1a8>
        printf("RESET...\n\n");
 8005ede:	4834      	ldr	r0, [pc, #208]	; (8005fb0 <main+0x26c>)
 8005ee0:	f000 fe0c 	bl	8006afc <puts>
        init_NFC_tag(true);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7ff faf7 	bl	80054d8 <init_NFC_tag>
 8005eea:	e040      	b.n	8005f6e <main+0x22a>
      } else if (strcmp((char *)uart_rx_buf, ".l") == 0) {
 8005eec:	4931      	ldr	r1, [pc, #196]	; (8005fb4 <main+0x270>)
 8005eee:	482f      	ldr	r0, [pc, #188]	; (8005fac <main+0x268>)
 8005ef0:	f7fa f976 	bl	80001e0 <strcmp>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <main+0x1c2>
        printf("LOCK NFC...\n\n");
 8005efa:	482f      	ldr	r0, [pc, #188]	; (8005fb8 <main+0x274>)
 8005efc:	f000 fdfe 	bl	8006afc <puts>
        lock_nfc();
 8005f00:	f7ff fd54 	bl	80059ac <lock_nfc>
 8005f04:	e033      	b.n	8005f6e <main+0x22a>
      } else if (strcmp((char *)uart_rx_buf, ".u") == 0) {
 8005f06:	492d      	ldr	r1, [pc, #180]	; (8005fbc <main+0x278>)
 8005f08:	4828      	ldr	r0, [pc, #160]	; (8005fac <main+0x268>)
 8005f0a:	f7fa f969 	bl	80001e0 <strcmp>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <main+0x1dc>
        printf("UNLOCK NFC...\n\n");
 8005f14:	482a      	ldr	r0, [pc, #168]	; (8005fc0 <main+0x27c>)
 8005f16:	f000 fdf1 	bl	8006afc <puts>
        unlock_nfc();
 8005f1a:	f7ff fd77 	bl	8005a0c <unlock_nfc>
 8005f1e:	e026      	b.n	8005f6e <main+0x22a>
      } else if (CMD(".d")) {
 8005f20:	4928      	ldr	r1, [pc, #160]	; (8005fc4 <main+0x280>)
 8005f22:	4822      	ldr	r0, [pc, #136]	; (8005fac <main+0x268>)
 8005f24:	f7fa f95c 	bl	80001e0 <strcmp>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <main+0x1f2>
    	increment = false;
 8005f2e:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <main+0x250>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e01b      	b.n	8005f6e <main+0x22a>
      } else if (CMD(".e")) {
 8005f36:	4924      	ldr	r1, [pc, #144]	; (8005fc8 <main+0x284>)
 8005f38:	481c      	ldr	r0, [pc, #112]	; (8005fac <main+0x268>)
 8005f3a:	f7fa f951 	bl	80001e0 <strcmp>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <main+0x208>
    	increment = true;
 8005f44:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <main+0x250>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e010      	b.n	8005f6e <main+0x22a>
      } else {
        // Write URL
        write_data_area2(uart_rx_buf, strlen((char *)uart_rx_buf)+1);
 8005f4c:	4817      	ldr	r0, [pc, #92]	; (8005fac <main+0x268>)
 8005f4e:	f7fa f951 	bl	80001f4 <strlen>
 8005f52:	4603      	mov	r3, r0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	3301      	adds	r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4813      	ldr	r0, [pc, #76]	; (8005fac <main+0x268>)
 8005f5e:	f7ff fb95 	bl	800568c <write_data_area2>
        strcpy(base_url, (char *)uart_rx_buf);
 8005f62:	f107 0314 	add.w	r3, r7, #20
 8005f66:	4911      	ldr	r1, [pc, #68]	; (8005fac <main+0x268>)
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fdef 	bl	8006b4c <strcpy>
      }
      command_received = false;
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <main+0x260>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
    }
    /* USER CODE END WHILE */

  MX_NFC_Process();
 8005f74:	f7ff fd6c 	bl	8005a50 <MX_NFC_Process>
    if (field_changed) {
 8005f78:	e71e      	b.n	8005db8 <main+0x74>
 8005f7a:	bf00      	nop
 8005f7c:	08008038 	.word	0x08008038
 8005f80:	08007f70 	.word	0x08007f70
 8005f84:	2000127c 	.word	0x2000127c
 8005f88:	2000139c 	.word	0x2000139c
 8005f8c:	20000124 	.word	0x20000124
 8005f90:	08007f84 	.word	0x08007f84
 8005f94:	20000054 	.word	0x20000054
 8005f98:	08007fa8 	.word	0x08007fa8
 8005f9c:	08007fcc 	.word	0x08007fcc
 8005fa0:	08007fe0 	.word	0x08007fe0
 8005fa4:	20000125 	.word	0x20000125
 8005fa8:	08007ff8 	.word	0x08007ff8
 8005fac:	2000117c 	.word	0x2000117c
 8005fb0:	08007ffc 	.word	0x08007ffc
 8005fb4:	08008008 	.word	0x08008008
 8005fb8:	0800800c 	.word	0x0800800c
 8005fbc:	0800801c 	.word	0x0800801c
 8005fc0:	08008020 	.word	0x08008020
 8005fc4:	08008030 	.word	0x08008030
 8005fc8:	08008034 	.word	0x08008034

08005fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b094      	sub	sp, #80	; 0x50
 8005fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fd2:	f107 0320 	add.w	r3, r7, #32
 8005fd6:	2230      	movs	r2, #48	; 0x30
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fd12 	bl	8006a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	605a      	str	r2, [r3, #4]
 8005fea:	609a      	str	r2, [r3, #8]
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <SystemClock_Config+0xd0>)
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	4a28      	ldr	r2, [pc, #160]	; (800609c <SystemClock_Config+0xd0>)
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8006000:	4b26      	ldr	r3, [pc, #152]	; (800609c <SystemClock_Config+0xd0>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800600c:	2300      	movs	r3, #0
 800600e:	607b      	str	r3, [r7, #4]
 8006010:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <SystemClock_Config+0xd4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006018:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <SystemClock_Config+0xd4>)
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <SystemClock_Config+0xd4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800602c:	2302      	movs	r3, #2
 800602e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006030:	2301      	movs	r3, #1
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006034:	2310      	movs	r3, #16
 8006036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006038:	2302      	movs	r3, #2
 800603a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800603c:	2300      	movs	r3, #0
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006040:	2310      	movs	r3, #16
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006044:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006048:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800604a:	2304      	movs	r3, #4
 800604c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800604e:	2307      	movs	r3, #7
 8006050:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006052:	f107 0320 	add.w	r3, r7, #32
 8006056:	4618      	mov	r0, r3
 8006058:	f7fd f9ec 	bl	8003434 <HAL_RCC_OscConfig>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006062:	f000 f881 	bl	8006168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006066:	230f      	movs	r3, #15
 8006068:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800606a:	2302      	movs	r3, #2
 800606c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800607c:	f107 030c 	add.w	r3, r7, #12
 8006080:	2102      	movs	r1, #2
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd fc18 	bl	80038b8 <HAL_RCC_ClockConfig>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800608e:	f000 f86b 	bl	8006168 <Error_Handler>
  }
}
 8006092:	bf00      	nop
 8006094:	3750      	adds	r7, #80	; 0x50
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	40007000 	.word	0x40007000

080060a4 <BSP_GPO_Callback>:

/* USER CODE BEGIN 4 */

void BSP_GPO_Callback() {
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
#ifndef SLEEP_ENABLED
  if (!field_changed) {
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <BSP_GPO_Callback+0x24>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <BSP_GPO_Callback+0x1a>
    field_changed = true;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <BSP_GPO_Callback+0x24>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 80060be:	bf00      	nop
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000124 	.word	0x20000124

080060cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  static int idx = 0;

  if (!command_received) {
 80060d4:	4b14      	ldr	r3, [pc, #80]	; (8006128 <HAL_UART_RxCpltCallback+0x5c>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f083 0301 	eor.w	r3, r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01d      	beq.n	8006120 <HAL_UART_RxCpltCallback+0x54>
    if (uart_rx_data == '\n') {
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <HAL_UART_RxCpltCallback+0x60>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b0a      	cmp	r3, #10
 80060ea:	d10b      	bne.n	8006104 <HAL_UART_RxCpltCallback+0x38>
      uart_rx_buf[idx] = '\0';
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <HAL_UART_RxCpltCallback+0x64>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a10      	ldr	r2, [pc, #64]	; (8006134 <HAL_UART_RxCpltCallback+0x68>)
 80060f2:	2100      	movs	r1, #0
 80060f4:	54d1      	strb	r1, [r2, r3]
      idx = 0;
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <HAL_UART_RxCpltCallback+0x64>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
      command_received = true;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <HAL_UART_RxCpltCallback+0x5c>)
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e008      	b.n	8006116 <HAL_UART_RxCpltCallback+0x4a>
    } else {
      uart_rx_buf[idx++] = uart_rx_data;
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_UART_RxCpltCallback+0x64>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <HAL_UART_RxCpltCallback+0x64>)
 800610c:	600a      	str	r2, [r1, #0]
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <HAL_UART_RxCpltCallback+0x60>)
 8006110:	7811      	ldrb	r1, [r2, #0]
 8006112:	4a08      	ldr	r2, [pc, #32]	; (8006134 <HAL_UART_RxCpltCallback+0x68>)
 8006114:	54d1      	strb	r1, [r2, r3]
    }

    HAL_UART_Receive_IT(&huart2, &uart_rx_data, 1);
 8006116:	2201      	movs	r2, #1
 8006118:	4904      	ldr	r1, [pc, #16]	; (800612c <HAL_UART_RxCpltCallback+0x60>)
 800611a:	4807      	ldr	r0, [pc, #28]	; (8006138 <HAL_UART_RxCpltCallback+0x6c>)
 800611c:	f7fd fea0 	bl	8003e60 <HAL_UART_Receive_IT>
  }
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000125 	.word	0x20000125
 800612c:	2000127c 	.word	0x2000127c
 8006130:	20000128 	.word	0x20000128
 8006134:	2000117c 	.word	0x2000117c
 8006138:	2000139c 	.word	0x2000139c

0800613c <_write>:

int _write(int file, char *ptr, int len) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	b29a      	uxth	r2, r3
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4804      	ldr	r0, [pc, #16]	; (8006164 <_write+0x28>)
 8006154:	f7fd fdeb 	bl	8003d2e <HAL_UART_Transmit>
  return len;
 8006158:	687b      	ldr	r3, [r7, #4]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	2000139c 	.word	0x2000139c

08006168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <notify>:
 *
 * Note: binary data (uint8_t) is converted into hex in ASCII,
 * because RN4020 accepts binary data in ASCII mode.
 *
 */
void notify(uint8_t *data, int len) {
 8006178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]

  int i = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
  int idx = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
  char ascii_hex_buf[3];

  // TX characteristics
  strcpy(send_buf, NOTIFY_CHARA);
 800618a:	4b2c      	ldr	r3, [pc, #176]	; (800623c <notify+0xc4>)
 800618c:	4a2c      	ldr	r2, [pc, #176]	; (8006240 <notify+0xc8>)
 800618e:	4614      	mov	r4, r2
 8006190:	469c      	mov	ip, r3
 8006192:	f104 0e20 	add.w	lr, r4, #32
 8006196:	4665      	mov	r5, ip
 8006198:	4626      	mov	r6, r4
 800619a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800619c:	6028      	str	r0, [r5, #0]
 800619e:	6069      	str	r1, [r5, #4]
 80061a0:	60aa      	str	r2, [r5, #8]
 80061a2:	60eb      	str	r3, [r5, #12]
 80061a4:	3410      	adds	r4, #16
 80061a6:	f10c 0c10 	add.w	ip, ip, #16
 80061aa:	4574      	cmp	r4, lr
 80061ac:	d1f3      	bne.n	8006196 <notify+0x1e>
 80061ae:	4663      	mov	r3, ip
 80061b0:	4622      	mov	r2, r4
 80061b2:	6810      	ldr	r0, [r2, #0]
 80061b4:	6018      	str	r0, [r3, #0]
 80061b6:	8892      	ldrh	r2, [r2, #4]
 80061b8:	809a      	strh	r2, [r3, #4]

  while (true) {
    sprintf(ascii_hex_buf, "%02x", data[idx]);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f107 030c 	add.w	r3, r7, #12
 80061c8:	491e      	ldr	r1, [pc, #120]	; (8006244 <notify+0xcc>)
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fc9e 	bl	8006b0c <siprintf>
    send_buf[37+i*2] = ascii_hex_buf[0];
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	3325      	adds	r3, #37	; 0x25
 80061d6:	7b39      	ldrb	r1, [r7, #12]
 80061d8:	4a18      	ldr	r2, [pc, #96]	; (800623c <notify+0xc4>)
 80061da:	54d1      	strb	r1, [r2, r3]
    send_buf[37+i*2+1] = ascii_hex_buf[1];
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	3313      	adds	r3, #19
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	7b79      	ldrb	r1, [r7, #13]
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <notify+0xc4>)
 80061e6:	54d1      	strb	r1, [r2, r3]
    i++;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	3301      	adds	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
    idx++;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	3301      	adds	r3, #1
 80061f2:	613b      	str	r3, [r7, #16]
    if (idx >= len) {  // The length of data
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	dbde      	blt.n	80061ba <notify+0x42>
      send_buf[37 + i*2] = '\n';
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	3325      	adds	r3, #37	; 0x25
 8006202:	4a0e      	ldr	r2, [pc, #56]	; (800623c <notify+0xc4>)
 8006204:	210a      	movs	r1, #10
 8006206:	54d1      	strb	r1, [r2, r3]
      HAL_UART_Transmit(&huart6, (uint8_t *)send_buf, 37+i*2+1, 0xffff);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	3313      	adds	r3, #19
 800620c:	b29b      	uxth	r3, r3
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006216:	4909      	ldr	r1, [pc, #36]	; (800623c <notify+0xc4>)
 8006218:	480b      	ldr	r0, [pc, #44]	; (8006248 <notify+0xd0>)
 800621a:	f7fd fd88 	bl	8003d2e <HAL_UART_Transmit>
      // For debug
      send_buf[37 + i*2] = '\0';
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	3325      	adds	r3, #37	; 0x25
 8006224:	4a05      	ldr	r2, [pc, #20]	; (800623c <notify+0xc4>)
 8006226:	2100      	movs	r1, #0
 8006228:	54d1      	strb	r1, [r2, r3]
      printf("sendData(@len): %s\n", send_buf);
 800622a:	4904      	ldr	r1, [pc, #16]	; (800623c <notify+0xc4>)
 800622c:	4807      	ldr	r0, [pc, #28]	; (800624c <notify+0xd4>)
 800622e:	f000 fbf1 	bl	8006a14 <iprintf>
      break;
 8006232:	bf00      	nop
    }
  }
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623c:	200012a4 	.word	0x200012a4
 8006240:	0800804c 	.word	0x0800804c
 8006244:	08008074 	.word	0x08008074
 8006248:	2000135c 	.word	0x2000135c
 800624c:	0800807c 	.word	0x0800807c

08006250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_MspInit+0x4c>)
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	4a0f      	ldr	r2, [pc, #60]	; (800629c <HAL_MspInit+0x4c>)
 8006260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006264:	6453      	str	r3, [r2, #68]	; 0x44
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <HAL_MspInit+0x4c>)
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <HAL_MspInit+0x4c>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	4a08      	ldr	r2, [pc, #32]	; (800629c <HAL_MspInit+0x4c>)
 800627c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006280:	6413      	str	r3, [r2, #64]	; 0x40
 8006282:	4b06      	ldr	r3, [pc, #24]	; (800629c <HAL_MspInit+0x4c>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800628e:	2007      	movs	r0, #7
 8006290:	f7fb fc2e 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40023800 	.word	0x40023800

080062a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062a4:	bf00      	nop
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062ae:	b480      	push	{r7}
 80062b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062b2:	e7fe      	b.n	80062b2 <HardFault_Handler+0x4>

080062b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062b8:	e7fe      	b.n	80062b8 <MemManage_Handler+0x4>

080062ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062ba:	b480      	push	{r7}
 80062bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062be:	e7fe      	b.n	80062be <BusFault_Handler+0x4>

080062c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062c4:	e7fe      	b.n	80062c4 <UsageFault_Handler+0x4>

080062c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062c6:	b480      	push	{r7}
 80062c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062ca:	bf00      	nop
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062f4:	f7fb faea 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062f8:	bf00      	nop
 80062fa:	bd80      	pop	{r7, pc}

080062fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8006300:	4802      	ldr	r0, [pc, #8]	; (800630c <EXTI9_5_IRQHandler+0x10>)
 8006302:	f7fb fc87 	bl	8001c14 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006306:	bf00      	nop
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000034 	.word	0x20000034

08006310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006314:	4802      	ldr	r0, [pc, #8]	; (8006320 <USART2_IRQHandler+0x10>)
 8006316:	f7fd fdf9 	bl	8003f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	2000139c 	.word	0x2000139c

08006324 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006328:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800632c:	f7fb ff22 	bl	8002174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006330:	bf00      	nop
 8006332:	bd80      	pop	{r7, pc}

08006334 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 800633e:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <BSP_I2C1_Init+0x70>)
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <BSP_I2C1_Init+0x74>)
 8006342:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <BSP_I2C1_Init+0x78>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	4918      	ldr	r1, [pc, #96]	; (80063ac <BSP_I2C1_Init+0x78>)
 800634c:	600a      	str	r2, [r1, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d122      	bne.n	8006398 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8006352:	4814      	ldr	r0, [pc, #80]	; (80063a4 <BSP_I2C1_Init+0x70>)
 8006354:	f7fc fce0 	bl	8002d18 <HAL_I2C_GetState>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11c      	bne.n	8006398 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800635e:	4811      	ldr	r0, [pc, #68]	; (80063a4 <BSP_I2C1_Init+0x70>)
 8006360:	f000 f902 	bl	8006568 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d116      	bne.n	8006398 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800636a:	480e      	ldr	r0, [pc, #56]	; (80063a4 <BSP_I2C1_Init+0x70>)
 800636c:	f000 f8c8 	bl	8006500 <MX_I2C1_Init>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8006376:	f06f 0307 	mvn.w	r3, #7
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e00c      	b.n	8006398 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 800637e:	2100      	movs	r1, #0
 8006380:	4808      	ldr	r0, [pc, #32]	; (80063a4 <BSP_I2C1_Init+0x70>)
 8006382:	f7fd f81a 	bl	80033ba <HAL_I2CEx_ConfigAnalogFilter>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 800638c:	f06f 0307 	mvn.w	r3, #7
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	e001      	b.n	8006398 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8006394:	2300      	movs	r3, #0
 8006396:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8006398:	687b      	ldr	r3, [r7, #4]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20001308 	.word	0x20001308
 80063a8:	40005400 	.word	0x40005400
 80063ac:	2000012c 	.word	0x2000012c

080063b0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <BSP_I2C1_DeInit+0x48>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d014      	beq.n	80063ec <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <BSP_I2C1_DeInit+0x48>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4a0b      	ldr	r2, [pc, #44]	; (80063f8 <BSP_I2C1_DeInit+0x48>)
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <BSP_I2C1_DeInit+0x48>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 80063d4:	4809      	ldr	r0, [pc, #36]	; (80063fc <BSP_I2C1_DeInit+0x4c>)
 80063d6:	f000 f901 	bl	80065dc <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 80063da:	4808      	ldr	r0, [pc, #32]	; (80063fc <BSP_I2C1_DeInit+0x4c>)
 80063dc:	f7fc f816 	bl	800240c <HAL_I2C_DeInit>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 80063e6:	f06f 0307 	mvn.w	r3, #7
 80063ea:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 80063ec:	687b      	ldr	r3, [r7, #4]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	2000012c 	.word	0x2000012c
 80063fc:	20001308 	.word	0x20001308

08006400 <BSP_I2C1_IsReady>:
  * @param DevAddr : I2C device address
  * @param Trials : Check trials number
  *	@retval BSP status
  */
int32_t BSP_I2C1_IsReady(uint16_t DevAddr, uint32_t Trials) 
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	6039      	str	r1, [r7, #0]
 800640a:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
  
  if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8006410:	88f9      	ldrh	r1, [r7, #6]
 8006412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4806      	ldr	r0, [pc, #24]	; (8006434 <BSP_I2C1_IsReady+0x34>)
 800641a:	f7fc fb5b 	bl	8002ad4 <HAL_I2C_IsDeviceReady>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <BSP_I2C1_IsReady+0x2a>
  {
    ret = BSP_ERROR_BUSY;
 8006424:	f06f 0302 	mvn.w	r3, #2
 8006428:	60fb      	str	r3, [r7, #12]
  } 
  
  return ret;
 800642a:	68fb      	ldr	r3, [r7, #12]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20001308 	.word	0x20001308

08006438 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af04      	add	r7, sp, #16
 800643e:	60ba      	str	r2, [r7, #8]
 8006440:	461a      	mov	r2, r3
 8006442:	4603      	mov	r3, r0
 8006444:	81fb      	strh	r3, [r7, #14]
 8006446:	460b      	mov	r3, r1
 8006448:	81bb      	strh	r3, [r7, #12]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
  
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8006452:	89ba      	ldrh	r2, [r7, #12]
 8006454:	89f9      	ldrh	r1, [r7, #14]
 8006456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800645a:	9302      	str	r3, [sp, #8]
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2310      	movs	r3, #16
 8006466:	480c      	ldr	r0, [pc, #48]	; (8006498 <BSP_I2C1_WriteReg16+0x60>)
 8006468:	f7fc f814 	bl	8002494 <HAL_I2C_Mem_Write>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)    
 8006472:	4809      	ldr	r0, [pc, #36]	; (8006498 <BSP_I2C1_WriteReg16+0x60>)
 8006474:	f7fc fc5e 	bl	8002d34 <HAL_I2C_GetError>
 8006478:	4603      	mov	r3, r0
 800647a:	2b04      	cmp	r3, #4
 800647c:	d103      	bne.n	8006486 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800647e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e002      	b.n	800648c <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006486:	f06f 0303 	mvn.w	r3, #3
 800648a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800648c:	697b      	ldr	r3, [r7, #20]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20001308 	.word	0x20001308

0800649c <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	60ba      	str	r2, [r7, #8]
 80064a4:	461a      	mov	r2, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	81fb      	strh	r3, [r7, #14]
 80064aa:	460b      	mov	r3, r1
 80064ac:	81bb      	strh	r3, [r7, #12]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
 
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80064b6:	89ba      	ldrh	r2, [r7, #12]
 80064b8:	89f9      	ldrh	r1, [r7, #14]
 80064ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064be:	9302      	str	r3, [sp, #8]
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2310      	movs	r3, #16
 80064ca:	480c      	ldr	r0, [pc, #48]	; (80064fc <BSP_I2C1_ReadReg16+0x60>)
 80064cc:	f7fc f8dc 	bl	8002688 <HAL_I2C_Mem_Read>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80064d6:	4809      	ldr	r0, [pc, #36]	; (80064fc <BSP_I2C1_ReadReg16+0x60>)
 80064d8:	f7fc fc2c 	bl	8002d34 <HAL_I2C_GetError>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d003      	beq.n	80064ea <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80064e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e002      	b.n	80064f0 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80064ea:	f06f 0303 	mvn.w	r3, #3
 80064ee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80064f0:	697b      	ldr	r3, [r7, #20]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001308 	.word	0x20001308

08006500 <MX_I2C1_Init>:
}

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <MX_I2C1_Init+0x60>)
 8006510:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <MX_I2C1_Init+0x64>)
 8006516:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800652a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fb fe39 	bl	80021bc <HAL_I2C_Init>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40005400 	.word	0x40005400
 8006564:	00061a80 	.word	0x00061a80

08006568 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	4b17      	ldr	r3, [pc, #92]	; (80065d4 <I2C1_MspInit+0x6c>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	4a16      	ldr	r2, [pc, #88]	; (80065d4 <I2C1_MspInit+0x6c>)
 800657a:	f043 0302 	orr.w	r3, r3, #2
 800657e:	6313      	str	r3, [r2, #48]	; 0x30
 8006580:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <I2C1_MspInit+0x6c>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800658c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006592:	2312      	movs	r3, #18
 8006594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006596:	2301      	movs	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800659a:	2303      	movs	r3, #3
 800659c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800659e:	2304      	movs	r3, #4
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065a2:	f107 0314 	add.w	r3, r7, #20
 80065a6:	4619      	mov	r1, r3
 80065a8:	480b      	ldr	r0, [pc, #44]	; (80065d8 <I2C1_MspInit+0x70>)
 80065aa:	f7fb fb4d 	bl	8001c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <I2C1_MspInit+0x6c>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	4a07      	ldr	r2, [pc, #28]	; (80065d4 <I2C1_MspInit+0x6c>)
 80065b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065bc:	6413      	str	r3, [r2, #64]	; 0x40
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <I2C1_MspInit+0x6c>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80065ca:	bf00      	nop
 80065cc:	3728      	adds	r7, #40	; 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40020400 	.word	0x40020400

080065dc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <I2C1_MspDeInit+0x28>)
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	4a06      	ldr	r2, [pc, #24]	; (8006604 <I2C1_MspDeInit+0x28>)
 80065ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065ee:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80065f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80065f4:	4804      	ldr	r0, [pc, #16]	; (8006608 <I2C1_MspDeInit+0x2c>)
 80065f6:	f7fb fca9 	bl	8001f4c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40023800 	.word	0x40023800
 8006608:	40020400 	.word	0x40020400

0800660c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e00a      	b.n	8006634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800661e:	f3af 8000 	nop.w
 8006622:	4601      	mov	r1, r0
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	60ba      	str	r2, [r7, #8]
 800662a:	b2ca      	uxtb	r2, r1
 800662c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	3301      	adds	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	dbf0      	blt.n	800661e <_read+0x12>
	}

return len;
 800663c:	687b      	ldr	r3, [r7, #4]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006650:	4b11      	ldr	r3, [pc, #68]	; (8006698 <_sbrk+0x50>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <_sbrk+0x16>
		heap_end = &end;
 8006658:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <_sbrk+0x50>)
 800665a:	4a10      	ldr	r2, [pc, #64]	; (800669c <_sbrk+0x54>)
 800665c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800665e:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <_sbrk+0x50>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <_sbrk+0x50>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4413      	add	r3, r2
 800666c:	466a      	mov	r2, sp
 800666e:	4293      	cmp	r3, r2
 8006670:	d907      	bls.n	8006682 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006672:	f000 f983 	bl	800697c <__errno>
 8006676:	4602      	mov	r2, r0
 8006678:	230c      	movs	r3, #12
 800667a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	e006      	b.n	8006690 <_sbrk+0x48>
	}

	heap_end += incr;
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <_sbrk+0x50>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4413      	add	r3, r2
 800668a:	4a03      	ldr	r2, [pc, #12]	; (8006698 <_sbrk+0x50>)
 800668c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000130 	.word	0x20000130
 800669c:	200013e0 	.word	0x200013e0

080066a0 <_close>:

int _close(int file)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	return -1;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066c8:	605a      	str	r2, [r3, #4]
	return 0;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <_isatty>:

int _isatty(int file)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	return 1;
 80066e0:	2301      	movs	r3, #1
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
	return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <SystemInit+0x60>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	4a15      	ldr	r2, [pc, #84]	; (8006768 <SystemInit+0x60>)
 8006714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <SystemInit+0x64>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a12      	ldr	r2, [pc, #72]	; (800676c <SystemInit+0x64>)
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <SystemInit+0x64>)
 800672a:	2200      	movs	r2, #0
 800672c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <SystemInit+0x64>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a0e      	ldr	r2, [pc, #56]	; (800676c <SystemInit+0x64>)
 8006734:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <SystemInit+0x64>)
 8006740:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <SystemInit+0x68>)
 8006742:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <SystemInit+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <SystemInit+0x64>)
 800674a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800674e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <SystemInit+0x64>)
 8006752:	2200      	movs	r2, #0
 8006754:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006756:	4b04      	ldr	r3, [pc, #16]	; (8006768 <SystemInit+0x60>)
 8006758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800675c:	609a      	str	r2, [r3, #8]
#endif
}
 800675e:	bf00      	nop
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	e000ed00 	.word	0xe000ed00
 800676c:	40023800 	.word	0x40023800
 8006770:	24003010 	.word	0x24003010

08006774 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006778:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <MX_USART2_UART_Init+0x50>)
 800677c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800677e:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 8006780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006786:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 8006788:	2200      	movs	r2, #0
 800678a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 800678e:	2200      	movs	r2, #0
 8006790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 8006794:	2200      	movs	r2, #0
 8006796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 800679a:	220c      	movs	r2, #12
 800679c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800679e:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067aa:	4805      	ldr	r0, [pc, #20]	; (80067c0 <MX_USART2_UART_Init+0x4c>)
 80067ac:	f7fd fa72 	bl	8003c94 <HAL_UART_Init>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80067b6:	f7ff fcd7 	bl	8006168 <Error_Handler>
  }

}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2000139c 	.word	0x2000139c
 80067c4:	40004400 	.word	0x40004400

080067c8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80067cc:	4b11      	ldr	r3, [pc, #68]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067ce:	4a12      	ldr	r2, [pc, #72]	; (8006818 <MX_USART6_UART_Init+0x50>)
 80067d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80067e0:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067ee:	220c      	movs	r2, #12
 80067f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80067fe:	4805      	ldr	r0, [pc, #20]	; (8006814 <MX_USART6_UART_Init+0x4c>)
 8006800:	f7fd fa48 	bl	8003c94 <HAL_UART_Init>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800680a:	f7ff fcad 	bl	8006168 <Error_Handler>
  }

}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2000135c 	.word	0x2000135c
 8006818:	40011400 	.word	0x40011400

0800681c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08c      	sub	sp, #48	; 0x30
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006824:	f107 031c 	add.w	r3, r7, #28
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	60da      	str	r2, [r3, #12]
 8006832:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a36      	ldr	r2, [pc, #216]	; (8006914 <HAL_UART_MspInit+0xf8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d134      	bne.n	80068a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	4b35      	ldr	r3, [pc, #212]	; (8006918 <HAL_UART_MspInit+0xfc>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a34      	ldr	r2, [pc, #208]	; (8006918 <HAL_UART_MspInit+0xfc>)
 8006848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
 800684e:	4b32      	ldr	r3, [pc, #200]	; (8006918 <HAL_UART_MspInit+0xfc>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <HAL_UART_MspInit+0xfc>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	4a2d      	ldr	r2, [pc, #180]	; (8006918 <HAL_UART_MspInit+0xfc>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6313      	str	r3, [r2, #48]	; 0x30
 800686a:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_UART_MspInit+0xfc>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006876:	230c      	movs	r3, #12
 8006878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800687a:	2302      	movs	r3, #2
 800687c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006882:	2300      	movs	r3, #0
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006886:	2307      	movs	r3, #7
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800688a:	f107 031c 	add.w	r3, r7, #28
 800688e:	4619      	mov	r1, r3
 8006890:	4822      	ldr	r0, [pc, #136]	; (800691c <HAL_UART_MspInit+0x100>)
 8006892:	f7fb f9d9 	bl	8001c48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006896:	2200      	movs	r2, #0
 8006898:	2100      	movs	r1, #0
 800689a:	2026      	movs	r0, #38	; 0x26
 800689c:	f7fb f933 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068a0:	2026      	movs	r0, #38	; 0x26
 80068a2:	f7fb f94c 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80068a6:	e030      	b.n	800690a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <HAL_UART_MspInit+0x104>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d12b      	bne.n	800690a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	4b18      	ldr	r3, [pc, #96]	; (8006918 <HAL_UART_MspInit+0xfc>)
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <HAL_UART_MspInit+0xfc>)
 80068bc:	f043 0320 	orr.w	r3, r3, #32
 80068c0:	6453      	str	r3, [r2, #68]	; 0x44
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <HAL_UART_MspInit+0xfc>)
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <HAL_UART_MspInit+0xfc>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	4a10      	ldr	r2, [pc, #64]	; (8006918 <HAL_UART_MspInit+0xfc>)
 80068d8:	f043 0304 	orr.w	r3, r3, #4
 80068dc:	6313      	str	r3, [r2, #48]	; 0x30
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <HAL_UART_MspInit+0xfc>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068ea:	23c0      	movs	r3, #192	; 0xc0
 80068ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ee:	2302      	movs	r3, #2
 80068f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068f2:	2301      	movs	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f6:	2303      	movs	r3, #3
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80068fa:	2308      	movs	r3, #8
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068fe:	f107 031c 	add.w	r3, r7, #28
 8006902:	4619      	mov	r1, r3
 8006904:	4807      	ldr	r0, [pc, #28]	; (8006924 <HAL_UART_MspInit+0x108>)
 8006906:	f7fb f99f 	bl	8001c48 <HAL_GPIO_Init>
}
 800690a:	bf00      	nop
 800690c:	3730      	adds	r7, #48	; 0x30
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40004400 	.word	0x40004400
 8006918:	40023800 	.word	0x40023800
 800691c:	40020000 	.word	0x40020000
 8006920:	40011400 	.word	0x40011400
 8006924:	40020800 	.word	0x40020800

08006928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800692c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800692e:	e003      	b.n	8006938 <LoopCopyDataInit>

08006930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006930:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006936:	3104      	adds	r1, #4

08006938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006938:	480b      	ldr	r0, [pc, #44]	; (8006968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800693c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800693e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006940:	d3f6      	bcc.n	8006930 <CopyDataInit>
  ldr  r2, =_sbss
 8006942:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006944:	e002      	b.n	800694c <LoopFillZerobss>

08006946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006948:	f842 3b04 	str.w	r3, [r2], #4

0800694c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800694e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006950:	d3f9      	bcc.n	8006946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006952:	f7ff fed9 	bl	8006708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006956:	f000 f817 	bl	8006988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800695a:	f7ff f9f3 	bl	8005d44 <main>
  bx  lr    
 800695e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006960:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8006964:	08008150 	.word	0x08008150
  ldr  r0, =_sdata
 8006968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800696c:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8006970:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8006974:	200013e0 	.word	0x200013e0

08006978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006978:	e7fe      	b.n	8006978 <ADC_IRQHandler>
	...

0800697c <__errno>:
 800697c:	4b01      	ldr	r3, [pc, #4]	; (8006984 <__errno+0x8>)
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000005c 	.word	0x2000005c

08006988 <__libc_init_array>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	4e0d      	ldr	r6, [pc, #52]	; (80069c0 <__libc_init_array+0x38>)
 800698c:	4c0d      	ldr	r4, [pc, #52]	; (80069c4 <__libc_init_array+0x3c>)
 800698e:	1ba4      	subs	r4, r4, r6
 8006990:	10a4      	asrs	r4, r4, #2
 8006992:	2500      	movs	r5, #0
 8006994:	42a5      	cmp	r5, r4
 8006996:	d109      	bne.n	80069ac <__libc_init_array+0x24>
 8006998:	4e0b      	ldr	r6, [pc, #44]	; (80069c8 <__libc_init_array+0x40>)
 800699a:	4c0c      	ldr	r4, [pc, #48]	; (80069cc <__libc_init_array+0x44>)
 800699c:	f001 f944 	bl	8007c28 <_init>
 80069a0:	1ba4      	subs	r4, r4, r6
 80069a2:	10a4      	asrs	r4, r4, #2
 80069a4:	2500      	movs	r5, #0
 80069a6:	42a5      	cmp	r5, r4
 80069a8:	d105      	bne.n	80069b6 <__libc_init_array+0x2e>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b0:	4798      	blx	r3
 80069b2:	3501      	adds	r5, #1
 80069b4:	e7ee      	b.n	8006994 <__libc_init_array+0xc>
 80069b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ba:	4798      	blx	r3
 80069bc:	3501      	adds	r5, #1
 80069be:	e7f2      	b.n	80069a6 <__libc_init_array+0x1e>
 80069c0:	08008148 	.word	0x08008148
 80069c4:	08008148 	.word	0x08008148
 80069c8:	08008148 	.word	0x08008148
 80069cc:	0800814c 	.word	0x0800814c

080069d0 <memcmp>:
 80069d0:	b530      	push	{r4, r5, lr}
 80069d2:	2400      	movs	r4, #0
 80069d4:	42a2      	cmp	r2, r4
 80069d6:	d101      	bne.n	80069dc <memcmp+0xc>
 80069d8:	2000      	movs	r0, #0
 80069da:	e007      	b.n	80069ec <memcmp+0x1c>
 80069dc:	5d03      	ldrb	r3, [r0, r4]
 80069de:	3401      	adds	r4, #1
 80069e0:	190d      	adds	r5, r1, r4
 80069e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80069e6:	42ab      	cmp	r3, r5
 80069e8:	d0f4      	beq.n	80069d4 <memcmp+0x4>
 80069ea:	1b58      	subs	r0, r3, r5
 80069ec:	bd30      	pop	{r4, r5, pc}

080069ee <memcpy>:
 80069ee:	b510      	push	{r4, lr}
 80069f0:	1e43      	subs	r3, r0, #1
 80069f2:	440a      	add	r2, r1
 80069f4:	4291      	cmp	r1, r2
 80069f6:	d100      	bne.n	80069fa <memcpy+0xc>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a02:	e7f7      	b.n	80069f4 <memcpy+0x6>

08006a04 <memset>:
 8006a04:	4402      	add	r2, r0
 8006a06:	4603      	mov	r3, r0
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d100      	bne.n	8006a0e <memset+0xa>
 8006a0c:	4770      	bx	lr
 8006a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a12:	e7f9      	b.n	8006a08 <memset+0x4>

08006a14 <iprintf>:
 8006a14:	b40f      	push	{r0, r1, r2, r3}
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <iprintf+0x2c>)
 8006a18:	b513      	push	{r0, r1, r4, lr}
 8006a1a:	681c      	ldr	r4, [r3, #0]
 8006a1c:	b124      	cbz	r4, 8006a28 <iprintf+0x14>
 8006a1e:	69a3      	ldr	r3, [r4, #24]
 8006a20:	b913      	cbnz	r3, 8006a28 <iprintf+0x14>
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fa4a 	bl	8006ebc <__sinit>
 8006a28:	ab05      	add	r3, sp, #20
 8006a2a:	9a04      	ldr	r2, [sp, #16]
 8006a2c:	68a1      	ldr	r1, [r4, #8]
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 fd55 	bl	80074e0 <_vfiprintf_r>
 8006a36:	b002      	add	sp, #8
 8006a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3c:	b004      	add	sp, #16
 8006a3e:	4770      	bx	lr
 8006a40:	2000005c 	.word	0x2000005c

08006a44 <_puts_r>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	460e      	mov	r6, r1
 8006a48:	4605      	mov	r5, r0
 8006a4a:	b118      	cbz	r0, 8006a54 <_puts_r+0x10>
 8006a4c:	6983      	ldr	r3, [r0, #24]
 8006a4e:	b90b      	cbnz	r3, 8006a54 <_puts_r+0x10>
 8006a50:	f000 fa34 	bl	8006ebc <__sinit>
 8006a54:	69ab      	ldr	r3, [r5, #24]
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	b913      	cbnz	r3, 8006a60 <_puts_r+0x1c>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 fa2e 	bl	8006ebc <__sinit>
 8006a60:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <_puts_r+0xac>)
 8006a62:	429c      	cmp	r4, r3
 8006a64:	d117      	bne.n	8006a96 <_puts_r+0x52>
 8006a66:	686c      	ldr	r4, [r5, #4]
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	071b      	lsls	r3, r3, #28
 8006a6c:	d51d      	bpl.n	8006aaa <_puts_r+0x66>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	b1db      	cbz	r3, 8006aaa <_puts_r+0x66>
 8006a72:	3e01      	subs	r6, #1
 8006a74:	68a3      	ldr	r3, [r4, #8]
 8006a76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	60a3      	str	r3, [r4, #8]
 8006a7e:	b9e9      	cbnz	r1, 8006abc <_puts_r+0x78>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	da2e      	bge.n	8006ae2 <_puts_r+0x9e>
 8006a84:	4622      	mov	r2, r4
 8006a86:	210a      	movs	r1, #10
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 f867 	bl	8006b5c <__swbuf_r>
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d011      	beq.n	8006ab6 <_puts_r+0x72>
 8006a92:	200a      	movs	r0, #10
 8006a94:	e011      	b.n	8006aba <_puts_r+0x76>
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <_puts_r+0xb0>)
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d101      	bne.n	8006aa0 <_puts_r+0x5c>
 8006a9c:	68ac      	ldr	r4, [r5, #8]
 8006a9e:	e7e3      	b.n	8006a68 <_puts_r+0x24>
 8006aa0:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <_puts_r+0xb4>)
 8006aa2:	429c      	cmp	r4, r3
 8006aa4:	bf08      	it	eq
 8006aa6:	68ec      	ldreq	r4, [r5, #12]
 8006aa8:	e7de      	b.n	8006a68 <_puts_r+0x24>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 f8a7 	bl	8006c00 <__swsetup_r>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d0dd      	beq.n	8006a72 <_puts_r+0x2e>
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	da04      	bge.n	8006aca <_puts_r+0x86>
 8006ac0:	69a2      	ldr	r2, [r4, #24]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	dc06      	bgt.n	8006ad4 <_puts_r+0x90>
 8006ac6:	290a      	cmp	r1, #10
 8006ac8:	d004      	beq.n	8006ad4 <_puts_r+0x90>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	6022      	str	r2, [r4, #0]
 8006ad0:	7019      	strb	r1, [r3, #0]
 8006ad2:	e7cf      	b.n	8006a74 <_puts_r+0x30>
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f840 	bl	8006b5c <__swbuf_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d1c9      	bne.n	8006a74 <_puts_r+0x30>
 8006ae0:	e7e9      	b.n	8006ab6 <_puts_r+0x72>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	200a      	movs	r0, #10
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	6022      	str	r2, [r4, #0]
 8006aea:	7018      	strb	r0, [r3, #0]
 8006aec:	e7e5      	b.n	8006aba <_puts_r+0x76>
 8006aee:	bf00      	nop
 8006af0:	080080cc 	.word	0x080080cc
 8006af4:	080080ec 	.word	0x080080ec
 8006af8:	080080ac 	.word	0x080080ac

08006afc <puts>:
 8006afc:	4b02      	ldr	r3, [pc, #8]	; (8006b08 <puts+0xc>)
 8006afe:	4601      	mov	r1, r0
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f7ff bf9f 	b.w	8006a44 <_puts_r>
 8006b06:	bf00      	nop
 8006b08:	2000005c 	.word	0x2000005c

08006b0c <siprintf>:
 8006b0c:	b40e      	push	{r1, r2, r3}
 8006b0e:	b500      	push	{lr}
 8006b10:	b09c      	sub	sp, #112	; 0x70
 8006b12:	ab1d      	add	r3, sp, #116	; 0x74
 8006b14:	9002      	str	r0, [sp, #8]
 8006b16:	9006      	str	r0, [sp, #24]
 8006b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b1c:	4809      	ldr	r0, [pc, #36]	; (8006b44 <siprintf+0x38>)
 8006b1e:	9107      	str	r1, [sp, #28]
 8006b20:	9104      	str	r1, [sp, #16]
 8006b22:	4909      	ldr	r1, [pc, #36]	; (8006b48 <siprintf+0x3c>)
 8006b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	a902      	add	r1, sp, #8
 8006b30:	f000 fbb4 	bl	800729c <_svfiprintf_r>
 8006b34:	9b02      	ldr	r3, [sp, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	b01c      	add	sp, #112	; 0x70
 8006b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b40:	b003      	add	sp, #12
 8006b42:	4770      	bx	lr
 8006b44:	2000005c 	.word	0x2000005c
 8006b48:	ffff0208 	.word	0xffff0208

08006b4c <strcpy>:
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b52:	f803 2b01 	strb.w	r2, [r3], #1
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d1f9      	bne.n	8006b4e <strcpy+0x2>
 8006b5a:	4770      	bx	lr

08006b5c <__swbuf_r>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	460e      	mov	r6, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	4605      	mov	r5, r0
 8006b64:	b118      	cbz	r0, 8006b6e <__swbuf_r+0x12>
 8006b66:	6983      	ldr	r3, [r0, #24]
 8006b68:	b90b      	cbnz	r3, 8006b6e <__swbuf_r+0x12>
 8006b6a:	f000 f9a7 	bl	8006ebc <__sinit>
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <__swbuf_r+0x98>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d12a      	bne.n	8006bca <__swbuf_r+0x6e>
 8006b74:	686c      	ldr	r4, [r5, #4]
 8006b76:	69a3      	ldr	r3, [r4, #24]
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	071a      	lsls	r2, r3, #28
 8006b7e:	d52e      	bpl.n	8006bde <__swbuf_r+0x82>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	b363      	cbz	r3, 8006bde <__swbuf_r+0x82>
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	1ac0      	subs	r0, r0, r3
 8006b8a:	6963      	ldr	r3, [r4, #20]
 8006b8c:	b2f6      	uxtb	r6, r6
 8006b8e:	4283      	cmp	r3, r0
 8006b90:	4637      	mov	r7, r6
 8006b92:	dc04      	bgt.n	8006b9e <__swbuf_r+0x42>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f926 	bl	8006de8 <_fflush_r>
 8006b9c:	bb28      	cbnz	r0, 8006bea <__swbuf_r+0x8e>
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	60a3      	str	r3, [r4, #8]
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	6022      	str	r2, [r4, #0]
 8006baa:	701e      	strb	r6, [r3, #0]
 8006bac:	6963      	ldr	r3, [r4, #20]
 8006bae:	3001      	adds	r0, #1
 8006bb0:	4283      	cmp	r3, r0
 8006bb2:	d004      	beq.n	8006bbe <__swbuf_r+0x62>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	07db      	lsls	r3, r3, #31
 8006bb8:	d519      	bpl.n	8006bee <__swbuf_r+0x92>
 8006bba:	2e0a      	cmp	r6, #10
 8006bbc:	d117      	bne.n	8006bee <__swbuf_r+0x92>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f911 	bl	8006de8 <_fflush_r>
 8006bc6:	b190      	cbz	r0, 8006bee <__swbuf_r+0x92>
 8006bc8:	e00f      	b.n	8006bea <__swbuf_r+0x8e>
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <__swbuf_r+0x9c>)
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	d101      	bne.n	8006bd4 <__swbuf_r+0x78>
 8006bd0:	68ac      	ldr	r4, [r5, #8]
 8006bd2:	e7d0      	b.n	8006b76 <__swbuf_r+0x1a>
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <__swbuf_r+0xa0>)
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	bf08      	it	eq
 8006bda:	68ec      	ldreq	r4, [r5, #12]
 8006bdc:	e7cb      	b.n	8006b76 <__swbuf_r+0x1a>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f80d 	bl	8006c00 <__swsetup_r>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d0cc      	beq.n	8006b84 <__swbuf_r+0x28>
 8006bea:	f04f 37ff 	mov.w	r7, #4294967295
 8006bee:	4638      	mov	r0, r7
 8006bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	080080cc 	.word	0x080080cc
 8006bf8:	080080ec 	.word	0x080080ec
 8006bfc:	080080ac 	.word	0x080080ac

08006c00 <__swsetup_r>:
 8006c00:	4b32      	ldr	r3, [pc, #200]	; (8006ccc <__swsetup_r+0xcc>)
 8006c02:	b570      	push	{r4, r5, r6, lr}
 8006c04:	681d      	ldr	r5, [r3, #0]
 8006c06:	4606      	mov	r6, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	b125      	cbz	r5, 8006c16 <__swsetup_r+0x16>
 8006c0c:	69ab      	ldr	r3, [r5, #24]
 8006c0e:	b913      	cbnz	r3, 8006c16 <__swsetup_r+0x16>
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f953 	bl	8006ebc <__sinit>
 8006c16:	4b2e      	ldr	r3, [pc, #184]	; (8006cd0 <__swsetup_r+0xd0>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	d10f      	bne.n	8006c3c <__swsetup_r+0x3c>
 8006c1c:	686c      	ldr	r4, [r5, #4]
 8006c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	0715      	lsls	r5, r2, #28
 8006c26:	d42c      	bmi.n	8006c82 <__swsetup_r+0x82>
 8006c28:	06d0      	lsls	r0, r2, #27
 8006c2a:	d411      	bmi.n	8006c50 <__swsetup_r+0x50>
 8006c2c:	2209      	movs	r2, #9
 8006c2e:	6032      	str	r2, [r6, #0]
 8006c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	e03e      	b.n	8006cba <__swsetup_r+0xba>
 8006c3c:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <__swsetup_r+0xd4>)
 8006c3e:	429c      	cmp	r4, r3
 8006c40:	d101      	bne.n	8006c46 <__swsetup_r+0x46>
 8006c42:	68ac      	ldr	r4, [r5, #8]
 8006c44:	e7eb      	b.n	8006c1e <__swsetup_r+0x1e>
 8006c46:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <__swsetup_r+0xd8>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	bf08      	it	eq
 8006c4c:	68ec      	ldreq	r4, [r5, #12]
 8006c4e:	e7e6      	b.n	8006c1e <__swsetup_r+0x1e>
 8006c50:	0751      	lsls	r1, r2, #29
 8006c52:	d512      	bpl.n	8006c7a <__swsetup_r+0x7a>
 8006c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c56:	b141      	cbz	r1, 8006c6a <__swsetup_r+0x6a>
 8006c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	d002      	beq.n	8006c66 <__swsetup_r+0x66>
 8006c60:	4630      	mov	r0, r6
 8006c62:	f000 fa19 	bl	8007098 <_free_r>
 8006c66:	2300      	movs	r3, #0
 8006c68:	6363      	str	r3, [r4, #52]	; 0x34
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	2300      	movs	r3, #0
 8006c74:	6063      	str	r3, [r4, #4]
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f043 0308 	orr.w	r3, r3, #8
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	b94b      	cbnz	r3, 8006c9a <__swsetup_r+0x9a>
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c90:	d003      	beq.n	8006c9a <__swsetup_r+0x9a>
 8006c92:	4621      	mov	r1, r4
 8006c94:	4630      	mov	r0, r6
 8006c96:	f000 f9bf 	bl	8007018 <__smakebuf_r>
 8006c9a:	89a2      	ldrh	r2, [r4, #12]
 8006c9c:	f012 0301 	ands.w	r3, r2, #1
 8006ca0:	d00c      	beq.n	8006cbc <__swsetup_r+0xbc>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60a3      	str	r3, [r4, #8]
 8006ca6:	6963      	ldr	r3, [r4, #20]
 8006ca8:	425b      	negs	r3, r3
 8006caa:	61a3      	str	r3, [r4, #24]
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	b953      	cbnz	r3, 8006cc6 <__swsetup_r+0xc6>
 8006cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006cb8:	d1ba      	bne.n	8006c30 <__swsetup_r+0x30>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	0792      	lsls	r2, r2, #30
 8006cbe:	bf58      	it	pl
 8006cc0:	6963      	ldrpl	r3, [r4, #20]
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	e7f2      	b.n	8006cac <__swsetup_r+0xac>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e7f7      	b.n	8006cba <__swsetup_r+0xba>
 8006cca:	bf00      	nop
 8006ccc:	2000005c 	.word	0x2000005c
 8006cd0:	080080cc 	.word	0x080080cc
 8006cd4:	080080ec 	.word	0x080080ec
 8006cd8:	080080ac 	.word	0x080080ac

08006cdc <__sflush_r>:
 8006cdc:	898a      	ldrh	r2, [r1, #12]
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	0710      	lsls	r0, r2, #28
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	d458      	bmi.n	8006d9c <__sflush_r+0xc0>
 8006cea:	684b      	ldr	r3, [r1, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dc05      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc02      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	d0f9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d08:	682f      	ldr	r7, [r5, #0]
 8006d0a:	6a21      	ldr	r1, [r4, #32]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	d032      	beq.n	8006d76 <__sflush_r+0x9a>
 8006d10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	075a      	lsls	r2, r3, #29
 8006d16:	d505      	bpl.n	8006d24 <__sflush_r+0x48>
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	1ac0      	subs	r0, r0, r3
 8006d1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d1e:	b10b      	cbz	r3, 8006d24 <__sflush_r+0x48>
 8006d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d22:	1ac0      	subs	r0, r0, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	4602      	mov	r2, r0
 8006d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b0      	blx	r6
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	d106      	bne.n	8006d44 <__sflush_r+0x68>
 8006d36:	6829      	ldr	r1, [r5, #0]
 8006d38:	291d      	cmp	r1, #29
 8006d3a:	d848      	bhi.n	8006dce <__sflush_r+0xf2>
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <__sflush_r+0x108>)
 8006d3e:	40ca      	lsrs	r2, r1
 8006d40:	07d6      	lsls	r6, r2, #31
 8006d42:	d544      	bpl.n	8006dce <__sflush_r+0xf2>
 8006d44:	2200      	movs	r2, #0
 8006d46:	6062      	str	r2, [r4, #4]
 8006d48:	04d9      	lsls	r1, r3, #19
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	d504      	bpl.n	8006d5a <__sflush_r+0x7e>
 8006d50:	1c42      	adds	r2, r0, #1
 8006d52:	d101      	bne.n	8006d58 <__sflush_r+0x7c>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b903      	cbnz	r3, 8006d5a <__sflush_r+0x7e>
 8006d58:	6560      	str	r0, [r4, #84]	; 0x54
 8006d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5c:	602f      	str	r7, [r5, #0]
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	d0c9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d002      	beq.n	8006d70 <__sflush_r+0x94>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f000 f994 	bl	8007098 <_free_r>
 8006d70:	2000      	movs	r0, #0
 8006d72:	6360      	str	r0, [r4, #52]	; 0x34
 8006d74:	e7c0      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b0      	blx	r6
 8006d7c:	1c41      	adds	r1, r0, #1
 8006d7e:	d1c8      	bne.n	8006d12 <__sflush_r+0x36>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0c5      	beq.n	8006d12 <__sflush_r+0x36>
 8006d86:	2b1d      	cmp	r3, #29
 8006d88:	d001      	beq.n	8006d8e <__sflush_r+0xb2>
 8006d8a:	2b16      	cmp	r3, #22
 8006d8c:	d101      	bne.n	8006d92 <__sflush_r+0xb6>
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	e7b1      	b.n	8006cf6 <__sflush_r+0x1a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7ad      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d9c:	690f      	ldr	r7, [r1, #16]
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	d0a9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006da2:	0793      	lsls	r3, r2, #30
 8006da4:	680e      	ldr	r6, [r1, #0]
 8006da6:	bf08      	it	eq
 8006da8:	694b      	ldreq	r3, [r1, #20]
 8006daa:	600f      	str	r7, [r1, #0]
 8006dac:	bf18      	it	ne
 8006dae:	2300      	movne	r3, #0
 8006db0:	eba6 0807 	sub.w	r8, r6, r7
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	f1b8 0f00 	cmp.w	r8, #0
 8006dba:	dd9c      	ble.n	8006cf6 <__sflush_r+0x1a>
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	463a      	mov	r2, r7
 8006dc0:	6a21      	ldr	r1, [r4, #32]
 8006dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b0      	blx	r6
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dc06      	bgt.n	8006dda <__sflush_r+0xfe>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e78e      	b.n	8006cf8 <__sflush_r+0x1c>
 8006dda:	4407      	add	r7, r0
 8006ddc:	eba8 0800 	sub.w	r8, r8, r0
 8006de0:	e7e9      	b.n	8006db6 <__sflush_r+0xda>
 8006de2:	bf00      	nop
 8006de4:	20400001 	.word	0x20400001

08006de8 <_fflush_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	690b      	ldr	r3, [r1, #16]
 8006dec:	4605      	mov	r5, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	b1db      	cbz	r3, 8006e2a <_fflush_r+0x42>
 8006df2:	b118      	cbz	r0, 8006dfc <_fflush_r+0x14>
 8006df4:	6983      	ldr	r3, [r0, #24]
 8006df6:	b90b      	cbnz	r3, 8006dfc <_fflush_r+0x14>
 8006df8:	f000 f860 	bl	8006ebc <__sinit>
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <_fflush_r+0x48>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d109      	bne.n	8006e16 <_fflush_r+0x2e>
 8006e02:	686c      	ldr	r4, [r5, #4]
 8006e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e08:	b17b      	cbz	r3, 8006e2a <_fflush_r+0x42>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e12:	f7ff bf63 	b.w	8006cdc <__sflush_r>
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <_fflush_r+0x4c>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d101      	bne.n	8006e20 <_fflush_r+0x38>
 8006e1c:	68ac      	ldr	r4, [r5, #8]
 8006e1e:	e7f1      	b.n	8006e04 <_fflush_r+0x1c>
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <_fflush_r+0x50>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	bf08      	it	eq
 8006e26:	68ec      	ldreq	r4, [r5, #12]
 8006e28:	e7ec      	b.n	8006e04 <_fflush_r+0x1c>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	bf00      	nop
 8006e30:	080080cc 	.word	0x080080cc
 8006e34:	080080ec 	.word	0x080080ec
 8006e38:	080080ac 	.word	0x080080ac

08006e3c <std>:
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	4604      	mov	r4, r0
 8006e42:	e9c0 3300 	strd	r3, r3, [r0]
 8006e46:	6083      	str	r3, [r0, #8]
 8006e48:	8181      	strh	r1, [r0, #12]
 8006e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e4c:	81c2      	strh	r2, [r0, #14]
 8006e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e52:	6183      	str	r3, [r0, #24]
 8006e54:	4619      	mov	r1, r3
 8006e56:	2208      	movs	r2, #8
 8006e58:	305c      	adds	r0, #92	; 0x5c
 8006e5a:	f7ff fdd3 	bl	8006a04 <memset>
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <std+0x38>)
 8006e60:	6263      	str	r3, [r4, #36]	; 0x24
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x3c>)
 8006e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x40>)
 8006e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x44>)
 8006e6c:	6224      	str	r4, [r4, #32]
 8006e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	08007a3d 	.word	0x08007a3d
 8006e78:	08007a5f 	.word	0x08007a5f
 8006e7c:	08007a97 	.word	0x08007a97
 8006e80:	08007abb 	.word	0x08007abb

08006e84 <_cleanup_r>:
 8006e84:	4901      	ldr	r1, [pc, #4]	; (8006e8c <_cleanup_r+0x8>)
 8006e86:	f000 b885 	b.w	8006f94 <_fwalk_reent>
 8006e8a:	bf00      	nop
 8006e8c:	08006de9 	.word	0x08006de9

08006e90 <__sfmoreglue>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	1e4a      	subs	r2, r1, #1
 8006e94:	2568      	movs	r5, #104	; 0x68
 8006e96:	4355      	muls	r5, r2
 8006e98:	460e      	mov	r6, r1
 8006e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e9e:	f000 f949 	bl	8007134 <_malloc_r>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	b140      	cbz	r0, 8006eb8 <__sfmoreglue+0x28>
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8006eac:	300c      	adds	r0, #12
 8006eae:	60a0      	str	r0, [r4, #8]
 8006eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb4:	f7ff fda6 	bl	8006a04 <memset>
 8006eb8:	4620      	mov	r0, r4
 8006eba:	bd70      	pop	{r4, r5, r6, pc}

08006ebc <__sinit>:
 8006ebc:	6983      	ldr	r3, [r0, #24]
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	bb33      	cbnz	r3, 8006f12 <__sinit+0x56>
 8006ec4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006ec8:	6503      	str	r3, [r0, #80]	; 0x50
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <__sinit+0x58>)
 8006ecc:	4a12      	ldr	r2, [pc, #72]	; (8006f18 <__sinit+0x5c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6282      	str	r2, [r0, #40]	; 0x28
 8006ed2:	4298      	cmp	r0, r3
 8006ed4:	bf04      	itt	eq
 8006ed6:	2301      	moveq	r3, #1
 8006ed8:	6183      	streq	r3, [r0, #24]
 8006eda:	f000 f81f 	bl	8006f1c <__sfp>
 8006ede:	6060      	str	r0, [r4, #4]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 f81b 	bl	8006f1c <__sfp>
 8006ee6:	60a0      	str	r0, [r4, #8]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 f817 	bl	8006f1c <__sfp>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	60e0      	str	r0, [r4, #12]
 8006ef2:	2104      	movs	r1, #4
 8006ef4:	6860      	ldr	r0, [r4, #4]
 8006ef6:	f7ff ffa1 	bl	8006e3c <std>
 8006efa:	2201      	movs	r2, #1
 8006efc:	2109      	movs	r1, #9
 8006efe:	68a0      	ldr	r0, [r4, #8]
 8006f00:	f7ff ff9c 	bl	8006e3c <std>
 8006f04:	2202      	movs	r2, #2
 8006f06:	2112      	movs	r1, #18
 8006f08:	68e0      	ldr	r0, [r4, #12]
 8006f0a:	f7ff ff97 	bl	8006e3c <std>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61a3      	str	r3, [r4, #24]
 8006f12:	bd10      	pop	{r4, pc}
 8006f14:	080080a8 	.word	0x080080a8
 8006f18:	08006e85 	.word	0x08006e85

08006f1c <__sfp>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <__sfp+0x70>)
 8006f20:	681e      	ldr	r6, [r3, #0]
 8006f22:	69b3      	ldr	r3, [r6, #24]
 8006f24:	4607      	mov	r7, r0
 8006f26:	b913      	cbnz	r3, 8006f2e <__sfp+0x12>
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff ffc7 	bl	8006ebc <__sinit>
 8006f2e:	3648      	adds	r6, #72	; 0x48
 8006f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	d503      	bpl.n	8006f40 <__sfp+0x24>
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	b133      	cbz	r3, 8006f4a <__sfp+0x2e>
 8006f3c:	6836      	ldr	r6, [r6, #0]
 8006f3e:	e7f7      	b.n	8006f30 <__sfp+0x14>
 8006f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f44:	b16d      	cbz	r5, 8006f62 <__sfp+0x46>
 8006f46:	3468      	adds	r4, #104	; 0x68
 8006f48:	e7f4      	b.n	8006f34 <__sfp+0x18>
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff ff9f 	bl	8006e90 <__sfmoreglue>
 8006f52:	6030      	str	r0, [r6, #0]
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1f1      	bne.n	8006f3c <__sfp+0x20>
 8006f58:	230c      	movs	r3, #12
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <__sfp+0x74>)
 8006f64:	6665      	str	r5, [r4, #100]	; 0x64
 8006f66:	e9c4 5500 	strd	r5, r5, [r4]
 8006f6a:	60a5      	str	r5, [r4, #8]
 8006f6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006f70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006f74:	2208      	movs	r2, #8
 8006f76:	4629      	mov	r1, r5
 8006f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f7c:	f7ff fd42 	bl	8006a04 <memset>
 8006f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f88:	e7e9      	b.n	8006f5e <__sfp+0x42>
 8006f8a:	bf00      	nop
 8006f8c:	080080a8 	.word	0x080080a8
 8006f90:	ffff0001 	.word	0xffff0001

08006f94 <_fwalk_reent>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4680      	mov	r8, r0
 8006f9a:	4689      	mov	r9, r1
 8006f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	b914      	cbnz	r4, 8006faa <_fwalk_reent+0x16>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006faa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006fae:	3f01      	subs	r7, #1
 8006fb0:	d501      	bpl.n	8006fb6 <_fwalk_reent+0x22>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	e7f5      	b.n	8006fa2 <_fwalk_reent+0xe>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d907      	bls.n	8006fcc <_fwalk_reent+0x38>
 8006fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	d003      	beq.n	8006fcc <_fwalk_reent+0x38>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	47c8      	blx	r9
 8006fca:	4306      	orrs	r6, r0
 8006fcc:	3568      	adds	r5, #104	; 0x68
 8006fce:	e7ee      	b.n	8006fae <_fwalk_reent+0x1a>

08006fd0 <__swhatbuf_r>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	460e      	mov	r6, r1
 8006fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	b096      	sub	sp, #88	; 0x58
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	da07      	bge.n	8006ff2 <__swhatbuf_r+0x22>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	89b3      	ldrh	r3, [r6, #12]
 8006fe8:	061a      	lsls	r2, r3, #24
 8006fea:	d410      	bmi.n	800700e <__swhatbuf_r+0x3e>
 8006fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff0:	e00e      	b.n	8007010 <__swhatbuf_r+0x40>
 8006ff2:	466a      	mov	r2, sp
 8006ff4:	f000 fd88 	bl	8007b08 <_fstat_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	dbf2      	blt.n	8006fe2 <__swhatbuf_r+0x12>
 8006ffc:	9a01      	ldr	r2, [sp, #4]
 8006ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007006:	425a      	negs	r2, r3
 8007008:	415a      	adcs	r2, r3
 800700a:	602a      	str	r2, [r5, #0]
 800700c:	e7ee      	b.n	8006fec <__swhatbuf_r+0x1c>
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	2000      	movs	r0, #0
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	b016      	add	sp, #88	; 0x58
 8007016:	bd70      	pop	{r4, r5, r6, pc}

08007018 <__smakebuf_r>:
 8007018:	898b      	ldrh	r3, [r1, #12]
 800701a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800701c:	079d      	lsls	r5, r3, #30
 800701e:	4606      	mov	r6, r0
 8007020:	460c      	mov	r4, r1
 8007022:	d507      	bpl.n	8007034 <__smakebuf_r+0x1c>
 8007024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	2301      	movs	r3, #1
 800702e:	6163      	str	r3, [r4, #20]
 8007030:	b002      	add	sp, #8
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	ab01      	add	r3, sp, #4
 8007036:	466a      	mov	r2, sp
 8007038:	f7ff ffca 	bl	8006fd0 <__swhatbuf_r>
 800703c:	9900      	ldr	r1, [sp, #0]
 800703e:	4605      	mov	r5, r0
 8007040:	4630      	mov	r0, r6
 8007042:	f000 f877 	bl	8007134 <_malloc_r>
 8007046:	b948      	cbnz	r0, 800705c <__smakebuf_r+0x44>
 8007048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704c:	059a      	lsls	r2, r3, #22
 800704e:	d4ef      	bmi.n	8007030 <__smakebuf_r+0x18>
 8007050:	f023 0303 	bic.w	r3, r3, #3
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	e7e3      	b.n	8007024 <__smakebuf_r+0xc>
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <__smakebuf_r+0x7c>)
 800705e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	6020      	str	r0, [r4, #0]
 8007064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	9b00      	ldr	r3, [sp, #0]
 800706c:	6163      	str	r3, [r4, #20]
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	6120      	str	r0, [r4, #16]
 8007072:	b15b      	cbz	r3, 800708c <__smakebuf_r+0x74>
 8007074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007078:	4630      	mov	r0, r6
 800707a:	f000 fd57 	bl	8007b2c <_isatty_r>
 800707e:	b128      	cbz	r0, 800708c <__smakebuf_r+0x74>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	431d      	orrs	r5, r3
 8007090:	81a5      	strh	r5, [r4, #12]
 8007092:	e7cd      	b.n	8007030 <__smakebuf_r+0x18>
 8007094:	08006e85 	.word	0x08006e85

08007098 <_free_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4605      	mov	r5, r0
 800709c:	2900      	cmp	r1, #0
 800709e:	d045      	beq.n	800712c <_free_r+0x94>
 80070a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a4:	1f0c      	subs	r4, r1, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfb8      	it	lt
 80070aa:	18e4      	addlt	r4, r4, r3
 80070ac:	f000 fd79 	bl	8007ba2 <__malloc_lock>
 80070b0:	4a1f      	ldr	r2, [pc, #124]	; (8007130 <_free_r+0x98>)
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	4610      	mov	r0, r2
 80070b6:	b933      	cbnz	r3, 80070c6 <_free_r+0x2e>
 80070b8:	6063      	str	r3, [r4, #4]
 80070ba:	6014      	str	r4, [r2, #0]
 80070bc:	4628      	mov	r0, r5
 80070be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c2:	f000 bd6f 	b.w	8007ba4 <__malloc_unlock>
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	d90c      	bls.n	80070e4 <_free_r+0x4c>
 80070ca:	6821      	ldr	r1, [r4, #0]
 80070cc:	1862      	adds	r2, r4, r1
 80070ce:	4293      	cmp	r3, r2
 80070d0:	bf04      	itt	eq
 80070d2:	681a      	ldreq	r2, [r3, #0]
 80070d4:	685b      	ldreq	r3, [r3, #4]
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	bf04      	itt	eq
 80070da:	1852      	addeq	r2, r2, r1
 80070dc:	6022      	streq	r2, [r4, #0]
 80070de:	6004      	str	r4, [r0, #0]
 80070e0:	e7ec      	b.n	80070bc <_free_r+0x24>
 80070e2:	4613      	mov	r3, r2
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	b10a      	cbz	r2, 80070ec <_free_r+0x54>
 80070e8:	42a2      	cmp	r2, r4
 80070ea:	d9fa      	bls.n	80070e2 <_free_r+0x4a>
 80070ec:	6819      	ldr	r1, [r3, #0]
 80070ee:	1858      	adds	r0, r3, r1
 80070f0:	42a0      	cmp	r0, r4
 80070f2:	d10b      	bne.n	800710c <_free_r+0x74>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	4401      	add	r1, r0
 80070f8:	1858      	adds	r0, r3, r1
 80070fa:	4282      	cmp	r2, r0
 80070fc:	6019      	str	r1, [r3, #0]
 80070fe:	d1dd      	bne.n	80070bc <_free_r+0x24>
 8007100:	6810      	ldr	r0, [r2, #0]
 8007102:	6852      	ldr	r2, [r2, #4]
 8007104:	605a      	str	r2, [r3, #4]
 8007106:	4401      	add	r1, r0
 8007108:	6019      	str	r1, [r3, #0]
 800710a:	e7d7      	b.n	80070bc <_free_r+0x24>
 800710c:	d902      	bls.n	8007114 <_free_r+0x7c>
 800710e:	230c      	movs	r3, #12
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	e7d3      	b.n	80070bc <_free_r+0x24>
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	1821      	adds	r1, r4, r0
 8007118:	428a      	cmp	r2, r1
 800711a:	bf04      	itt	eq
 800711c:	6811      	ldreq	r1, [r2, #0]
 800711e:	6852      	ldreq	r2, [r2, #4]
 8007120:	6062      	str	r2, [r4, #4]
 8007122:	bf04      	itt	eq
 8007124:	1809      	addeq	r1, r1, r0
 8007126:	6021      	streq	r1, [r4, #0]
 8007128:	605c      	str	r4, [r3, #4]
 800712a:	e7c7      	b.n	80070bc <_free_r+0x24>
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	bf00      	nop
 8007130:	20000134 	.word	0x20000134

08007134 <_malloc_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	1ccd      	adds	r5, r1, #3
 8007138:	f025 0503 	bic.w	r5, r5, #3
 800713c:	3508      	adds	r5, #8
 800713e:	2d0c      	cmp	r5, #12
 8007140:	bf38      	it	cc
 8007142:	250c      	movcc	r5, #12
 8007144:	2d00      	cmp	r5, #0
 8007146:	4606      	mov	r6, r0
 8007148:	db01      	blt.n	800714e <_malloc_r+0x1a>
 800714a:	42a9      	cmp	r1, r5
 800714c:	d903      	bls.n	8007156 <_malloc_r+0x22>
 800714e:	230c      	movs	r3, #12
 8007150:	6033      	str	r3, [r6, #0]
 8007152:	2000      	movs	r0, #0
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	f000 fd24 	bl	8007ba2 <__malloc_lock>
 800715a:	4a21      	ldr	r2, [pc, #132]	; (80071e0 <_malloc_r+0xac>)
 800715c:	6814      	ldr	r4, [r2, #0]
 800715e:	4621      	mov	r1, r4
 8007160:	b991      	cbnz	r1, 8007188 <_malloc_r+0x54>
 8007162:	4c20      	ldr	r4, [pc, #128]	; (80071e4 <_malloc_r+0xb0>)
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	b91b      	cbnz	r3, 8007170 <_malloc_r+0x3c>
 8007168:	4630      	mov	r0, r6
 800716a:	f000 fc57 	bl	8007a1c <_sbrk_r>
 800716e:	6020      	str	r0, [r4, #0]
 8007170:	4629      	mov	r1, r5
 8007172:	4630      	mov	r0, r6
 8007174:	f000 fc52 	bl	8007a1c <_sbrk_r>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d124      	bne.n	80071c6 <_malloc_r+0x92>
 800717c:	230c      	movs	r3, #12
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	4630      	mov	r0, r6
 8007182:	f000 fd0f 	bl	8007ba4 <__malloc_unlock>
 8007186:	e7e4      	b.n	8007152 <_malloc_r+0x1e>
 8007188:	680b      	ldr	r3, [r1, #0]
 800718a:	1b5b      	subs	r3, r3, r5
 800718c:	d418      	bmi.n	80071c0 <_malloc_r+0x8c>
 800718e:	2b0b      	cmp	r3, #11
 8007190:	d90f      	bls.n	80071b2 <_malloc_r+0x7e>
 8007192:	600b      	str	r3, [r1, #0]
 8007194:	50cd      	str	r5, [r1, r3]
 8007196:	18cc      	adds	r4, r1, r3
 8007198:	4630      	mov	r0, r6
 800719a:	f000 fd03 	bl	8007ba4 <__malloc_unlock>
 800719e:	f104 000b 	add.w	r0, r4, #11
 80071a2:	1d23      	adds	r3, r4, #4
 80071a4:	f020 0007 	bic.w	r0, r0, #7
 80071a8:	1ac3      	subs	r3, r0, r3
 80071aa:	d0d3      	beq.n	8007154 <_malloc_r+0x20>
 80071ac:	425a      	negs	r2, r3
 80071ae:	50e2      	str	r2, [r4, r3]
 80071b0:	e7d0      	b.n	8007154 <_malloc_r+0x20>
 80071b2:	428c      	cmp	r4, r1
 80071b4:	684b      	ldr	r3, [r1, #4]
 80071b6:	bf16      	itet	ne
 80071b8:	6063      	strne	r3, [r4, #4]
 80071ba:	6013      	streq	r3, [r2, #0]
 80071bc:	460c      	movne	r4, r1
 80071be:	e7eb      	b.n	8007198 <_malloc_r+0x64>
 80071c0:	460c      	mov	r4, r1
 80071c2:	6849      	ldr	r1, [r1, #4]
 80071c4:	e7cc      	b.n	8007160 <_malloc_r+0x2c>
 80071c6:	1cc4      	adds	r4, r0, #3
 80071c8:	f024 0403 	bic.w	r4, r4, #3
 80071cc:	42a0      	cmp	r0, r4
 80071ce:	d005      	beq.n	80071dc <_malloc_r+0xa8>
 80071d0:	1a21      	subs	r1, r4, r0
 80071d2:	4630      	mov	r0, r6
 80071d4:	f000 fc22 	bl	8007a1c <_sbrk_r>
 80071d8:	3001      	adds	r0, #1
 80071da:	d0cf      	beq.n	800717c <_malloc_r+0x48>
 80071dc:	6025      	str	r5, [r4, #0]
 80071de:	e7db      	b.n	8007198 <_malloc_r+0x64>
 80071e0:	20000134 	.word	0x20000134
 80071e4:	20000138 	.word	0x20000138

080071e8 <__ssputs_r>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	688e      	ldr	r6, [r1, #8]
 80071ee:	429e      	cmp	r6, r3
 80071f0:	4682      	mov	sl, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4690      	mov	r8, r2
 80071f6:	4699      	mov	r9, r3
 80071f8:	d837      	bhi.n	800726a <__ssputs_r+0x82>
 80071fa:	898a      	ldrh	r2, [r1, #12]
 80071fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007200:	d031      	beq.n	8007266 <__ssputs_r+0x7e>
 8007202:	6825      	ldr	r5, [r4, #0]
 8007204:	6909      	ldr	r1, [r1, #16]
 8007206:	1a6f      	subs	r7, r5, r1
 8007208:	6965      	ldr	r5, [r4, #20]
 800720a:	2302      	movs	r3, #2
 800720c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007210:	fb95 f5f3 	sdiv	r5, r5, r3
 8007214:	f109 0301 	add.w	r3, r9, #1
 8007218:	443b      	add	r3, r7
 800721a:	429d      	cmp	r5, r3
 800721c:	bf38      	it	cc
 800721e:	461d      	movcc	r5, r3
 8007220:	0553      	lsls	r3, r2, #21
 8007222:	d530      	bpl.n	8007286 <__ssputs_r+0x9e>
 8007224:	4629      	mov	r1, r5
 8007226:	f7ff ff85 	bl	8007134 <_malloc_r>
 800722a:	4606      	mov	r6, r0
 800722c:	b950      	cbnz	r0, 8007244 <__ssputs_r+0x5c>
 800722e:	230c      	movs	r3, #12
 8007230:	f8ca 3000 	str.w	r3, [sl]
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007244:	463a      	mov	r2, r7
 8007246:	6921      	ldr	r1, [r4, #16]
 8007248:	f7ff fbd1 	bl	80069ee <memcpy>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	6126      	str	r6, [r4, #16]
 800725a:	6165      	str	r5, [r4, #20]
 800725c:	443e      	add	r6, r7
 800725e:	1bed      	subs	r5, r5, r7
 8007260:	6026      	str	r6, [r4, #0]
 8007262:	60a5      	str	r5, [r4, #8]
 8007264:	464e      	mov	r6, r9
 8007266:	454e      	cmp	r6, r9
 8007268:	d900      	bls.n	800726c <__ssputs_r+0x84>
 800726a:	464e      	mov	r6, r9
 800726c:	4632      	mov	r2, r6
 800726e:	4641      	mov	r1, r8
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	f000 fc7d 	bl	8007b70 <memmove>
 8007276:	68a3      	ldr	r3, [r4, #8]
 8007278:	1b9b      	subs	r3, r3, r6
 800727a:	60a3      	str	r3, [r4, #8]
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	441e      	add	r6, r3
 8007280:	6026      	str	r6, [r4, #0]
 8007282:	2000      	movs	r0, #0
 8007284:	e7dc      	b.n	8007240 <__ssputs_r+0x58>
 8007286:	462a      	mov	r2, r5
 8007288:	f000 fc8d 	bl	8007ba6 <_realloc_r>
 800728c:	4606      	mov	r6, r0
 800728e:	2800      	cmp	r0, #0
 8007290:	d1e2      	bne.n	8007258 <__ssputs_r+0x70>
 8007292:	6921      	ldr	r1, [r4, #16]
 8007294:	4650      	mov	r0, sl
 8007296:	f7ff feff 	bl	8007098 <_free_r>
 800729a:	e7c8      	b.n	800722e <__ssputs_r+0x46>

0800729c <_svfiprintf_r>:
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	461d      	mov	r5, r3
 80072a2:	898b      	ldrh	r3, [r1, #12]
 80072a4:	061f      	lsls	r7, r3, #24
 80072a6:	b09d      	sub	sp, #116	; 0x74
 80072a8:	4680      	mov	r8, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	4616      	mov	r6, r2
 80072ae:	d50f      	bpl.n	80072d0 <_svfiprintf_r+0x34>
 80072b0:	690b      	ldr	r3, [r1, #16]
 80072b2:	b96b      	cbnz	r3, 80072d0 <_svfiprintf_r+0x34>
 80072b4:	2140      	movs	r1, #64	; 0x40
 80072b6:	f7ff ff3d 	bl	8007134 <_malloc_r>
 80072ba:	6020      	str	r0, [r4, #0]
 80072bc:	6120      	str	r0, [r4, #16]
 80072be:	b928      	cbnz	r0, 80072cc <_svfiprintf_r+0x30>
 80072c0:	230c      	movs	r3, #12
 80072c2:	f8c8 3000 	str.w	r3, [r8]
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	e0c8      	b.n	800745e <_svfiprintf_r+0x1c2>
 80072cc:	2340      	movs	r3, #64	; 0x40
 80072ce:	6163      	str	r3, [r4, #20]
 80072d0:	2300      	movs	r3, #0
 80072d2:	9309      	str	r3, [sp, #36]	; 0x24
 80072d4:	2320      	movs	r3, #32
 80072d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072da:	2330      	movs	r3, #48	; 0x30
 80072dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072e0:	9503      	str	r5, [sp, #12]
 80072e2:	f04f 0b01 	mov.w	fp, #1
 80072e6:	4637      	mov	r7, r6
 80072e8:	463d      	mov	r5, r7
 80072ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072ee:	b10b      	cbz	r3, 80072f4 <_svfiprintf_r+0x58>
 80072f0:	2b25      	cmp	r3, #37	; 0x25
 80072f2:	d13e      	bne.n	8007372 <_svfiprintf_r+0xd6>
 80072f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80072f8:	d00b      	beq.n	8007312 <_svfiprintf_r+0x76>
 80072fa:	4653      	mov	r3, sl
 80072fc:	4632      	mov	r2, r6
 80072fe:	4621      	mov	r1, r4
 8007300:	4640      	mov	r0, r8
 8007302:	f7ff ff71 	bl	80071e8 <__ssputs_r>
 8007306:	3001      	adds	r0, #1
 8007308:	f000 80a4 	beq.w	8007454 <_svfiprintf_r+0x1b8>
 800730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730e:	4453      	add	r3, sl
 8007310:	9309      	str	r3, [sp, #36]	; 0x24
 8007312:	783b      	ldrb	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 809d 	beq.w	8007454 <_svfiprintf_r+0x1b8>
 800731a:	2300      	movs	r3, #0
 800731c:	f04f 32ff 	mov.w	r2, #4294967295
 8007320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	9307      	str	r3, [sp, #28]
 8007328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800732c:	931a      	str	r3, [sp, #104]	; 0x68
 800732e:	462f      	mov	r7, r5
 8007330:	2205      	movs	r2, #5
 8007332:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007336:	4850      	ldr	r0, [pc, #320]	; (8007478 <_svfiprintf_r+0x1dc>)
 8007338:	f7f8 ff6a 	bl	8000210 <memchr>
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	b9d0      	cbnz	r0, 8007376 <_svfiprintf_r+0xda>
 8007340:	06d9      	lsls	r1, r3, #27
 8007342:	bf44      	itt	mi
 8007344:	2220      	movmi	r2, #32
 8007346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800734a:	071a      	lsls	r2, r3, #28
 800734c:	bf44      	itt	mi
 800734e:	222b      	movmi	r2, #43	; 0x2b
 8007350:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007354:	782a      	ldrb	r2, [r5, #0]
 8007356:	2a2a      	cmp	r2, #42	; 0x2a
 8007358:	d015      	beq.n	8007386 <_svfiprintf_r+0xea>
 800735a:	9a07      	ldr	r2, [sp, #28]
 800735c:	462f      	mov	r7, r5
 800735e:	2000      	movs	r0, #0
 8007360:	250a      	movs	r5, #10
 8007362:	4639      	mov	r1, r7
 8007364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007368:	3b30      	subs	r3, #48	; 0x30
 800736a:	2b09      	cmp	r3, #9
 800736c:	d94d      	bls.n	800740a <_svfiprintf_r+0x16e>
 800736e:	b1b8      	cbz	r0, 80073a0 <_svfiprintf_r+0x104>
 8007370:	e00f      	b.n	8007392 <_svfiprintf_r+0xf6>
 8007372:	462f      	mov	r7, r5
 8007374:	e7b8      	b.n	80072e8 <_svfiprintf_r+0x4c>
 8007376:	4a40      	ldr	r2, [pc, #256]	; (8007478 <_svfiprintf_r+0x1dc>)
 8007378:	1a80      	subs	r0, r0, r2
 800737a:	fa0b f000 	lsl.w	r0, fp, r0
 800737e:	4318      	orrs	r0, r3
 8007380:	9004      	str	r0, [sp, #16]
 8007382:	463d      	mov	r5, r7
 8007384:	e7d3      	b.n	800732e <_svfiprintf_r+0x92>
 8007386:	9a03      	ldr	r2, [sp, #12]
 8007388:	1d11      	adds	r1, r2, #4
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	9103      	str	r1, [sp, #12]
 800738e:	2a00      	cmp	r2, #0
 8007390:	db01      	blt.n	8007396 <_svfiprintf_r+0xfa>
 8007392:	9207      	str	r2, [sp, #28]
 8007394:	e004      	b.n	80073a0 <_svfiprintf_r+0x104>
 8007396:	4252      	negs	r2, r2
 8007398:	f043 0302 	orr.w	r3, r3, #2
 800739c:	9207      	str	r2, [sp, #28]
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	783b      	ldrb	r3, [r7, #0]
 80073a2:	2b2e      	cmp	r3, #46	; 0x2e
 80073a4:	d10c      	bne.n	80073c0 <_svfiprintf_r+0x124>
 80073a6:	787b      	ldrb	r3, [r7, #1]
 80073a8:	2b2a      	cmp	r3, #42	; 0x2a
 80073aa:	d133      	bne.n	8007414 <_svfiprintf_r+0x178>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	9203      	str	r2, [sp, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfb8      	it	lt
 80073b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80073bc:	3702      	adds	r7, #2
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	4d2e      	ldr	r5, [pc, #184]	; (800747c <_svfiprintf_r+0x1e0>)
 80073c2:	7839      	ldrb	r1, [r7, #0]
 80073c4:	2203      	movs	r2, #3
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7f8 ff22 	bl	8000210 <memchr>
 80073cc:	b138      	cbz	r0, 80073de <_svfiprintf_r+0x142>
 80073ce:	2340      	movs	r3, #64	; 0x40
 80073d0:	1b40      	subs	r0, r0, r5
 80073d2:	fa03 f000 	lsl.w	r0, r3, r0
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	4303      	orrs	r3, r0
 80073da:	3701      	adds	r7, #1
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	7839      	ldrb	r1, [r7, #0]
 80073e0:	4827      	ldr	r0, [pc, #156]	; (8007480 <_svfiprintf_r+0x1e4>)
 80073e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073e6:	2206      	movs	r2, #6
 80073e8:	1c7e      	adds	r6, r7, #1
 80073ea:	f7f8 ff11 	bl	8000210 <memchr>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d038      	beq.n	8007464 <_svfiprintf_r+0x1c8>
 80073f2:	4b24      	ldr	r3, [pc, #144]	; (8007484 <_svfiprintf_r+0x1e8>)
 80073f4:	bb13      	cbnz	r3, 800743c <_svfiprintf_r+0x1a0>
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	3307      	adds	r3, #7
 80073fa:	f023 0307 	bic.w	r3, r3, #7
 80073fe:	3308      	adds	r3, #8
 8007400:	9303      	str	r3, [sp, #12]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	444b      	add	r3, r9
 8007406:	9309      	str	r3, [sp, #36]	; 0x24
 8007408:	e76d      	b.n	80072e6 <_svfiprintf_r+0x4a>
 800740a:	fb05 3202 	mla	r2, r5, r2, r3
 800740e:	2001      	movs	r0, #1
 8007410:	460f      	mov	r7, r1
 8007412:	e7a6      	b.n	8007362 <_svfiprintf_r+0xc6>
 8007414:	2300      	movs	r3, #0
 8007416:	3701      	adds	r7, #1
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	4619      	mov	r1, r3
 800741c:	250a      	movs	r5, #10
 800741e:	4638      	mov	r0, r7
 8007420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007424:	3a30      	subs	r2, #48	; 0x30
 8007426:	2a09      	cmp	r2, #9
 8007428:	d903      	bls.n	8007432 <_svfiprintf_r+0x196>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0c8      	beq.n	80073c0 <_svfiprintf_r+0x124>
 800742e:	9105      	str	r1, [sp, #20]
 8007430:	e7c6      	b.n	80073c0 <_svfiprintf_r+0x124>
 8007432:	fb05 2101 	mla	r1, r5, r1, r2
 8007436:	2301      	movs	r3, #1
 8007438:	4607      	mov	r7, r0
 800743a:	e7f0      	b.n	800741e <_svfiprintf_r+0x182>
 800743c:	ab03      	add	r3, sp, #12
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	4622      	mov	r2, r4
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <_svfiprintf_r+0x1ec>)
 8007444:	a904      	add	r1, sp, #16
 8007446:	4640      	mov	r0, r8
 8007448:	f3af 8000 	nop.w
 800744c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007450:	4681      	mov	r9, r0
 8007452:	d1d6      	bne.n	8007402 <_svfiprintf_r+0x166>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	065b      	lsls	r3, r3, #25
 8007458:	f53f af35 	bmi.w	80072c6 <_svfiprintf_r+0x2a>
 800745c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745e:	b01d      	add	sp, #116	; 0x74
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	ab03      	add	r3, sp, #12
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4622      	mov	r2, r4
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <_svfiprintf_r+0x1ec>)
 800746c:	a904      	add	r1, sp, #16
 800746e:	4640      	mov	r0, r8
 8007470:	f000 f9c2 	bl	80077f8 <_printf_i>
 8007474:	e7ea      	b.n	800744c <_svfiprintf_r+0x1b0>
 8007476:	bf00      	nop
 8007478:	0800810c 	.word	0x0800810c
 800747c:	08008112 	.word	0x08008112
 8007480:	08008116 	.word	0x08008116
 8007484:	00000000 	.word	0x00000000
 8007488:	080071e9 	.word	0x080071e9

0800748c <__sfputc_r>:
 800748c:	6893      	ldr	r3, [r2, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	b410      	push	{r4}
 8007494:	6093      	str	r3, [r2, #8]
 8007496:	da08      	bge.n	80074aa <__sfputc_r+0x1e>
 8007498:	6994      	ldr	r4, [r2, #24]
 800749a:	42a3      	cmp	r3, r4
 800749c:	db01      	blt.n	80074a2 <__sfputc_r+0x16>
 800749e:	290a      	cmp	r1, #10
 80074a0:	d103      	bne.n	80074aa <__sfputc_r+0x1e>
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	f7ff bb59 	b.w	8006b5c <__swbuf_r>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	1c58      	adds	r0, r3, #1
 80074ae:	6010      	str	r0, [r2, #0]
 80074b0:	7019      	strb	r1, [r3, #0]
 80074b2:	4608      	mov	r0, r1
 80074b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <__sfputs_r>:
 80074ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	18d5      	adds	r5, r2, r3
 80074c4:	42ac      	cmp	r4, r5
 80074c6:	d101      	bne.n	80074cc <__sfputs_r+0x12>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e007      	b.n	80074dc <__sfputs_r+0x22>
 80074cc:	463a      	mov	r2, r7
 80074ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffda 	bl	800748c <__sfputc_r>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d1f3      	bne.n	80074c4 <__sfputs_r+0xa>
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074e0 <_vfiprintf_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	460c      	mov	r4, r1
 80074e6:	b09d      	sub	sp, #116	; 0x74
 80074e8:	4617      	mov	r7, r2
 80074ea:	461d      	mov	r5, r3
 80074ec:	4606      	mov	r6, r0
 80074ee:	b118      	cbz	r0, 80074f8 <_vfiprintf_r+0x18>
 80074f0:	6983      	ldr	r3, [r0, #24]
 80074f2:	b90b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x18>
 80074f4:	f7ff fce2 	bl	8006ebc <__sinit>
 80074f8:	4b7c      	ldr	r3, [pc, #496]	; (80076ec <_vfiprintf_r+0x20c>)
 80074fa:	429c      	cmp	r4, r3
 80074fc:	d158      	bne.n	80075b0 <_vfiprintf_r+0xd0>
 80074fe:	6874      	ldr	r4, [r6, #4]
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	0718      	lsls	r0, r3, #28
 8007504:	d55e      	bpl.n	80075c4 <_vfiprintf_r+0xe4>
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d05b      	beq.n	80075c4 <_vfiprintf_r+0xe4>
 800750c:	2300      	movs	r3, #0
 800750e:	9309      	str	r3, [sp, #36]	; 0x24
 8007510:	2320      	movs	r3, #32
 8007512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007516:	2330      	movs	r3, #48	; 0x30
 8007518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800751c:	9503      	str	r5, [sp, #12]
 800751e:	f04f 0b01 	mov.w	fp, #1
 8007522:	46b8      	mov	r8, r7
 8007524:	4645      	mov	r5, r8
 8007526:	f815 3b01 	ldrb.w	r3, [r5], #1
 800752a:	b10b      	cbz	r3, 8007530 <_vfiprintf_r+0x50>
 800752c:	2b25      	cmp	r3, #37	; 0x25
 800752e:	d154      	bne.n	80075da <_vfiprintf_r+0xfa>
 8007530:	ebb8 0a07 	subs.w	sl, r8, r7
 8007534:	d00b      	beq.n	800754e <_vfiprintf_r+0x6e>
 8007536:	4653      	mov	r3, sl
 8007538:	463a      	mov	r2, r7
 800753a:	4621      	mov	r1, r4
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff ffbc 	bl	80074ba <__sfputs_r>
 8007542:	3001      	adds	r0, #1
 8007544:	f000 80c2 	beq.w	80076cc <_vfiprintf_r+0x1ec>
 8007548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754a:	4453      	add	r3, sl
 800754c:	9309      	str	r3, [sp, #36]	; 0x24
 800754e:	f898 3000 	ldrb.w	r3, [r8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80ba 	beq.w	80076cc <_vfiprintf_r+0x1ec>
 8007558:	2300      	movs	r3, #0
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	9307      	str	r3, [sp, #28]
 8007566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800756a:	931a      	str	r3, [sp, #104]	; 0x68
 800756c:	46a8      	mov	r8, r5
 800756e:	2205      	movs	r2, #5
 8007570:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007574:	485e      	ldr	r0, [pc, #376]	; (80076f0 <_vfiprintf_r+0x210>)
 8007576:	f7f8 fe4b 	bl	8000210 <memchr>
 800757a:	9b04      	ldr	r3, [sp, #16]
 800757c:	bb78      	cbnz	r0, 80075de <_vfiprintf_r+0xfe>
 800757e:	06d9      	lsls	r1, r3, #27
 8007580:	bf44      	itt	mi
 8007582:	2220      	movmi	r2, #32
 8007584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007588:	071a      	lsls	r2, r3, #28
 800758a:	bf44      	itt	mi
 800758c:	222b      	movmi	r2, #43	; 0x2b
 800758e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007592:	782a      	ldrb	r2, [r5, #0]
 8007594:	2a2a      	cmp	r2, #42	; 0x2a
 8007596:	d02a      	beq.n	80075ee <_vfiprintf_r+0x10e>
 8007598:	9a07      	ldr	r2, [sp, #28]
 800759a:	46a8      	mov	r8, r5
 800759c:	2000      	movs	r0, #0
 800759e:	250a      	movs	r5, #10
 80075a0:	4641      	mov	r1, r8
 80075a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075a6:	3b30      	subs	r3, #48	; 0x30
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d969      	bls.n	8007680 <_vfiprintf_r+0x1a0>
 80075ac:	b360      	cbz	r0, 8007608 <_vfiprintf_r+0x128>
 80075ae:	e024      	b.n	80075fa <_vfiprintf_r+0x11a>
 80075b0:	4b50      	ldr	r3, [pc, #320]	; (80076f4 <_vfiprintf_r+0x214>)
 80075b2:	429c      	cmp	r4, r3
 80075b4:	d101      	bne.n	80075ba <_vfiprintf_r+0xda>
 80075b6:	68b4      	ldr	r4, [r6, #8]
 80075b8:	e7a2      	b.n	8007500 <_vfiprintf_r+0x20>
 80075ba:	4b4f      	ldr	r3, [pc, #316]	; (80076f8 <_vfiprintf_r+0x218>)
 80075bc:	429c      	cmp	r4, r3
 80075be:	bf08      	it	eq
 80075c0:	68f4      	ldreq	r4, [r6, #12]
 80075c2:	e79d      	b.n	8007500 <_vfiprintf_r+0x20>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4630      	mov	r0, r6
 80075c8:	f7ff fb1a 	bl	8006c00 <__swsetup_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d09d      	beq.n	800750c <_vfiprintf_r+0x2c>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b01d      	add	sp, #116	; 0x74
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	46a8      	mov	r8, r5
 80075dc:	e7a2      	b.n	8007524 <_vfiprintf_r+0x44>
 80075de:	4a44      	ldr	r2, [pc, #272]	; (80076f0 <_vfiprintf_r+0x210>)
 80075e0:	1a80      	subs	r0, r0, r2
 80075e2:	fa0b f000 	lsl.w	r0, fp, r0
 80075e6:	4318      	orrs	r0, r3
 80075e8:	9004      	str	r0, [sp, #16]
 80075ea:	4645      	mov	r5, r8
 80075ec:	e7be      	b.n	800756c <_vfiprintf_r+0x8c>
 80075ee:	9a03      	ldr	r2, [sp, #12]
 80075f0:	1d11      	adds	r1, r2, #4
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	9103      	str	r1, [sp, #12]
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	db01      	blt.n	80075fe <_vfiprintf_r+0x11e>
 80075fa:	9207      	str	r2, [sp, #28]
 80075fc:	e004      	b.n	8007608 <_vfiprintf_r+0x128>
 80075fe:	4252      	negs	r2, r2
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	9207      	str	r2, [sp, #28]
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	f898 3000 	ldrb.w	r3, [r8]
 800760c:	2b2e      	cmp	r3, #46	; 0x2e
 800760e:	d10e      	bne.n	800762e <_vfiprintf_r+0x14e>
 8007610:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007614:	2b2a      	cmp	r3, #42	; 0x2a
 8007616:	d138      	bne.n	800768a <_vfiprintf_r+0x1aa>
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	1d1a      	adds	r2, r3, #4
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	9203      	str	r2, [sp, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bfb8      	it	lt
 8007624:	f04f 33ff 	movlt.w	r3, #4294967295
 8007628:	f108 0802 	add.w	r8, r8, #2
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	4d33      	ldr	r5, [pc, #204]	; (80076fc <_vfiprintf_r+0x21c>)
 8007630:	f898 1000 	ldrb.w	r1, [r8]
 8007634:	2203      	movs	r2, #3
 8007636:	4628      	mov	r0, r5
 8007638:	f7f8 fdea 	bl	8000210 <memchr>
 800763c:	b140      	cbz	r0, 8007650 <_vfiprintf_r+0x170>
 800763e:	2340      	movs	r3, #64	; 0x40
 8007640:	1b40      	subs	r0, r0, r5
 8007642:	fa03 f000 	lsl.w	r0, r3, r0
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	4303      	orrs	r3, r0
 800764a:	f108 0801 	add.w	r8, r8, #1
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	f898 1000 	ldrb.w	r1, [r8]
 8007654:	482a      	ldr	r0, [pc, #168]	; (8007700 <_vfiprintf_r+0x220>)
 8007656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765a:	2206      	movs	r2, #6
 800765c:	f108 0701 	add.w	r7, r8, #1
 8007660:	f7f8 fdd6 	bl	8000210 <memchr>
 8007664:	2800      	cmp	r0, #0
 8007666:	d037      	beq.n	80076d8 <_vfiprintf_r+0x1f8>
 8007668:	4b26      	ldr	r3, [pc, #152]	; (8007704 <_vfiprintf_r+0x224>)
 800766a:	bb1b      	cbnz	r3, 80076b4 <_vfiprintf_r+0x1d4>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	3307      	adds	r3, #7
 8007670:	f023 0307 	bic.w	r3, r3, #7
 8007674:	3308      	adds	r3, #8
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767a:	444b      	add	r3, r9
 800767c:	9309      	str	r3, [sp, #36]	; 0x24
 800767e:	e750      	b.n	8007522 <_vfiprintf_r+0x42>
 8007680:	fb05 3202 	mla	r2, r5, r2, r3
 8007684:	2001      	movs	r0, #1
 8007686:	4688      	mov	r8, r1
 8007688:	e78a      	b.n	80075a0 <_vfiprintf_r+0xc0>
 800768a:	2300      	movs	r3, #0
 800768c:	f108 0801 	add.w	r8, r8, #1
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	4619      	mov	r1, r3
 8007694:	250a      	movs	r5, #10
 8007696:	4640      	mov	r0, r8
 8007698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769c:	3a30      	subs	r2, #48	; 0x30
 800769e:	2a09      	cmp	r2, #9
 80076a0:	d903      	bls.n	80076aa <_vfiprintf_r+0x1ca>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0c3      	beq.n	800762e <_vfiprintf_r+0x14e>
 80076a6:	9105      	str	r1, [sp, #20]
 80076a8:	e7c1      	b.n	800762e <_vfiprintf_r+0x14e>
 80076aa:	fb05 2101 	mla	r1, r5, r1, r2
 80076ae:	2301      	movs	r3, #1
 80076b0:	4680      	mov	r8, r0
 80076b2:	e7f0      	b.n	8007696 <_vfiprintf_r+0x1b6>
 80076b4:	ab03      	add	r3, sp, #12
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4622      	mov	r2, r4
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <_vfiprintf_r+0x228>)
 80076bc:	a904      	add	r1, sp, #16
 80076be:	4630      	mov	r0, r6
 80076c0:	f3af 8000 	nop.w
 80076c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076c8:	4681      	mov	r9, r0
 80076ca:	d1d5      	bne.n	8007678 <_vfiprintf_r+0x198>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	065b      	lsls	r3, r3, #25
 80076d0:	f53f af7e 	bmi.w	80075d0 <_vfiprintf_r+0xf0>
 80076d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d6:	e77d      	b.n	80075d4 <_vfiprintf_r+0xf4>
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4622      	mov	r2, r4
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <_vfiprintf_r+0x228>)
 80076e0:	a904      	add	r1, sp, #16
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f888 	bl	80077f8 <_printf_i>
 80076e8:	e7ec      	b.n	80076c4 <_vfiprintf_r+0x1e4>
 80076ea:	bf00      	nop
 80076ec:	080080cc 	.word	0x080080cc
 80076f0:	0800810c 	.word	0x0800810c
 80076f4:	080080ec 	.word	0x080080ec
 80076f8:	080080ac 	.word	0x080080ac
 80076fc:	08008112 	.word	0x08008112
 8007700:	08008116 	.word	0x08008116
 8007704:	00000000 	.word	0x00000000
 8007708:	080074bb 	.word	0x080074bb

0800770c <_printf_common>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	4691      	mov	r9, r2
 8007712:	461f      	mov	r7, r3
 8007714:	688a      	ldr	r2, [r1, #8]
 8007716:	690b      	ldr	r3, [r1, #16]
 8007718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800771c:	4293      	cmp	r3, r2
 800771e:	bfb8      	it	lt
 8007720:	4613      	movlt	r3, r2
 8007722:	f8c9 3000 	str.w	r3, [r9]
 8007726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	b112      	cbz	r2, 8007736 <_printf_common+0x2a>
 8007730:	3301      	adds	r3, #1
 8007732:	f8c9 3000 	str.w	r3, [r9]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	0699      	lsls	r1, r3, #26
 800773a:	bf42      	ittt	mi
 800773c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007740:	3302      	addmi	r3, #2
 8007742:	f8c9 3000 	strmi.w	r3, [r9]
 8007746:	6825      	ldr	r5, [r4, #0]
 8007748:	f015 0506 	ands.w	r5, r5, #6
 800774c:	d107      	bne.n	800775e <_printf_common+0x52>
 800774e:	f104 0a19 	add.w	sl, r4, #25
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	f8d9 2000 	ldr.w	r2, [r9]
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	42ab      	cmp	r3, r5
 800775c:	dc28      	bgt.n	80077b0 <_printf_common+0xa4>
 800775e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	3300      	adds	r3, #0
 8007766:	bf18      	it	ne
 8007768:	2301      	movne	r3, #1
 800776a:	0692      	lsls	r2, r2, #26
 800776c:	d42d      	bmi.n	80077ca <_printf_common+0xbe>
 800776e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007772:	4639      	mov	r1, r7
 8007774:	4630      	mov	r0, r6
 8007776:	47c0      	blx	r8
 8007778:	3001      	adds	r0, #1
 800777a:	d020      	beq.n	80077be <_printf_common+0xb2>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	68e5      	ldr	r5, [r4, #12]
 8007780:	f8d9 2000 	ldr.w	r2, [r9]
 8007784:	f003 0306 	and.w	r3, r3, #6
 8007788:	2b04      	cmp	r3, #4
 800778a:	bf08      	it	eq
 800778c:	1aad      	subeq	r5, r5, r2
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	bf0c      	ite	eq
 8007794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007798:	2500      	movne	r5, #0
 800779a:	4293      	cmp	r3, r2
 800779c:	bfc4      	itt	gt
 800779e:	1a9b      	subgt	r3, r3, r2
 80077a0:	18ed      	addgt	r5, r5, r3
 80077a2:	f04f 0900 	mov.w	r9, #0
 80077a6:	341a      	adds	r4, #26
 80077a8:	454d      	cmp	r5, r9
 80077aa:	d11a      	bne.n	80077e2 <_printf_common+0xd6>
 80077ac:	2000      	movs	r0, #0
 80077ae:	e008      	b.n	80077c2 <_printf_common+0xb6>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4652      	mov	r2, sl
 80077b4:	4639      	mov	r1, r7
 80077b6:	4630      	mov	r0, r6
 80077b8:	47c0      	blx	r8
 80077ba:	3001      	adds	r0, #1
 80077bc:	d103      	bne.n	80077c6 <_printf_common+0xba>
 80077be:	f04f 30ff 	mov.w	r0, #4294967295
 80077c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c6:	3501      	adds	r5, #1
 80077c8:	e7c3      	b.n	8007752 <_printf_common+0x46>
 80077ca:	18e1      	adds	r1, r4, r3
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	2030      	movs	r0, #48	; 0x30
 80077d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077d4:	4422      	add	r2, r4
 80077d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077de:	3302      	adds	r3, #2
 80077e0:	e7c5      	b.n	800776e <_printf_common+0x62>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4622      	mov	r2, r4
 80077e6:	4639      	mov	r1, r7
 80077e8:	4630      	mov	r0, r6
 80077ea:	47c0      	blx	r8
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0e6      	beq.n	80077be <_printf_common+0xb2>
 80077f0:	f109 0901 	add.w	r9, r9, #1
 80077f4:	e7d8      	b.n	80077a8 <_printf_common+0x9c>
	...

080077f8 <_printf_i>:
 80077f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007800:	460c      	mov	r4, r1
 8007802:	7e09      	ldrb	r1, [r1, #24]
 8007804:	b085      	sub	sp, #20
 8007806:	296e      	cmp	r1, #110	; 0x6e
 8007808:	4617      	mov	r7, r2
 800780a:	4606      	mov	r6, r0
 800780c:	4698      	mov	r8, r3
 800780e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007810:	f000 80b3 	beq.w	800797a <_printf_i+0x182>
 8007814:	d822      	bhi.n	800785c <_printf_i+0x64>
 8007816:	2963      	cmp	r1, #99	; 0x63
 8007818:	d036      	beq.n	8007888 <_printf_i+0x90>
 800781a:	d80a      	bhi.n	8007832 <_printf_i+0x3a>
 800781c:	2900      	cmp	r1, #0
 800781e:	f000 80b9 	beq.w	8007994 <_printf_i+0x19c>
 8007822:	2958      	cmp	r1, #88	; 0x58
 8007824:	f000 8083 	beq.w	800792e <_printf_i+0x136>
 8007828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800782c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007830:	e032      	b.n	8007898 <_printf_i+0xa0>
 8007832:	2964      	cmp	r1, #100	; 0x64
 8007834:	d001      	beq.n	800783a <_printf_i+0x42>
 8007836:	2969      	cmp	r1, #105	; 0x69
 8007838:	d1f6      	bne.n	8007828 <_printf_i+0x30>
 800783a:	6820      	ldr	r0, [r4, #0]
 800783c:	6813      	ldr	r3, [r2, #0]
 800783e:	0605      	lsls	r5, r0, #24
 8007840:	f103 0104 	add.w	r1, r3, #4
 8007844:	d52a      	bpl.n	800789c <_printf_i+0xa4>
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6011      	str	r1, [r2, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	da03      	bge.n	8007856 <_printf_i+0x5e>
 800784e:	222d      	movs	r2, #45	; 0x2d
 8007850:	425b      	negs	r3, r3
 8007852:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007856:	486f      	ldr	r0, [pc, #444]	; (8007a14 <_printf_i+0x21c>)
 8007858:	220a      	movs	r2, #10
 800785a:	e039      	b.n	80078d0 <_printf_i+0xd8>
 800785c:	2973      	cmp	r1, #115	; 0x73
 800785e:	f000 809d 	beq.w	800799c <_printf_i+0x1a4>
 8007862:	d808      	bhi.n	8007876 <_printf_i+0x7e>
 8007864:	296f      	cmp	r1, #111	; 0x6f
 8007866:	d020      	beq.n	80078aa <_printf_i+0xb2>
 8007868:	2970      	cmp	r1, #112	; 0x70
 800786a:	d1dd      	bne.n	8007828 <_printf_i+0x30>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	f043 0320 	orr.w	r3, r3, #32
 8007872:	6023      	str	r3, [r4, #0]
 8007874:	e003      	b.n	800787e <_printf_i+0x86>
 8007876:	2975      	cmp	r1, #117	; 0x75
 8007878:	d017      	beq.n	80078aa <_printf_i+0xb2>
 800787a:	2978      	cmp	r1, #120	; 0x78
 800787c:	d1d4      	bne.n	8007828 <_printf_i+0x30>
 800787e:	2378      	movs	r3, #120	; 0x78
 8007880:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007884:	4864      	ldr	r0, [pc, #400]	; (8007a18 <_printf_i+0x220>)
 8007886:	e055      	b.n	8007934 <_printf_i+0x13c>
 8007888:	6813      	ldr	r3, [r2, #0]
 800788a:	1d19      	adds	r1, r3, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6011      	str	r1, [r2, #0]
 8007890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007898:	2301      	movs	r3, #1
 800789a:	e08c      	b.n	80079b6 <_printf_i+0x1be>
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6011      	str	r1, [r2, #0]
 80078a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078a4:	bf18      	it	ne
 80078a6:	b21b      	sxthne	r3, r3
 80078a8:	e7cf      	b.n	800784a <_printf_i+0x52>
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	6825      	ldr	r5, [r4, #0]
 80078ae:	1d18      	adds	r0, r3, #4
 80078b0:	6010      	str	r0, [r2, #0]
 80078b2:	0628      	lsls	r0, r5, #24
 80078b4:	d501      	bpl.n	80078ba <_printf_i+0xc2>
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	e002      	b.n	80078c0 <_printf_i+0xc8>
 80078ba:	0668      	lsls	r0, r5, #25
 80078bc:	d5fb      	bpl.n	80078b6 <_printf_i+0xbe>
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	4854      	ldr	r0, [pc, #336]	; (8007a14 <_printf_i+0x21c>)
 80078c2:	296f      	cmp	r1, #111	; 0x6f
 80078c4:	bf14      	ite	ne
 80078c6:	220a      	movne	r2, #10
 80078c8:	2208      	moveq	r2, #8
 80078ca:	2100      	movs	r1, #0
 80078cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078d0:	6865      	ldr	r5, [r4, #4]
 80078d2:	60a5      	str	r5, [r4, #8]
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	f2c0 8095 	blt.w	8007a04 <_printf_i+0x20c>
 80078da:	6821      	ldr	r1, [r4, #0]
 80078dc:	f021 0104 	bic.w	r1, r1, #4
 80078e0:	6021      	str	r1, [r4, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d13d      	bne.n	8007962 <_printf_i+0x16a>
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	f040 808e 	bne.w	8007a08 <_printf_i+0x210>
 80078ec:	4665      	mov	r5, ip
 80078ee:	2a08      	cmp	r2, #8
 80078f0:	d10b      	bne.n	800790a <_printf_i+0x112>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	07db      	lsls	r3, r3, #31
 80078f6:	d508      	bpl.n	800790a <_printf_i+0x112>
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	6862      	ldr	r2, [r4, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	bfde      	ittt	le
 8007900:	2330      	movle	r3, #48	; 0x30
 8007902:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007906:	f105 35ff 	addle.w	r5, r5, #4294967295
 800790a:	ebac 0305 	sub.w	r3, ip, r5
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	f8cd 8000 	str.w	r8, [sp]
 8007914:	463b      	mov	r3, r7
 8007916:	aa03      	add	r2, sp, #12
 8007918:	4621      	mov	r1, r4
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff fef6 	bl	800770c <_printf_common>
 8007920:	3001      	adds	r0, #1
 8007922:	d14d      	bne.n	80079c0 <_printf_i+0x1c8>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	b005      	add	sp, #20
 800792a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800792e:	4839      	ldr	r0, [pc, #228]	; (8007a14 <_printf_i+0x21c>)
 8007930:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007934:	6813      	ldr	r3, [r2, #0]
 8007936:	6821      	ldr	r1, [r4, #0]
 8007938:	1d1d      	adds	r5, r3, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6015      	str	r5, [r2, #0]
 800793e:	060a      	lsls	r2, r1, #24
 8007940:	d50b      	bpl.n	800795a <_printf_i+0x162>
 8007942:	07ca      	lsls	r2, r1, #31
 8007944:	bf44      	itt	mi
 8007946:	f041 0120 	orrmi.w	r1, r1, #32
 800794a:	6021      	strmi	r1, [r4, #0]
 800794c:	b91b      	cbnz	r3, 8007956 <_printf_i+0x15e>
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	f022 0220 	bic.w	r2, r2, #32
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	2210      	movs	r2, #16
 8007958:	e7b7      	b.n	80078ca <_printf_i+0xd2>
 800795a:	064d      	lsls	r5, r1, #25
 800795c:	bf48      	it	mi
 800795e:	b29b      	uxthmi	r3, r3
 8007960:	e7ef      	b.n	8007942 <_printf_i+0x14a>
 8007962:	4665      	mov	r5, ip
 8007964:	fbb3 f1f2 	udiv	r1, r3, r2
 8007968:	fb02 3311 	mls	r3, r2, r1, r3
 800796c:	5cc3      	ldrb	r3, [r0, r3]
 800796e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007972:	460b      	mov	r3, r1
 8007974:	2900      	cmp	r1, #0
 8007976:	d1f5      	bne.n	8007964 <_printf_i+0x16c>
 8007978:	e7b9      	b.n	80078ee <_printf_i+0xf6>
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	6825      	ldr	r5, [r4, #0]
 800797e:	6961      	ldr	r1, [r4, #20]
 8007980:	1d18      	adds	r0, r3, #4
 8007982:	6010      	str	r0, [r2, #0]
 8007984:	0628      	lsls	r0, r5, #24
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	d501      	bpl.n	800798e <_printf_i+0x196>
 800798a:	6019      	str	r1, [r3, #0]
 800798c:	e002      	b.n	8007994 <_printf_i+0x19c>
 800798e:	066a      	lsls	r2, r5, #25
 8007990:	d5fb      	bpl.n	800798a <_printf_i+0x192>
 8007992:	8019      	strh	r1, [r3, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	4665      	mov	r5, ip
 800799a:	e7b9      	b.n	8007910 <_printf_i+0x118>
 800799c:	6813      	ldr	r3, [r2, #0]
 800799e:	1d19      	adds	r1, r3, #4
 80079a0:	6011      	str	r1, [r2, #0]
 80079a2:	681d      	ldr	r5, [r3, #0]
 80079a4:	6862      	ldr	r2, [r4, #4]
 80079a6:	2100      	movs	r1, #0
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7f8 fc31 	bl	8000210 <memchr>
 80079ae:	b108      	cbz	r0, 80079b4 <_printf_i+0x1bc>
 80079b0:	1b40      	subs	r0, r0, r5
 80079b2:	6060      	str	r0, [r4, #4]
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	6123      	str	r3, [r4, #16]
 80079b8:	2300      	movs	r3, #0
 80079ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079be:	e7a7      	b.n	8007910 <_printf_i+0x118>
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	462a      	mov	r2, r5
 80079c4:	4639      	mov	r1, r7
 80079c6:	4630      	mov	r0, r6
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d0aa      	beq.n	8007924 <_printf_i+0x12c>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	079b      	lsls	r3, r3, #30
 80079d2:	d413      	bmi.n	80079fc <_printf_i+0x204>
 80079d4:	68e0      	ldr	r0, [r4, #12]
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	4298      	cmp	r0, r3
 80079da:	bfb8      	it	lt
 80079dc:	4618      	movlt	r0, r3
 80079de:	e7a3      	b.n	8007928 <_printf_i+0x130>
 80079e0:	2301      	movs	r3, #1
 80079e2:	464a      	mov	r2, r9
 80079e4:	4639      	mov	r1, r7
 80079e6:	4630      	mov	r0, r6
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d09a      	beq.n	8007924 <_printf_i+0x12c>
 80079ee:	3501      	adds	r5, #1
 80079f0:	68e3      	ldr	r3, [r4, #12]
 80079f2:	9a03      	ldr	r2, [sp, #12]
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	42ab      	cmp	r3, r5
 80079f8:	dcf2      	bgt.n	80079e0 <_printf_i+0x1e8>
 80079fa:	e7eb      	b.n	80079d4 <_printf_i+0x1dc>
 80079fc:	2500      	movs	r5, #0
 80079fe:	f104 0919 	add.w	r9, r4, #25
 8007a02:	e7f5      	b.n	80079f0 <_printf_i+0x1f8>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1ac      	bne.n	8007962 <_printf_i+0x16a>
 8007a08:	7803      	ldrb	r3, [r0, #0]
 8007a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a12:	e76c      	b.n	80078ee <_printf_i+0xf6>
 8007a14:	0800811d 	.word	0x0800811d
 8007a18:	0800812e 	.word	0x0800812e

08007a1c <_sbrk_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4c06      	ldr	r4, [pc, #24]	; (8007a38 <_sbrk_r+0x1c>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4605      	mov	r5, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	f7fe fe0e 	bl	8006648 <_sbrk>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_sbrk_r+0x1a>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_sbrk_r+0x1a>
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200013dc 	.word	0x200013dc

08007a3c <__sread>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a44:	f000 f8d6 	bl	8007bf4 <_read_r>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	bfab      	itete	ge
 8007a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a50:	181b      	addge	r3, r3, r0
 8007a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a56:	bfac      	ite	ge
 8007a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a5a:	81a3      	strhlt	r3, [r4, #12]
 8007a5c:	bd10      	pop	{r4, pc}

08007a5e <__swrite>:
 8007a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	461f      	mov	r7, r3
 8007a64:	898b      	ldrh	r3, [r1, #12]
 8007a66:	05db      	lsls	r3, r3, #23
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	4616      	mov	r6, r2
 8007a6e:	d505      	bpl.n	8007a7c <__swrite+0x1e>
 8007a70:	2302      	movs	r3, #2
 8007a72:	2200      	movs	r2, #0
 8007a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a78:	f000 f868 	bl	8007b4c <_lseek_r>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a86:	81a3      	strh	r3, [r4, #12]
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_write_r>

08007a96 <__sseek>:
 8007a96:	b510      	push	{r4, lr}
 8007a98:	460c      	mov	r4, r1
 8007a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9e:	f000 f855 	bl	8007b4c <_lseek_r>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	bf15      	itete	ne
 8007aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ab2:	81a3      	strheq	r3, [r4, #12]
 8007ab4:	bf18      	it	ne
 8007ab6:	81a3      	strhne	r3, [r4, #12]
 8007ab8:	bd10      	pop	{r4, pc}

08007aba <__sclose>:
 8007aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007abe:	f000 b813 	b.w	8007ae8 <_close_r>
	...

08007ac4 <_write_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4c07      	ldr	r4, [pc, #28]	; (8007ae4 <_write_r+0x20>)
 8007ac8:	4605      	mov	r5, r0
 8007aca:	4608      	mov	r0, r1
 8007acc:	4611      	mov	r1, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	6022      	str	r2, [r4, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f7fe fb32 	bl	800613c <_write>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_write_r+0x1e>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_write_r+0x1e>
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	200013dc 	.word	0x200013dc

08007ae8 <_close_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4c06      	ldr	r4, [pc, #24]	; (8007b04 <_close_r+0x1c>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4605      	mov	r5, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	f7fe fdd4 	bl	80066a0 <_close>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_close_r+0x1a>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_close_r+0x1a>
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	200013dc 	.word	0x200013dc

08007b08 <_fstat_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4c07      	ldr	r4, [pc, #28]	; (8007b28 <_fstat_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4605      	mov	r5, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	f7fe fdcf 	bl	80066b8 <_fstat>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_fstat_r+0x1c>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_fstat_r+0x1c>
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	200013dc 	.word	0x200013dc

08007b2c <_isatty_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4c06      	ldr	r4, [pc, #24]	; (8007b48 <_isatty_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4605      	mov	r5, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	f7fe fdce 	bl	80066d8 <_isatty>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_isatty_r+0x1a>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_isatty_r+0x1a>
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	200013dc 	.word	0x200013dc

08007b4c <_lseek_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4c07      	ldr	r4, [pc, #28]	; (8007b6c <_lseek_r+0x20>)
 8007b50:	4605      	mov	r5, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	6022      	str	r2, [r4, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7fe fdc7 	bl	80066ee <_lseek>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_lseek_r+0x1e>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_lseek_r+0x1e>
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	200013dc 	.word	0x200013dc

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0302 	add.w	r3, r1, r2
 8007b78:	d807      	bhi.n	8007b8a <memmove+0x1a>
 8007b7a:	1e42      	subs	r2, r0, #1
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	d00a      	beq.n	8007b96 <memmove+0x26>
 8007b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b88:	e7f8      	b.n	8007b7c <memmove+0xc>
 8007b8a:	4283      	cmp	r3, r0
 8007b8c:	d9f5      	bls.n	8007b7a <memmove+0xa>
 8007b8e:	1881      	adds	r1, r0, r2
 8007b90:	1ad2      	subs	r2, r2, r3
 8007b92:	42d3      	cmn	r3, r2
 8007b94:	d100      	bne.n	8007b98 <memmove+0x28>
 8007b96:	bd10      	pop	{r4, pc}
 8007b98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ba0:	e7f7      	b.n	8007b92 <memmove+0x22>

08007ba2 <__malloc_lock>:
 8007ba2:	4770      	bx	lr

08007ba4 <__malloc_unlock>:
 8007ba4:	4770      	bx	lr

08007ba6 <_realloc_r>:
 8007ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba8:	4607      	mov	r7, r0
 8007baa:	4614      	mov	r4, r2
 8007bac:	460e      	mov	r6, r1
 8007bae:	b921      	cbnz	r1, 8007bba <_realloc_r+0x14>
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bb6:	f7ff babd 	b.w	8007134 <_malloc_r>
 8007bba:	b922      	cbnz	r2, 8007bc6 <_realloc_r+0x20>
 8007bbc:	f7ff fa6c 	bl	8007098 <_free_r>
 8007bc0:	4625      	mov	r5, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc6:	f000 f827 	bl	8007c18 <_malloc_usable_size_r>
 8007bca:	42a0      	cmp	r0, r4
 8007bcc:	d20f      	bcs.n	8007bee <_realloc_r+0x48>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff faaf 	bl	8007134 <_malloc_r>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d0f2      	beq.n	8007bc2 <_realloc_r+0x1c>
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4622      	mov	r2, r4
 8007be0:	f7fe ff05 	bl	80069ee <memcpy>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4638      	mov	r0, r7
 8007be8:	f7ff fa56 	bl	8007098 <_free_r>
 8007bec:	e7e9      	b.n	8007bc2 <_realloc_r+0x1c>
 8007bee:	4635      	mov	r5, r6
 8007bf0:	e7e7      	b.n	8007bc2 <_realloc_r+0x1c>
	...

08007bf4 <_read_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4c07      	ldr	r4, [pc, #28]	; (8007c14 <_read_r+0x20>)
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7fe fd02 	bl	800660c <_read>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_read_r+0x1e>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_read_r+0x1e>
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200013dc 	.word	0x200013dc

08007c18 <_malloc_usable_size_r>:
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f18      	subs	r0, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfbc      	itt	lt
 8007c22:	580b      	ldrlt	r3, [r1, r0]
 8007c24:	18c0      	addlt	r0, r0, r3
 8007c26:	4770      	bx	lr

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
